<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NationalInstruments.UI.WindowsForms</name>
    </assembly>
    <members>
        <member name="T:NationalInstruments.UI.WindowsForms.BooleanArray`1">
            <summary>
            Represents the array of Measurement Studio Windows Forms <see cref="T:NationalInstruments.UI.WindowsForms.Boolean"/>
            controls for displaying and editing Boolean values.
            </summary>
            <threadsafety safety="unsafe"/>
            <typeparam name="TControl">
            The type of the control for which an array is created. The type must derive from
            <see cref="T:NationalInstruments.UI.WindowsForms.Boolean"/>, implement <see cref="T:System.ICloneable"/> and
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>, and specify a default constructor.
            </typeparam>
            <remarks>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValues(System.Boolean[])"/> provides
            the ability to set the data values displayed by the items of the array. You can also use 
            <see cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValuesFromSample(NationalInstruments.DigitalWaveform,System.Int32)"/>
            to set the data values displayed by the array to a sample in a <see cref="T:NationalInstruments.DigitalWaveform"/> and 
            <see cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValuesFromSignal(NationalInstruments.DigitalWaveform,System.Int32)"/> to display
            data values of a signal in a <see cref="T:NationalInstruments.DigitalWaveform"/>.
            Setting the data
            values raises the <see cref="E:NationalInstruments.UI.WindowsForms.BooleanArray`1.ValuesChanged"/>
            event. You can obtain the data values of the control by calling 
            <see cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.GetValues"/>.
            </para>
            	<para>
            When the <see cref="P:NationalInstruments.UI.WindowsForms.BooleanArray`1.MutuallyExclusive"/> property is set to true, the 
            value of all the controls in the array is set to false to ensure that only one value can be set to true at a time. However, 
            the values of the controls are not overwritten when this value is set to false.
            </para>
            	<note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <lastupdated>3/26/2008 12:04:48 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.BooleanArray`1"/> class.
            </summary>
            <lastupdated>3/15/2006 12:08:30 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.Clone">
            <summary>
            Creates a new object that is a copy of this instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <remarks>
            Overrides <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.Clone"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:System.ICloneable"/>
            <lastupdated>3/15/2006 12:09:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.BooleanArray`1.BackColor">
            <summary>
            Gets or sets the background color of the control.
            </summary>
            <value>
            A <see cref="T:System.Drawing.Color"/> that represents the background color of the control.
            The default value is <see cref="P:System.Drawing.Color.Transparent"/>.
            </value>
            <remarks>
            <para>
            Overrides <see cref="P:System.Windows.Forms.Control.BackColor"/>.
            </para>
            <para>
            The value of <see cref="P:System.Windows.Forms.Control.BackgroundImage"/> takes precedence over <see cref="P:NationalInstruments.UI.WindowsForms.BooleanArray`1.BackColor"/>.
            If <see cref="P:System.Windows.Forms.Control.BackgroundImage"/> is set to a value other than its default value, the 
            specified image is drawn in the background; otherwise, the background is filled with the color specified in
            <see cref="P:NationalInstruments.UI.WindowsForms.BooleanArray`1.BackColor"/>.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:System.Windows.Forms.Control.BackColor"/>
            <seealso cref="P:System.Windows.Forms.Control.BackgroundImage"/>
            <seealso cref="P:System.Windows.Forms.Control.ForeColor"/>
            <seealso cref="T:System.Windows.Forms.Control"/>
            <lastupdated>6/26/2003 12:57:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.ResetBackColor">
            <exclude/>
            <lastupdated>3/15/2006 12:11:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.BooleanArray`1.BindingData">
            <summary>
            Gets or sets the data when binding to a data source.
            </summary>
            <value>
            The data when binding to a data source.
            </value>
            <remarks>
            	<para>
            You can  select a data source using  <see cref="P:NationalInstruments.UI.WindowsForms.BooleanArray`1.BindingData"/> 
            within the Windows Forms Designer by expanding the 
             <see cref="P:System.Windows.Forms.Control.DataBindings"/> node in the Properties window. 
            The data source bound to  <see cref="P:NationalInstruments.UI.WindowsForms.BooleanArray`1.BindingData"/>
            must provide an array of data of type <see cref="T:System.Boolean"/>.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>5/9/2011 4:14:49 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.BooleanArray`1.MutuallyExclusive">
            <summary>
            Allows the controls in the array to be mutually exclusive. This ensures that only one of the elements is set to true at a time.
            </summary>
            <value>
            Set to true if the controls in the array behave such that only one element can be set to true at a time. The default value is false.
            </value>
            <remarks>
            When this value is set to true, the value of all the controls in the array is set to false to ensure that only one value can be set to true at a time. However, 
            the values of the controls are not overwritten when this value is set to false.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>3/26/2008 12:04:57 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.GetValues">
            <summary>
            Gets the data values of the control.
            </summary>
            <returns>
            A <see cref="T:System.Boolean"/> array that represents the data values of the control.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<see cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.GetValues"/> creates a copy of
            the data values.
            </remarks>
            <example>The following example demonstrates getting an array of values from a control array and printing the values to debug output. 
            <code lang="VB.NET">
            Dim vals As Boolean()
             
            vals = boolCtrlArray.GetValues()
            For i As Integer = 0 To vals.Length - 1
                Debug.WriteLine(String.Format("boolean control array item {0} has a value of {1}", i, vals(i)))
            Next
            </code>
            </example>
            <example>
            	<code lang="C#">
            bool[] vals;
             
            vals = boolCtrlArray.GetValues();
            for (int i = 0; i &lt; vals.Length; i++)
                Debug.WriteLine(string.Format("boolean control array item {0} has a value of {1}", i, vals[i]));
            </code>
            </example>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValues(System.Boolean[])"/>
            <lastupdated>10/3/2010 7:10:55 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValues(System.Boolean[])">
            <summary>
            Sets the values of the items in the control to the array of specified values.
            </summary>
            <param name="data">
            The array of values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The supplied data is not mutually exclusive and <see cref="P:NationalInstruments.UI.WindowsForms.BooleanArray`1.MutuallyExclusive"/> is set to true.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<see cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValues(System.Boolean[])"/> creates
            a copy of <paramref name="data"/>. If the <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ScaleMode"/>
            is created with <see cref="M:NationalInstruments.UI.ControlArrayScaleMode.CreateAutomaticMode"/>, then
            <see cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValues(System.Boolean[])"/> updates the number of
            items in the array based on the length of <paramref name="data"/>.
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValuesFromSample(NationalInstruments.DigitalWaveform,System.Int32)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValuesFromSignal(NationalInstruments.DigitalWaveform,System.Int32)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.GetValues"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.BooleanArray`1.MutuallyExclusive"/>
            <lastupdated>3/26/2008 12:05:10 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValues(System.Boolean[],System.Int32,System.Int32)">
            <summary>
            Sets the values of the items in the control to the array of specified values using the specified start 
            index and length.
            </summary>
            <param name="data">
            The array of values.
            </param>
            <param name="startIndex">
            The index in <paramref name="data"/> at which the data begins.
            </param>
            <param name="length">
            The number of elements, beginning at <paramref name="startIndex"/>, in <paramref name="data"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="startIndex"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is greater than the number of elements
            from <paramref name="startIndex"/> to the end of <paramref name="data"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            The supplied data is not mutually exclusive and <see cref="P:NationalInstruments.UI.WindowsForms.BooleanArray`1.MutuallyExclusive"/> is set to true.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<see cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValues(System.Boolean[])"/> creates
            a copy of <paramref name="data"/>. If the <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ScaleMode"/>
            is created with <see cref="M:NationalInstruments.UI.ControlArrayScaleMode.CreateAutomaticMode"/>, then
            <see cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValues(System.Boolean[])"/> updates the number of
            items in the array based on the length of <paramref name="data"/>.
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValuesFromSample(NationalInstruments.DigitalWaveform,System.Int32)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValuesFromSignal(NationalInstruments.DigitalWaveform,System.Int32)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.GetValues"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.BooleanArray`1.MutuallyExclusive"/>
            <lastupdated>3/26/2008 12:05:14 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValuesFromSample(NationalInstruments.DigitalWaveform,System.Int32)">
            <summary>
            Sets the value of the items in the control to the specified sample in the waveform.
            </summary>
            <param name="data">
            The waveform containing samples to display on the control.
            </param>
            <param name="sampleIndex">
            The index of the sample in the waveform.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="sampleIndex"/> is less than 0.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="sampleIndex"/> is greater than the number of samples in <paramref name="data"/>.
            </para>
            </exception>
            <remarks>
            	<see cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValuesFromSample(NationalInstruments.DigitalWaveform,System.Int32)"/> creates
            a copy of <paramref name="data"/>. If the <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ScaleMode"/>
            is created with <see cref="M:NationalInstruments.UI.ControlArrayScaleMode.CreateAutomaticMode"/>, then
            <see cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValuesFromSample(NationalInstruments.DigitalWaveform,System.Int32)"/> updates the number of
            items in the array based on the number of signals in <paramref name="data"/>.
            </remarks>
            <example>
            The following example demonstrates the use of <see cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValuesFromSample(NationalInstruments.DigitalWaveform,System.Int32)"/>
            to display the byte sample 11 at index 2 obtained from a digital port. The example assumes that an <see cref="T:NationalInstruments.UI.WindowsForms.LedArray"/> called 
            <format type="monospace">ledArray1</format> 
            has been declared and initialized.
            <code lang="VB.NET">
            ledArray1.SetValuesFromSample(DigitalWaveform.FromPort(New Byte() {3, 5, 11, 9}), 2)
            </code>
            	<code lang="C#">
            ledArray1.SetValuesFromSample(DigitalWaveform.FromPort(new byte[] { 3, 5, 11, 9 }), 2);
            </code>
            </example>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValuesFromSignal(NationalInstruments.DigitalWaveform,System.Int32)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValues(System.Boolean[])"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.GetValues"/>
            <lastupdated>10/5/2006 2:30:55 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValuesFromSignal(NationalInstruments.DigitalWaveform,System.Int32)">
            <summary>
            Sets the value of the items in the control to the samples of the specified signal in the waveform.
            </summary>
            <param name="data">
            The waveform containing the samples of the signal to display on the control.
            </param>
            <param name="signalIndex">
            The index of the signal in the waveform.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="signalIndex"/> is less than 0.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="signalIndex"/> is greater than the number of signals in <paramref name="data"/>.
            </para>
            </exception>
            <remarks>
            	<see cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValuesFromSignal(NationalInstruments.DigitalWaveform,System.Int32)"/> creates
            a copy of <paramref name="data"/>. If the <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ScaleMode"/>
            is created with <see cref="M:NationalInstruments.UI.ControlArrayScaleMode.CreateAutomaticMode"/>, then
            <see cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValuesFromSignal(NationalInstruments.DigitalWaveform,System.Int32)"/> updates the number of
            items in the array based on the number of samples in the specified signal of <paramref name="data"/>.
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValuesFromSample(NationalInstruments.DigitalWaveform,System.Int32)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValues(System.Boolean[])"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.GetValues"/>
            <lastupdated>10/5/2006 2:33:27 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.ControlAdded"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Forms.ControlEventArgs"/> that contains the event data.
            </param>
            <remarks>
            Overrides <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.OnControlAdded(System.Windows.Forms.ControlEventArgs)"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.OnControlAdded(System.Windows.Forms.ControlEventArgs)"/>
            <seealso cref="E:System.Windows.Forms.Control.ControlAdded"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ScaleMode"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.Count"/>
            <lastupdated>3/15/2006 12:09:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.ControlRemoved"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Forms.ControlEventArgs"/> that contains the event data.
            </param>
            <remarks>
            Overrides <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.OnControlRemoved(System.Windows.Forms.ControlEventArgs)"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.OnControlRemoved(System.Windows.Forms.ControlEventArgs)"/>
            <seealso cref="E:System.Windows.Forms.Control.ControlRemoved"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ScaleMode"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.Count"/>
            <lastupdated>3/15/2006 12:09:57 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.OnValuesChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.BooleanArray`1.ValuesChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.BooleanArray`1.ValuesChanged"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValues(System.Boolean[])"/>
            <lastupdated>3/15/2006 12:10:03 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.BooleanArray`1.ValuesChanged">
            <summary>
            Occurs when a new set of data values is passed to the control.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValues(System.Boolean[])"/>
            <lastupdated>3/15/2006 12:11:45 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.ControlArray`1">
            <summary>
            Provides the base class for controls that encapsulate other controls as an array.
            </summary>
            <threadsafety safety="unsafe"/>
            <typeparam name="TControl">
            The type of the control for which an array is created. The type must derive from
            <see cref="T:System.Windows.Forms.Control"/>, implement <see cref="T:System.ICloneable"/> and
            <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>, and specify a default constructor.
            </typeparam>
            <remarks>
            	<para>
            A control can be encapsulated as an array if it meets the constraints of the generic type
            parameter <typeparamref name="TControl"/>. <see cref="T:NationalInstruments.UI.WindowsForms.ControlArray`1"/> uses
            <see cref="M:System.ICloneable.Clone"/> to create new instances of items in the array. The
            items must also implement <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> to
            allow the array to update its appearance and behavior when a property value is changed.
            <see cref="T:NationalInstruments.UI.WindowsForms.ControlArray`1"/> itself meets the
            constraints of the generic type parameter <typeparamref name="TControl"/> allowing you to create 2D arrays
            of controls.
            </para>
            	<para>
            You can configure the layout and appearance of the array through the 
            <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.LayoutMode"/>,
            <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.Border"/>, and 
            <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.CanShowFocus"/> properties.
            The <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ItemTemplate"/> is cloned
            to create new instances of items added to the array. The appearance of the
            <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ItemTemplate"/> dictates the
            appearance of newly created items of the array.
            </para>
            	<para>
            You can configure the scaling behavior of the array by specifying a fixed number of items
            in the array or by allowing the array to automatically adjust the number of items in the
            array based on the number of specified data values using <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ScaleMode"/>.
            Use <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.Count"/> to obtain the 
            number of items in the array.
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.BeginUpdate"/> suspends the painting of the control until 
            <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.EndUpdate"/> is called. 
            <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.EndUpdate"/> resumes the painting of the 
            control that was suspended by calling <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.BeginUpdate"/>. 
            When making many changes to the appearance of the control, use <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.BeginUpdate"/> 
            and <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.EndUpdate"/> to improve 
            performance and to minimize distraction by preventing flickering. 
            </para>
            	<para>
            The control provides the <see cref="E:NationalInstruments.UI.WindowsForms.ControlArray`1.PropertyChanged"/> event
            that is raised when the value of a property changes. The <see cref="E:NationalInstruments.UI.WindowsForms.ControlArray`1.ItemPropertyChanged"/>
            event is raised when the value of a property of an array item changes.
            </para>
            	<note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            	<note type="note">
            If you create two-dimensional arrays of controls, then you must call <see cref="M:System.IDisposable.Dispose"/> on the control array after you have finished 
            using it to reclaim memory and perform cleanup.
            </note>
            </remarks>
            <lastupdated>9/11/2007 11:20:18 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.ControlArray`1"/> class.
            </summary>
            <lastupdated>3/15/2006 12:25:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.EnableBasePropertyChangedEvents">
            <summary>
            Enables <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event 
            to be raised when properties defined in the <see cref="T:System.Windows.Forms.Control"/> base class
            are changed.
            </summary>
            <remarks>
            	<para>
            You must call <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.DisableBasePropertyChangedEvents"/>
            after you have finished using the <see cref="T:NationalInstruments.UI.WindowsForms.ControlArray`1"/> to reclaim memory and perform cleanup.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            <lastupdated>9/7/2007 3:29:33 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.DisableBasePropertyChangedEvents">
            <summary>
            Disables the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event 
            that is raised when properties defined in the <see cref="T:System.Windows.Forms.Control"/> base class
            are changed.
            </summary>
            <remarks>
            	<para>
            If you have called <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.EnableBasePropertyChangedEvents"/>, then
            you must call <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.DisableBasePropertyChangedEvents"/>
            after you have finished using the <see cref="T:NationalInstruments.UI.WindowsForms.ControlArray`1"/> to reclaim memory and perform cleanup.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            <lastupdated>9/7/2007 3:26:25 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.ControlArray`1"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.ControlArray`1"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            	<note type="note">
            If you create 2D arrays of controls, then you must call <see cref="M:System.IDisposable.Dispose"/> on the control 
            array after you have finished using it to reclaim memory and perform cleanup.
            </note>
            </remarks>
            <seealso cref="M:System.IDisposable.Dispose"/>
            <seealso cref="T:System.IDisposable"/>
            <lastupdated>9/11/2007 11:21:20 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.GetService(System.Type)">
            <summary>
            Returns an object that represents a service provided by the control or by its container.
            </summary>
            <param name="service">
            A service provided by the control.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents a service provided by the control.  This value is
            <see langword="null"/> if the control does not provide the specified service.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>9/7/2007 3:32:15 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.InitializeComponent">
            <exclude/>
            <summary>
            Required method for designer support. Do not modify 
            the contents of this method with the code editor.
            </summary>
            <lastupdated>3/15/2006 1:12:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlArray`1.AutoScroll">
            <summary>
            Gets or sets a value indicating whether the container enables the user to scroll 
            to any controls placed outside of its visible boundaries.
            </summary>
            <value>
            	<see langword="true"/> if the container enables auto-scrolling. The default value is <see langword="true"/>.
            </value>
            <remarks>
            Overrides <see cref="P:System.Windows.Forms.ScrollableControl.AutoScroll"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>3/15/2006 12:25:30 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlArray`1.AutoSize">
            <summary>
            Gets or sets a value indicating whether the control is automatically resized to
            display its entire contents.
            </summary>
            <value>
            	<see langword="true"/> if the control is automatically resized. The default value is
            <see langword="false"/>.
            </value>
            <remarks>
            Overrides <see cref="P:System.Windows.Forms.Control.AutoSize"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>3/15/2006 12:26:17 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlArray`1.Text">
            <summary>
            Gets or sets the text associated with the control.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the text associated with the control.
            The default value is <see cref="F:System.String.Empty"/>.
            </value>
            <remarks>
            Overrides <see cref="P:System.Windows.Forms.Control.Text"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>3/15/2006 3:51:21 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ItemTemplate">
            <summary>
            Gets the template control used to create items in the array.
            </summary>
            <value>
            A <see cref="T:System.Windows.Forms.Control"/> that serves as the template used for
            creating items in the array. The default value is <see langword="null"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>3/15/2006 12:27:51 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlArray`1.Item(System.Int32)">
            <summary>
            Gets the control at the specified index in the array.
            </summary>
            <param name="index">
            The index of the control to retrieve from the array.
            </param>
            <value>
            A <see cref="T:System.Windows.Forms.Control"/> at the specified index
            in the array.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index"/> value is less than zero or is greater than or equal to
            the number of control in the array.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>3/15/2006 12:27:45 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlArray`1.Border">
            <summary>
            Gets or sets the border style of the control.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.Border"/> that represents the border to draw.
            The default value is <see cref="P:NationalInstruments.UI.Border.None"/>.
            </value>
            <remarks>
            You can set this property to any instance of <see cref="T:NationalInstruments.UI.Border"/>, including 
            the <see cref="T:NationalInstruments.UI.Border"/> properties and any custom class that implements 
            the <see cref="T:NationalInstruments.UI.Border"/> base class.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The specified <see cref="T:NationalInstruments.UI.Border"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>3/15/2006 12:27:13 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlArray`1.CanShowFocus">
            <summary>
            Gets or sets value indicating if the control draws a focus rectangle when the control
            has focus.
            </summary>
            <value>
            	<see langword="true"/> if the control draws a focus rectangle when the control has focus. The default value is <see langword="false"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>3/15/2006 12:27:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlArray`1.LayoutMode">
            <summary>
            Gets or sets the mode used to lay out the items of the control.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.ControlArrayLayoutMode"/> used to lay out the items of the control.
            The default value is <see cref="F:NationalInstruments.UI.ControlArrayLayoutMode.Vertical"/>.
            </value>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:NationalInstruments.UI.ControlArrayLayoutMode"/> value.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>3/15/2006 12:32:09 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ItemDistance">
            <summary>
            Gets or sets the distance between items of the control.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the distance between items of the control.
            The default value is 1.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value is less than 0.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/5/2006 4:46:43 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ScaleMode">
            <summary>
            Gets or sets the mode used to modify the number of items in the control.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.ControlArrayScaleMode"/> used to modify the number
            of items in the control. The default value is <see cref="M:NationalInstruments.UI.ControlArrayScaleMode.CreateAutomaticMode"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>3/15/2006 12:33:28 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.UpdateItems">
            <summary>
            Updates the value of items in the control when the <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ScaleMode"/>
            changes.
            </summary>
            <remarks>
            Derived classes can call <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.UpdateItems"/> to
            create or remove items from the array. This method also updates the value of any newly created
            items based on the data.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>3/15/2006 1:13:37 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlArray`1.Count">
            <summary>
            Gets the number of controls in the array.
            </summary>
            <value>
            The number of controls in the array. The default value is 0.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.EnsureItems(System.Int32)"/>
            <lastupdated>3/15/2006 12:27:26 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlArray`1.System#Collections#Generic#ICollection{TControl}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see>  is read-only.
            </summary>
            <value>
            	<see langword="true"/> if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, <see langword="false"/>.
            </value>
            <lastupdated>9/28/2009 4:57:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.Reset">
            <summary>
            Resets the items of the array to their initial state.
            </summary>
            <remarks>
            	<see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.Reset"/>
            recreates the controls using the <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ItemTemplate"/>. 
            If the <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ScaleMode"/>
            is created with <see cref="M:NationalInstruments.UI.ControlArrayScaleMode.CreateAutomaticMode"/>, then all items
            of the array are removed such that <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.Count"/>
            returns 0. If the <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ScaleMode"/>
            is created with <see cref="M:NationalInstruments.UI.ControlArrayScaleMode.CreateFixedMode(System.Int32)"/>, the number of items
            in the array is not affected.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>3/15/2006 1:09:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the items of the control to the specified array, starting at the specified index.
            </summary>
            <param name="array">
            The 1D <see cref="T:System.Array"/> that is the destination of the items
            copied from the control.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="arrayIndex"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multi-dimensional.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of items in the control is greater than the available space from
            <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidCastException">
            The type of the control cannot be cast automatically to the type of the destination
            <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>6/23/2006 3:06:01 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.System#Collections#Generic#ICollection{TControl}#Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">
            The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </param>
            <returns>
            	<see langword="true"/> if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, <see langword="false"/>.
            </returns>
            <lastupdated>9/28/2009 4:57:08 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.System#Collections#Generic#ICollection{TControl}#Add(`0)">
            <summary>
            Adding a control to the array through this method is not supported.
            </summary>
            <param name="item">
            The control to be added.
            </param>
            <exception cref="T:System.ObjectDisposedException">
                The object has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
                Always.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ScaleMode"/>
            <lastupdated>3/15/2006 1:11:21 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.System#Collections#Generic#ICollection{TControl}#Remove(`0)">
            <summary>
            Removing a control to the array through this method is not supported.
            </summary>
            <param name="item">
            The control to be removed.
            </param>
            <returns>The return value is not documented because this method is not supported.</returns>
            <exception cref="T:System.ObjectDisposedException">
                The object has been disposed.
            </exception>
            <exception cref="T:System.NotSupportedException">
                Always.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ScaleMode"/>
            <lastupdated>10/1/2009 1:55:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.System#Collections#Generic#ICollection{TControl}#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. 
            </exception>
            <remarks>
            	<see cref="P:System.Collections.Generic.ICollection`1.Count"></see> must be set to 0, and references to other objects from elements of the collection must be released.
            </remarks>
            <lastupdated>10/1/2009 1:55:39 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.System#Collections#Generic#IEnumerable{TControl}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"></see>  that can be used to iterate through the collection.
            </returns>
            <lastupdated>9/28/2009 4:58:02 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can
            be used to iterate through the collection.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Implements <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>.
            </remarks>
            <lastupdated>3/15/2006 1:00:59 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.System#Collections#IEnumerable#GetEnumerator">
            <exclude/>
            <lastupdated>3/15/2006 1:11:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.BeginUpdate">
            <summary>
            Suspends the painting of the control until <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.EndUpdate"/>
            is called.
            </summary>
            <remarks>
            When making many changes to the appearance of a control, you can call
            <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.BeginUpdate"/> to 
            temporarily suspend the painting of the control. Temporarily suspending the painting of the control 
            improves performance and prevents flickering, resulting in less distractions. 
            After all updates are made, call 
            <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.EndUpdate"/> to 
            resume drawing of the control. You must call <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.EndUpdate"/>
            once for each call to <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.BeginUpdate"/>.
            <para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.BeginUpdate"/>
            requires that <see cref="T:System.Security.Permissions.SecurityPermission"/>
            with <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode"/>
            be granted to the <format type="monospace">NationalInstruments.UI.WindowsForms</format> assembly. If permission is not granted, 
            <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.BeginUpdate"/> has no effect.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.EndUpdate"/>
            <lastupdated>3/15/2006 12:57:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.EndUpdate">
            <summary>
            Resumes the painting of the control that was suspended by calling 
            <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.BeginUpdate"/>.
            </summary>
            <remarks>
            When making many changes to the appearance of a control, you can call
            <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.BeginUpdate"/> to 
            temporarily suspend the painting of the control. Temporarily suspending the painting of the control 
            improves performance and prevents flickering, resulting in less distractions. 
            After all updates are made, call 
            <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.EndUpdate"/> to 
            resume drawing of the control. You must call <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.EndUpdate"/>
            once for each call to <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.BeginUpdate"/>.
            <para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.EndUpdate"/>
            requires that <see cref="T:System.Security.Permissions.SecurityPermission"/>
            with <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode"/> be granted to the
            <format type="monospace">NationalInstruments.UI.WindowsForms</format> assembly. If permission is not granted, 
            <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.EndUpdate"/> has no effect.</para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.BeginUpdate"/>
            <lastupdated>3/15/2006 12:59:00 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.Clone">
            <summary>
            Creates a new object that is a copy of this instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <remarks>
            	<see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.Clone"/> creates a new object that is a deep copy
            of <see cref="T:NationalInstruments.UI.WindowsForms.ControlArray`1"/>.
            <para>
            A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the 
            original object. If the field is a value type, a bit-by-bit copy of the field is performed. If the field is a reference type, the 
            reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the 
            clone point to the same object. In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by 
            the fields in the object.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:System.ICloneable"/>
            <lastupdated>3/15/2006 12:59:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.OnPropertyChanged(NationalInstruments.Restricted.PropertyKey)">
            <exclude/>
            <lastupdated>10/5/2010 1:57:00 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ControlArray`1.PropertyChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ControlArray`1.PropertyChanged"/>
            <lastupdated>3/15/2006 1:08:21 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ControlArray`1.PropertyChanged">
            <summary>
            Occurs when a property on the control changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>3/15/2006 1:13:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ControlArray`1.ItemPropertyChanged">
            <summary>
            Occurs when a property of an item in the array changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>3/15/2006 1:13:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.ThrowExceptionIfDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if the object has been disposed.
            </summary>
            <remarks>
            The <see cref="T:System.ObjectDisposedException"/> is thrown if the value of
            <see cref="P:System.Windows.Forms.Control.IsDisposed"/> is <see langword="true"/>.
            </remarks>
            <seealso cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)"/>
            <seealso cref="P:System.Windows.Forms.Control.IsDisposed"/>
            <seealso cref="T:System.GC"/>
            <lastupdated>3/15/2006 1:13:10 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlArray`1.DefaultSize">
            <summary>
            Gets the default size of the control.
            </summary>
            <value>
            The default <see cref="T:System.Drawing.Size"/> of the control.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="P:System.Windows.Forms.Control.DefaultSize"/>.
            </remarks>
            <seealso cref="P:System.Windows.Forms.Control.DefaultSize"/>
            <seealso cref="T:System.Windows.Forms.Control"/>
            <lastupdated>3/15/2006 12:27:34 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Sets the bounds of the control to the specified
            value.
            </summary>
            <param name="x">
            The new <see cref="P:System.Windows.Forms.Control.Left"/> value of the control.
            </param>
            <param name="y">
            The new <see cref="P:System.Windows.Forms.Control.Right"/> value of the control.
            </param>
            <param name="width">
            The new <see cref="P:System.Windows.Forms.Control.Width"/> value of the control.
            </param>
            <param name="height">
            The new <see cref="P:System.Windows.Forms.Control.Height"/> value of the control.
            </param>
            <param name="specified">
            A bitwise combination of the <see cref="T:System.Windows.Forms.BoundsSpecified"/> values.
            </param>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)"/>.
            </remarks>
            <seealso cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)"/>
            <seealso cref="P:System.Windows.Forms.Control.Bounds"/>
            <seealso cref="E:System.Windows.Forms.Control.Layout"/>
            <lastupdated>3/15/2006 1:09:17 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.OnHandleCreated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:System.Windows.Forms.Control.HandleCreated"/>
            <lastupdated>3/15/2006 1:01:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.OnScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.ScrollableControl.Scroll"/> event.
            </summary>
            <param name="se">
            A <see cref="T:System.Windows.Forms.ScrollEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:System.Windows.Forms.ScrollableControl.Scroll"/>
            <lastupdated>3/15/2006 1:08:40 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:System.Windows.Forms.Control.MouseWheel"/>
            <lastupdated>3/15/2006 1:02:24 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Layout"/> event.
            </summary>
            <param name="levent">
            A <see cref="T:System.Windows.Forms.LayoutEventArgs"/> that contains the event data.
            </param>
            <seealso cref="E:System.Windows.Forms.Control.Layout"/>
            <lastupdated>9/7/2007 3:32:37 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the control.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)"/>.
            </remarks>
            <seealso cref="E:System.Windows.Forms.Control.Paint"/>
            <lastupdated>3/15/2006 3:55:58 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:System.Windows.Forms.Control.Paint"/>
            <lastupdated>3/15/2006 1:02:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.OnVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:System.Windows.Forms.Control.Visible"/>
            <lastupdated>9/7/2007 3:32:55 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.EnsureItems(System.Int32)">
            <summary>
            Updates the control to ensure that there are the specified number of items in
            the array.
            </summary>
            <param name="count">
            The number of items.
            </param>
            <remarks>
            When the <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ScaleMode"/> 
            is created with <see cref="M:NationalInstruments.UI.ControlArrayScaleMode.CreateAutomaticMode"/>, 
            derived classes can use <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.EnsureItems(System.Int32)"/> 
            to update the number of controls in the array.
            Derived classes can call <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.EnsureItems(System.Int32)"/>
            when setting the values of items in the array.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="count"/> is less than zero.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.UpdateItems"/>
            <lastupdated>3/15/2006 1:00:49 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.ControlAdded"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Forms.ControlEventArgs"/> that contains the event data.
            </param>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:System.Windows.Forms.Control.ControlAdded"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ScaleMode"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.Count"/>
            <lastupdated>3/15/2006 1:01:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.ControlRemoved"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Forms.ControlEventArgs"/> that contains the event data.
            </param>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:System.Windows.Forms.Control.ControlRemoved"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ScaleMode"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.Count"/>
            <lastupdated>3/15/2006 1:01:15 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.OnItemPropertyChanged(NationalInstruments.UI.ControlArrayPropertyChangedEventArgs{`0})">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ControlArray`1.ItemPropertyChanged"/>
            event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.ControlArrayPropertyChangedEventArgs`1"/> that
            contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ControlArray`1.ItemPropertyChanged"/>
            <lastupdated>3/15/2006 3:56:12 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.GotFocus"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:System.Windows.Forms.Control.GotFocus"/>
            <lastupdated>3/15/2006 1:01:18 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.LostFocus"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:System.Windows.Forms.Control.LostFocus"/>
            <lastupdated>3/15/2006 1:02:21 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlArray`1.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>3/15/2006 1:13:17 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.Boolean">
            <summary>
            Provides an <see langword="abstract"/> base class for all Boolean controls.
            </summary>
            <threadsafety safety="control"/>
            <remarks>
            	<para>
            		<see cref="P:NationalInstruments.UI.WindowsForms.Boolean.OnColor"/> and 
            <see cref="P:NationalInstruments.UI.WindowsForms.Boolean.OffColor"/> specify the color of the Boolean control
            when <see cref="P:NationalInstruments.UI.WindowsForms.Boolean.Value"/> is <see langword="true"/> or
            <see langword="false"/>, respectively. The <see cref="E:NationalInstruments.UI.WindowsForms.Boolean.StateChanged"/>
            event occurs after <see cref="P:NationalInstruments.UI.WindowsForms.Boolean.Value"/> changes. The 
            <see cref="E:NationalInstruments.UI.WindowsForms.Boolean.StateChanging"/> event occurs before 
            <see cref="P:NationalInstruments.UI.WindowsForms.Boolean.Value"/> changes, which allows the change event to be cancelled.
            <see cref="P:NationalInstruments.UI.WindowsForms.Boolean.InteractionMode"/>
            indicates how the <see cref="T:NationalInstruments.UI.WindowsForms.Boolean"/> behaves when clicked.
             	</para>
            	<note type="note">
            For more information about Boolean controls, refer to <see keyword="UsingNINETSwitchLEDWinForms" keywordType="mstudio">Using the Measurement Studio Windows Forms Switch and LED .NET Controls</see>.
            </note>
            </remarks>
            <lastupdated>9/28/2011 1:40:56 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Boolean.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.Boolean"/> class.
            </summary>
            <lastupdated>7/1/2003 12:08:30 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Boolean.Value">
            <summary>
            Gets or sets the state of the Boolean control.
            </summary>
            <value>
            The state of the Boolean control.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>9/28/2011 1:41:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Boolean.InteractionMode">
            <summary>
            Gets or sets the mouse or keyboard handling mechanism for the control.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.BooleanInteractionMode"/> that indicates the mouse or 
            keyboard handling mechanism for the control.
            The default value is <see cref="F:NationalInstruments.UI.BooleanInteractionMode.SwitchWhenPressed"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value not a <see cref="T:NationalInstruments.UI.BooleanInteractionMode"/> value.
            </exception>
            <remarks>
            Set <see cref="P:System.Windows.Forms.Control.Enabled"/> to <see langword="true"/> to enable 
            interaction. If <see cref="P:System.Windows.Forms.Control.Enabled"/> is <see langword="false"/>,
            the <see cref="P:NationalInstruments.UI.WindowsForms.Boolean.InteractionMode"/> property has no
            effect regardless of its value.
            </remarks>
            <lastupdated>12/16/2014 2:13:23 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Boolean.OnColor">
            <summary>
            Gets or sets the on color of the Boolean control.
            </summary>
            <value>
            The color of the Boolean control when <see cref="P:NationalInstruments.UI.WindowsForms.Boolean.Value"/> is <see langword="true"/>.
            The default value is <see cref="P:System.Drawing.SystemColors.ControlDark"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Boolean.Value"/>
            <lastupdated>11/11/2003 1:18:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Boolean.OffColor">
            <summary>
            Gets or sets the off color of the Boolean control.
            </summary>
            <value>
            The color of the Boolean control when <see cref="P:NationalInstruments.UI.WindowsForms.Boolean.Value"/> is <see langword="false"/>.
            The default value is <see cref="P:System.Drawing.SystemColors.ControlDark"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Boolean.Value"/>
            <lastupdated>11/11/2003 1:18:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Boolean.InteractionMouseCursors">
            <summary>
            Gets the collection of properties that you can use to customize mouse cursors for different interactions with the Boolean controls.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.BooleanInteractionMouseCursors"/> that you use to customize mouse cursors for different interactions.
            The default value is the collection with all properties within the collection set to default values.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>9/17/2008 4:07:05 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Boolean.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by <see cref="T:NationalInstruments.UI.WindowsForms.Boolean"/>.
            </summary>
            <param name="disposing">
            If <see langword="true"/>, this method releases managed and unmanaged resources. If <see langword="false"/>, this method releases
            only unmanaged resources.
            </param>
            <remarks>
            	<para>
            The public <see cref="M:System.IDisposable.Dispose"/> method and the finalizer call this method.The public <see cref="M:System.IDisposable.Dispose"/>
            invokes the protected Dispose(Boolean) method with <paramref name="disposing"/>
            set to <see langword="true"/>. The finalizer invokes the protected Dispose(Boolean) method with <paramref name="disposing"/> set to <see langword="false"/>.
            </para>
            	<para>
            When you set the <paramref name="disposing"/> parameter to <see langword="true"/>, this method releases all
            resources held by managed objects that this <see cref="T:NationalInstruments.UI.WindowsForms.Boolean"/>
            references. This method invokes the <see cref="M:System.IDisposable.Dispose"/> method of each referenced object.
            </para>
            </remarks>
            <lastupdated>7/1/2003 11:59:51 AM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Boolean.OnStateChanged(NationalInstruments.UI.ActionEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Boolean.StateChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.ActionEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Boolean.StateChanged"/>
            <lastupdated>7/13/2004 5:02:19 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Boolean.OnStateChanging(NationalInstruments.UI.ActionCancelEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Boolean.StateChanging"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.ActionCancelEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Boolean.StateChanging"/>
            <lastupdated>7/13/2004 5:02:30 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Boolean.OnValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Boolean.ValueChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Boolean.ValueChanged"/>
            <lastupdated>7/13/2004 5:02:41 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Boolean.OnInteractionModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Boolean.InteractionModeChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Boolean.InteractionModeChanged"/>
            <lastupdated>7/13/2004 5:01:44 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Boolean.OnOnColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Boolean.OnColorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Boolean.OnColorChanged"/>
            <lastupdated>7/13/2004 5:02:08 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Boolean.OnOffColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Boolean.OffColorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Boolean.OffColorChanged"/>
            <lastupdated>7/13/2004 5:01:55 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Boolean.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>7/1/2003 3:49:59 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Boolean.StateChanged">
            <summary>
            Occurs after the value of <see cref="P:NationalInstruments.UI.WindowsForms.Boolean.Value"/> has changed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Boolean.Value"/>
            <lastupdated>9/28/2011 1:42:15 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Boolean.StateChanging">
            <summary>
            Occurs before the value of <see cref="P:NationalInstruments.UI.WindowsForms.Boolean.Value"/> changes, allowing for the change event to be canceled.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Boolean.Value"/>
            <lastupdated>9/28/2011 1:42:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Boolean.ValueChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Boolean.Value"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Boolean.Value"/>
            <lastupdated>9/28/2011 1:42:26 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Boolean.InteractionModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Boolean.InteractionMode"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Boolean.InteractionMode"/>
            <lastupdated>6/26/2003 12:03:54 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Boolean.OnColorChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Boolean.OnColor"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Boolean.OnColor"/>
            <lastupdated>6/26/2003 12:03:35 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Boolean.OffColorChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Boolean.OffColor"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Boolean.OffColor"/>
            <lastupdated>6/26/2003 12:03:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.ComplexGraph">
            <summary>
            Represents the class for Measurement Studio Windows Forms graphs that accept <see cref="T:NationalInstruments.ComplexDouble"/> data values.
            </summary>
            <threadsafety safety="control"/>
            <remarks>
            	<para>
            You can use the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/> collection to include
            multiple <see cref="T:NationalInstruments.UI.ComplexPlot"/> instances on a single graph. With multiple plots, 
            you can plot multiple sets of data in the same plot area. 
            You can determine whether plot colors are assigned by a color generator with the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.UseColorGenerator"/> property, and you can 
            change the plot color assignment with the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotLineColorGenerator"/> property.
            </para>
            	<para>
            Use <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotComplex(NationalInstruments.ComplexDouble)"/> to plot
            the imaginary part against the real part of the <see cref="T:NationalInstruments.ComplexDouble"/> or to plot an array of imaginary values against an array of real  
            values. <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotComplexAppend(NationalInstruments.ComplexDouble)"/> plots imaginary values against
            real values by appending the values to the existing data.
            </para>
            	<note type="note">
            You need to use <see cref="T:NationalInstruments.UI.WindowsForms.WaveformGraph"/> to plot <see cref="T:NationalInstruments.ComplexWaveform`1"/>.
            For more information about the complex graph control, refer to <see keyword="UsingNINETGraphWinForms" keywordType="mstudio">Using the Measurement Studio Windows Forms Graph .NET Controls</see> or <see keyword="KeyNETComplexGraphFeaturesWinForms" keywordType="mstudio">Key Measurement Studio Windows Forms Complex Graph .NET Control Features</see>.
            </note>
            </remarks>
            <lastupdated>6/11/2009 6:10:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.ComplexGraph"/> class.
            </summary>
            <lastupdated>6/1/2005 2:48:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots">
            <summary>
            Gets the collection of plots on the graph.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.ComplexPlotCollection"/> that contains the
            <see cref="T:NationalInstruments.UI.ComplexPlot"/> objects on the graph.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:NationalInstruments.UI.ComplexPlot"/>
            <lastupdated>9/27/2011 2:06:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotLineColorGenerator">
            <summary>
            Gets or sets the <see cref="T:NationalInstruments.UI.ColorGenerator"/> that assigns different colors to plots.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.ColorGenerator"/> that assigns different colors to plots. The default value is <see cref="P:NationalInstruments.UI.FixedSetColorGenerator.Standard"/>.
            </value>
            <remarks>
            At design time, when you add, delete, or move a plot up and down, the colors are reassigned according to the order in which they are specified in the color set. At run time, the color of the plot depends on its index in the plot collection when you add the plot to the collection. If you delete a plot at run time, the color of the other plots does not change. 
            <para>
            When this property changes, the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotLineColorGeneratorChanged"/> event is raised, and colors are assigned to all plots if <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.UseColorGenerator"/> is <see langword="true"/>.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.UseColorGenerator"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotLineColorGeneratorChanged"/>
            <seealso cref="T:NationalInstruments.UI.ColorGenerator"/>
            <seealso cref="T:NationalInstruments.UI.FixedSetColorGenerator"/>
            <lastupdated>7/6/2009 5:44:01 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ComplexGraph.UseColorGenerator">
            <summary>
            Gets or sets whether <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotLineColorGenerator"/> is enabled or disabled. 
            </summary>
            <value>
            	<see langword="true"/> to enable <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotLineColorGenerator"/>; otherwise, <see langword="false"/>.
            The default value is <see langword="false"/>. At design time, this property is set to <see langword="true"/> by a custom control designer for ease of use.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            When this property is set to <see langword="true"/>, plots are assigned different colors by the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotLineColorGenerator"/> property; otherwise, the plots default to <see cref="P:System.Drawing.Color.Lime"></see>, unless you have explicitly set the colors. 
            <see cref="P:NationalInstruments.UI.Plot.LineColorPrecedence"/> determines whether to draw the plot with auto-generated color or with a color you assign. 
            	<para>
            	</para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.Plot.LineColorPrecedence"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotLineColorGenerator"/>
            <seealso cref="T:NationalInstruments.UI.ColorGenerator"/>
            <seealso cref="T:NationalInstruments.UI.FixedSetColorGenerator"/>
            <lastupdated>6/11/2009 6:13:02 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxes">
            <summary>
            Gets the collection of x axes on the graph.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.ComplexXAxisCollection"/> that contains the
            <see cref="T:NationalInstruments.UI.ComplexXAxis"/> objects on the graph.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:NationalInstruments.UI.ComplexXAxis"/>
            <lastupdated>9/27/2011 2:06:47 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxes">
            <summary>
            Gets the collection of y axes on the graph.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.ComplexYAxisCollection"/> that contains the
            <see cref="T:NationalInstruments.UI.ComplexYAxis"/> objects on the graph.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:NationalInstruments.UI.ComplexYAxis"/>
            <lastupdated>9/27/2011 2:06:54 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Annotations">
            <summary>
            Gets the collection of annotations on the graph.
            </summary>
            <value>
            An <see cref="T:NationalInstruments.UI.ComplexAnnotationCollection"/> that contains the
            <see cref="T:NationalInstruments.UI.ComplexAnnotation"/> objects on the graph.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:NationalInstruments.UI.ComplexAnnotation"/>
            <lastupdated>9/27/2011 2:07:14 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Cursors">
            <summary>
            Gets the collection of plot area cursors on the graph.
            </summary>
            <value>
            An <see cref="T:NationalInstruments.UI.ComplexCursorCollection"/> that contains the
            <see cref="T:NationalInstruments.UI.ComplexCursor"/> objects on the graph.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:NationalInstruments.UI.ComplexCursor"/>
            <lastupdated>9/27/2011 2:07:09 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ComplexGraph.InteractionMode">
            <summary>
            Gets or sets the user interactions that are supported by the graph.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.ComplexGraphInteractionModes"/> that indicates which user interactions are
            supported by the graph. 
            The default value is a bitwise combination of <see cref="F:NationalInstruments.UI.ComplexGraphInteractionModes.ZoomX"/>,
            <see cref="F:NationalInstruments.UI.ComplexGraphInteractionModes.ZoomY"/>, 
            <see cref="F:NationalInstruments.UI.ComplexGraphInteractionModes.ZoomAroundPoint"/>,
            <see cref="F:NationalInstruments.UI.ComplexGraphInteractionModes.PanX"/>,
            <see cref="F:NationalInstruments.UI.ComplexGraphInteractionModes.PanY"/>, and
            <see cref="F:NationalInstruments.UI.ComplexGraphInteractionModes.EditRange"/>.
            </value>
            <remarks>
            	<para>
            Set <see cref="P:System.Windows.Forms.Control.Enabled"/> to <see langword="true"/> to enable 
            interaction. If <see cref="P:System.Windows.Forms.Control.Enabled"/> is <see langword="false"/>,
            the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.InteractionMode"/> property has no
            effect regardless of its value. The control must have focus to enable interaction with the use of modifier keys.
            </para>
            	<para>
            Use <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionModeDefault"/> to enable user
            interactions without the use of modifier keys.
            </para>
            	<para>For more information about graph interactions, refer to 
            <see keyword="InteractingNETGraphsWinForms" keywordType="mstudio">Interacting with Measurement Studio Windows Forms .NET Graph Controls</see>.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:System.Windows.Forms.Control.Enabled"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomFactor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionModeDefault"/>
            <lastupdated>1/31/2006 11:58:53 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ComplexGraph.InteractionModeDefault">
            <summary>
            Gets or sets the user interaction that is enabled on the graph without the use of a modifier key.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.ComplexGraphDefaultInteractionMode"/> that
            represents the user interaction that is enabled on the graph by default. The default value is
            <see cref="F:NationalInstruments.UI.ComplexGraphDefaultInteractionMode.None"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.InteractionModeDefault"/> determines the default
            interaction of the graph. Unlike <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.InteractionMode"/>,
            the user is not required to press any modifier keys to interact with the graph when
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.InteractionModeDefault"/> is set to a value
            other than <see cref="F:NationalInstruments.UI.GraphDefaultInteractionMode.None"/>. For example,
            if <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.InteractionModeDefault"/> is set to
            <see cref="F:NationalInstruments.UI.ComplexGraphDefaultInteractionMode.ZoomX"/>, the user is not
            required to press the <entity value="lt"/>Shift<entity value="gt"/> key to zoom with a selection rectangle in the plot area
            of the graph.
            <para>
            The value of <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.InteractionModeDefault"/> is independent of
            the value of <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.InteractionMode"/>. For example,
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.InteractionModeDefault"/> can be set to
            <see cref="F:NationalInstruments.UI.ComplexGraphDefaultInteractionMode.ZoomX"/> to allow users to
            zoom with a selection rectangle while <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.InteractionMode"/>
            can be set to a bitwise combination of <see cref="F:NationalInstruments.UI.ComplexGraphInteractionModes.PanX"/> and
            <see cref="F:NationalInstruments.UI.ComplexGraphInteractionModes.PanY"/> to allow panning in the horizontal
            and vertical directions.
            </para>
            </remarks>
            <lastupdated>6/22/2006 9:26:29 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.ComplexGraph"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.ComplexGraph"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            </remarks>
            <seealso cref="M:System.IDisposable.Dispose"/>
            <seealso cref="T:System.IDisposable"/>
            <lastupdated>6/1/2005 2:51:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnPlotLineColorGeneratorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotLineColorGeneratorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains 
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>6/11/2009 6:13:24 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnUseColorGeneratorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.WaveformGraph.UseColorGeneratorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains 
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>6/11/2009 6:13:26 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotComplexAppend(NationalInstruments.ComplexDouble)">
            <summary>
            Plots the imaginary part against the real part of a <see cref="T:NationalInstruments.ComplexDouble"/> data value by appending to the existing data.
            </summary>
            <param name="complexData">
            The <see cref="T:NationalInstruments.ComplexDouble"/> data value to plot.
            </param>
            <remarks>
            This method calls 
            <see cref="M:NationalInstruments.UI.ComplexPlot.PlotComplexAppend(NationalInstruments.ComplexDouble)"/> on the 
            first <see cref="T:NationalInstruments.UI.ComplexPlot"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/>. 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.ComplexPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.ComplexPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.ComplexXAxis"/> 
            and the first <see cref="T:NationalInstruments.UI.ComplexYAxis"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxes"/> 
            and <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxes"/>, respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxes"/> or 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxes"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.ComplexXAxis"/> or
            <see cref="T:NationalInstruments.UI.ComplexYAxis"/> is created and added to the
            collection.
            <para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotComplexAppend(NationalInstruments.ComplexDouble)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.ComplexPlot.PlotComplexAppend(NationalInstruments.ComplexDouble)"/>
            on the plot reference.
            </para>
            </remarks>
            <example>The following example demonstrates appending a <see cref="T:NationalInstruments.ComplexDouble"/> data point to an existing <see cref="T:NationalInstruments.UI.WindowsForms.ComplexGraph" crefType="Unqualified"/> plot. 
            <code lang="VB.NET">
            Dim data As New ComplexDouble()
             
            data.Real = RandNumberGenerator.NextDouble() * 3
            data.Imaginary = RandNumberGenerator.NextDouble() * 3
            cxGraph.PlotComplexAppend(data)
            </code>
            </example>
            <example>
            	<code lang="C#">
            ComplexDouble data = new ComplexDouble();
             
            data.Real = RandNumberGenerator.NextDouble() * 3;
            data.Imaginary = RandNumberGenerator.NextDouble() * 3;
            cxGraph.PlotComplexAppend(data);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.ComplexPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.ComplexPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.ComplexPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.ComplexPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException"><see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>, and the imaginary part and real part of <paramref name="complexData"/> are special values.
            	
            </exception>
            <seealso cref="M:NationalInstruments.UI.ComplexPlot.PlotComplexAppend(NationalInstruments.ComplexDouble)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotComplex(NationalInstruments.ComplexDouble)"/>
            <seealso cref="M:NationalInstruments.UI.IWaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>
            <lastupdated>9/27/2011 2:06:01 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotComplexAppend(NationalInstruments.ComplexDouble[])">
            <summary>
            Plots the imaginary parts against the real parts of an array of <see cref="T:NationalInstruments.ComplexDouble"/> data values by appending to the existing data.
            </summary>
            <param name="complexData">
            The array of <see cref="T:NationalInstruments.ComplexDouble"/>  data values to plot.
            </param>
            <remarks>
            This method calls 
            <see cref="M:NationalInstruments.UI.ComplexPlot.PlotComplexAppend(NationalInstruments.ComplexDouble)"/> on the 
            first <see cref="T:NationalInstruments.UI.ComplexPlot"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/>. 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.ComplexPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.ComplexPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.ComplexXAxis"/> 
            and the first <see cref="T:NationalInstruments.UI.ComplexYAxis"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxes"/> 
            and <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxes"/>, respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxes"/> or 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxes"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.ComplexXAxis"/> or
            <see cref="T:NationalInstruments.UI.ComplexYAxis"/> is created and added to the
            collection.
            <para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotComplexAppend(NationalInstruments.ComplexDouble)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.ComplexPlot.PlotComplexAppend(NationalInstruments.ComplexDouble)"/>
            on the plot reference.
            </para>
            </remarks>
            <example>The following example demonstrates appending an array of <see cref="T:NationalInstruments.ComplexDouble"/> data points to an existing <see cref="T:NationalInstruments.UI.WindowsForms.ComplexGraph" crefType="Unqualified"/> plot. 
            <code lang="VB.NET">
            Dim data As ComplexDouble()
             
            ' get some DigitalWaveform data
            data = GenerateComplexData()
            cxGraph.PlotComplexAppend(data)
            </code>
            </example>
            <example>
            	<code lang="C#">
            ComplexDouble[] data;
             
            // get some DigitalWaveform data
            data = GenerateComplexData();
            cxGraph.PlotComplexAppend(data);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="complexData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.ComplexPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.ComplexPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.ComplexPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.ComplexPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>, and the imaginary part and real part of <paramref name="complexData"/> are special values.</exception>
            <seealso cref="M:NationalInstruments.UI.ComplexPlot.PlotComplexAppend(NationalInstruments.ComplexDouble)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotComplex(NationalInstruments.ComplexDouble)"/>
            <seealso cref="M:NationalInstruments.UI.IWaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>
            <lastupdated>9/27/2011 2:06:07 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotComplexAppend(NationalInstruments.ComplexDouble[],System.Int32,System.Int32)">
            <summary>
            Plots the imaginary parts against the real parts of a subset of an array of <see cref="T:NationalInstruments.ComplexDouble"/> data values by appending to existing data.
            </summary>
            <param name="complexData">
            The array of <see cref="T:NationalInstruments.ComplexDouble"/> data values to plot.
            </param>
            <param name="startIndex">
            The index in <paramref name="complexData"/> at which the plot data begins.
            </param>
            <param name="length">
            The number of elements, beginning at <paramref name="startIndex"/> in <paramref name="complexData"/>, to plot.
            </param>
            <remarks>
            This method calls 
            <see cref="M:NationalInstruments.UI.ComplexPlot.PlotComplexAppend(NationalInstruments.ComplexDouble)"/> on the 
            first <see cref="T:NationalInstruments.UI.ComplexPlot"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/>. 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.ComplexPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.ComplexPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.ComplexXAxis"/> 
            and the first <see cref="T:NationalInstruments.UI.ComplexYAxis"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxes"/> 
            and <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxes"/>, respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxes"/> or 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxes"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.ComplexXAxis"/> or
            <see cref="T:NationalInstruments.UI.ComplexYAxis"/> is created and added to the
            collection.
            <para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotComplexAppend(NationalInstruments.ComplexDouble)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.ComplexPlot.PlotComplexAppend(NationalInstruments.ComplexDouble)"/>
            on the plot reference.
            </para>
            </remarks>
            <example>The following example demonstrates appending an array of <see cref="T:NationalInstruments.ComplexDouble"/> data points to an existing <see cref="T:NationalInstruments.UI.WindowsForms.ComplexGraph" crefType="Unqualified"/> plot by specifying the starting  array index and the number of elements to plot. 
            <code lang="VB.NET">
            Dim data As ComplexDouble()
            Dim start As Integer = 3
            Dim len As Integer = 50
             
            ' Get some DigitalWaveform data.
            data = GenerateComplexData()
            ' Plot 10 ComplexDouble values starting at the third index.
            cxGraph.PlotComplexAppend(data, start, len)
            </code>
            </example>
            <example>
            	<code lang="C#">
            ComplexDouble[] data;
            int start = 3;
            int len = 50;
             
            // Get some DigitalWaveform data.
            data = GenerateComplexData();
            // Plot 10 ComplexDouble values starting at the third index.
            cxGraph.PlotComplexAppend(data, start, len);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="complexData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="startIndex"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="startIndex"/> is greater than or equal to the
            number of elements in <paramref name="complexData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is greater than the number of elements
            from <paramref name="startIndex"/> to the end of <paramref name="complexData"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.ComplexPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.ComplexPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.ComplexPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.ComplexPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>, and the imaginary part and real part of <paramref name="complexData"/> are special values.
            	
            </exception>
            <seealso cref="M:NationalInstruments.UI.ComplexPlot.PlotComplexAppend(NationalInstruments.ComplexDouble)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotComplex(NationalInstruments.ComplexDouble)"/>
            <seealso cref="M:NationalInstruments.UI.IWaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>
            <lastupdated>9/27/2011 2:06:14 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotComplex(NationalInstruments.ComplexDouble)">
            <summary>
            Plots the imaginary part against the real part of a <see cref="T:NationalInstruments.ComplexDouble"/> data value.
            </summary>
            <param name="complexData">
            The <see cref="T:NationalInstruments.ComplexDouble"/> data value to plot.
            </param>
            <remarks>
            This method calls 
            <see cref="M:NationalInstruments.UI.ComplexPlot.PlotComplex(NationalInstruments.ComplexDouble)"/> on the 
            first <see cref="T:NationalInstruments.UI.ComplexPlot"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/>. 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.ComplexPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.ComplexPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.ComplexXAxis"/> 
            and the first <see cref="T:NationalInstruments.UI.ComplexYAxis"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxes"/> 
            and <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxes"/>, respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxes"/> or 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxes"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.ComplexXAxis"/> or
            <see cref="T:NationalInstruments.UI.ComplexYAxis"/> is created and added to the
            collection.
            <para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotComplex(NationalInstruments.ComplexDouble)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.ComplexPlot.PlotComplex(NationalInstruments.ComplexDouble)"/>
            on the plot reference.
            </para>
            </remarks>
            <example>The following example demonstrates plotting a single <see cref="T:NationalInstruments.ComplexDouble" crefType="Unqualified"/> data point on a <see cref="T:NationalInstruments.UI.WindowsForms.ComplexGraph" crefType="Unqualified"/>. 
            <code lang="VB.NET">
            Dim data As New ComplexDouble()
             
            data.Real = RandNumberGenerator.NextDouble() * 3
            data.Imaginary = RandNumberGenerator.NextDouble() * 3
            cxGraph.PlotComplex(data)
            </code>
            </example>
            <example>
            	<code lang="C#">
            ComplexDouble data = new ComplexDouble();
             
            data.Real = RandNumberGenerator.NextDouble() * 3;
            data.Imaginary = RandNumberGenerator.NextDouble() * 3;
            cxGraph.PlotComplex(data);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.ComplexPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.ComplexPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.ComplexPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.ComplexPlot.YAxis"/>.
            </para>
            </exception>
            <see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/>
             is 
            <see langword="true"/>
            , and 
            <exception cref="T:System.ArgumentException">the imaginary part and real part of <paramref name="complexData"/> are special values.
            	
            </exception>
            <seealso cref="M:NationalInstruments.UI.ComplexPlot.PlotComplex(NationalInstruments.ComplexDouble)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotComplexAppend(NationalInstruments.ComplexDouble)"/>
            <seealso cref="M:NationalInstruments.UI.IWaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>
            <lastupdated>9/27/2011 2:05:39 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotComplex(NationalInstruments.ComplexDouble[])">
            <summary>
            Plots the imaginary parts against the real parts of an array of <see cref="T:NationalInstruments.ComplexDouble"/> data values.
            </summary>
            <param name="complexData">
            The array of <see cref="T:NationalInstruments.ComplexDouble"/>  data values to plot.
            </param>
            <remarks>
            This method calls 
            <see cref="M:NationalInstruments.UI.ComplexPlot.PlotComplex(NationalInstruments.ComplexDouble)"/> on the 
            first <see cref="T:NationalInstruments.UI.ComplexPlot"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/>. 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.ComplexPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.ComplexPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.ComplexXAxis"/> 
            and the first <see cref="T:NationalInstruments.UI.ComplexYAxis"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxes"/> 
            and <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxes"/>, respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxes"/> or 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxes"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.ComplexXAxis"/> or
            <see cref="T:NationalInstruments.UI.ComplexYAxis"/> is created and added to the
            collection.
            <para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotComplex(NationalInstruments.ComplexDouble)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.ComplexPlot.PlotComplex(NationalInstruments.ComplexDouble)"/>
            on the plot reference.
            </para>
            </remarks>
            <example>The following example demonstrates plotting an array of <see cref="T:NationalInstruments.ComplexDouble"/> data points on a <see cref="T:NationalInstruments.UI.WindowsForms.ComplexGraph" crefType="Unqualified"/>. 
            <code lang="VB.NET">
            Dim data As ComplexDouble()
             
            ' get some complex data
            data = GenerateComplexData()
            cxGraph.PlotComplex(data)
            </code>
            </example>
            <example>
            	<code lang="C#">
            ComplexDouble[] data;
             
            // get some complex data
            data = GenerateComplexData();
            cxGraph.PlotComplex(data);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="complexData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.ComplexPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.ComplexPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.ComplexPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.ComplexPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException"><see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/>
             is 
            <see langword="true"/>, and
            the imaginary part and real part of <paramref name="complexData"/> are special values.</exception>
            <seealso cref="M:NationalInstruments.UI.ComplexPlot.PlotComplex(NationalInstruments.ComplexDouble)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotComplexAppend(NationalInstruments.ComplexDouble)"/>
            <seealso cref="M:NationalInstruments.UI.IWaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>
            <lastupdated>9/27/2011 2:05:48 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotComplex(NationalInstruments.ComplexDouble[],System.Int32,System.Int32)">
            <summary>
            Plots the imaginary parts against the real parts of a subset of an array of <see cref="T:NationalInstruments.ComplexDouble"/> data values.
            </summary>
            <param name="complexData">
            The array of <see cref="T:NationalInstruments.ComplexDouble"/> data values to plot.
            </param>
            <param name="startIndex">
            The index in <paramref name="complexData"/> at which the plot data begins.
            </param>
            <param name="length">
            The number of elements, beginning at <paramref name="startIndex"/> in <paramref name="complexData"/>, to plot.
            </param>
            <remarks>
            This method calls 
            <see cref="M:NationalInstruments.UI.ComplexPlot.PlotComplex(NationalInstruments.ComplexDouble)"/> on the 
            first <see cref="T:NationalInstruments.UI.ComplexPlot"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/>. 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.ComplexPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.ComplexPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.ComplexXAxis"/> 
            and the first <see cref="T:NationalInstruments.UI.ComplexYAxis"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxes"/> 
            and <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxes"/>, respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxes"/> or 
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxes"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.ComplexXAxis"/> or
            <see cref="T:NationalInstruments.UI.ComplexYAxis"/> is created and added to the
            collection.
            <para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotComplex(NationalInstruments.ComplexDouble)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.ComplexPlot.PlotComplex(NationalInstruments.ComplexDouble)"/>
            on the plot reference.
            </para>
            </remarks>
            <example>The following example demonstrates plotting an array of <see cref="T:NationalInstruments.ComplexDouble"/> data points by specifying the starting array index and the number of  elements to plot. 
            <code lang="VB.NET">
            Dim data As ComplexDouble()
            Dim start As Integer = 3
            Dim len As Integer = 50
             
            ' get some ComplexDouble data
            data = GenerateComplexData()
            ' plot the ComplexDouble generated values starting at the third index
            cxGraph.PlotComplex(data, start, len - start) 
            </code>
            </example>
            <example>
            	<code lang="C#">
            ComplexDouble[] data;
            int start = 3;
            int len = 50;
             
            // get some ComplexDouble data
            data = GenerateComplexData();
            // plot the ComplexDouble generated values starting at the third index
            cxGraph.PlotComplex(data, start, len - start);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="complexData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="startIndex"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="startIndex"/> is greater than or equal to the
            number of elements in <paramref name="complexData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is greater than the number of elements
            from <paramref name="startIndex"/> to the end of <paramref name="complexData"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.ComplexPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.ComplexPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.ComplexPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.ComplexPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException"><see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>, and the imaginary part and real part of <paramref name="complexData"/> are special values.</exception>
            <seealso cref="M:NationalInstruments.UI.ComplexPlot.PlotComplex(NationalInstruments.ComplexDouble)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotComplexAppend(NationalInstruments.ComplexDouble)"/>
            <seealso cref="M:NationalInstruments.UI.IWaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>
            <lastupdated>11/1/2011 11:52:17 AM</lastupdated>
            <updatedby>Canisius Rozario</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.ZoomAroundPoint(System.Single,NationalInstruments.UI.ComplexPlot,NationalInstruments.ComplexDouble)">
            <summary>
            Zooms around the specified data point with the specified zoom factor and reference plot.
            </summary>
            <param name="zoomFactor">
            The percentage to zoom by.
            </param>
            <param name="referencePlot">
            A <see cref="T:NationalInstruments.UI.ComplexPlot"/> to use as the context for <paramref name="complexData"/>.
            </param>
            <param name="complexData">
            The data point, represented as a <see cref="T:NationalInstruments.ComplexDouble"/>, to zoom around.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="zoomFactor"/> is less than or equal to 0.0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="zoomFactor"/> is <see cref="F:System.Single.NaN"/>,
            <see cref="F:System.Single.NegativeInfinity"/>, or
            <see cref="F:System.Single.PositiveInfinity"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="referencePlot"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:NationalInstruments.UI.WindowsForms.ComplexGraph"/> is not the
            <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <paramref name="referencePlot"/>.
            </exception>
            <remarks>
             A <paramref name="zoomFactor"/>
            value less than 1.0 indicates a zoom out, and a value greater than 1.0 indicates a zoom in. For example, a <paramref name="zoomFactor"/>
            value of 0.8 zooms out by 80%, and a value of 1.5 zooms in by 150%. If <paramref name="zoomFactor"/> is set to 1.0, the plot
            area is not zoomed because a value of 1.0 zooms by 100% of the view.
            	<para>
            The imaginary part and real part of <paramref name="complexData"/> are 
            mapped to client coordinates using the <see cref="P:NationalInstruments.UI.ComplexPlot.XAxis"/> and 
            <see cref="P:NationalInstruments.UI.ComplexPlot.YAxis"/> properties of <paramref name="referencePlot"/>.
            The <see cref="P:NationalInstruments.UI.ComplexPlot.XAxis"/> and <see cref="P:NationalInstruments.UI.ComplexPlot.YAxis"/> act 
            as the scale for mapping. The client coordinates are mapped to virtual coordinates using 
            <see cref="M:NationalInstruments.UI.WindowsForms.Graph.PointToVirtual(System.Drawing.Point)"/>. Use the virtual coordinates to call 
            <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.ZoomAroundPoint(System.Single,NationalInstruments.UI.ComplexPlot,NationalInstruments.ComplexDouble)"/>.
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.ZoomAroundPoint(System.Single,NationalInstruments.UI.ComplexPlot,NationalInstruments.ComplexDouble)"/> determines if
            an animated visual cue is drawn based on the value of 
            <see cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/>.
            </para>
            	<para>
            Calling <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.ZoomAroundPoint(System.Single,NationalInstruments.UI.ComplexPlot,NationalInstruments.ComplexDouble)"/> raises the
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.Zoom"/> event with 
            <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> set to 
            <see cref="F:NationalInstruments.UI.Action.Programmatic"/>.
            </para>
            	<para>
            Refer to <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/> for
            information about zooming interactively.
            </para>
            </remarks>
            <example>The following example demonstrates zooming in by 125% around a point on a <see cref="T:NationalInstruments.UI.WindowsForms.ComplexGraph" crefType="Unqualified"/> object. You determine the point to zoom around by handling the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown" crefType="Unqualified"/> event. 
            <code lang="VB.NET">
            Public Sub ComplexGraph_PlotAreaMouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
                Dim zoomFactor As Single = 1.25F
                Dim dataPoint As New ComplexDouble()
                Dim virtualPoint As PointF
                Dim rangeMin As Double, rangeMax As Double
             
                ' only zoom in when the left mouse button is clicked
                If e.Button = MouseButtons.Left Then
                    ' get the virtual position of the mouse click so that we can 
                    ' map to data coordinates on the graph.
                    virtualPoint = cxGraph.PointToVirtual(e.Location)
             
                    rangeMin = cxGraph.XAxes(0).Range.Minimum
                    rangeMax = cxGraph.XAxes(0).Range.Maximum
                    dataPoint.Real = (rangeMax - rangeMin) * virtualPoint.X + rangeMin
             
                    rangeMin = cxGraph.YAxes(0).Range.Minimum
                    rangeMax = cxGraph.YAxes(0).Range.Maximum
                    dataPoint.Imaginary = (rangeMax - rangeMin) * virtualPoint.Y + rangeMin
             
                    cxGraph.ZoomAroundPoint(zoomFactor, cxGraph.Plots(0), dataPoint)
                End If
            End Sub
            </code>
            </example>
            <example>
            	<code lang="C#">
            public void ComplexGraph_PlotAreaMouseDown(object sender, MouseEventArgs e)
            {
                float zoomFactor = 1.25f;
                ComplexDouble dataPoint = new ComplexDouble();
                PointF virtualPoint;
                double rangeMin, rangeMax;
             
                // only zoom in when the left mouse button is clicked
                if (e.Button == MouseButtons.Left)
                {
                    // get the virtual position of the mouse click so that we can 
                    // map to data coordinates on the graph.
                    virtualPoint = cxGraph.PointToVirtual(e.Location);
             
                    rangeMin = cxGraph.XAxes[0].Range.Minimum;
                    rangeMax = cxGraph.XAxes[0].Range.Maximum;
                    dataPoint.Real = (rangeMax - rangeMin) * virtualPoint.X + rangeMin;
             
                    rangeMin = cxGraph.YAxes[0].Range.Minimum;
                    rangeMax = cxGraph.YAxes[0].Range.Maximum;
                    dataPoint.Imaginary = (rangeMax - rangeMin) * virtualPoint.Y + rangeMin;
             
                    cxGraph.ZoomAroundPoint(zoomFactor, cxGraph.Plots[0], dataPoint);
                }
            }
            </code>
            </example>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomFactor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.ZoomXY(NationalInstruments.UI.ComplexPlot,NationalInstruments.ComplexDouble,System.Double,System.Double)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.UndoZoomPan"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ResetZoomPan"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.PointToVirtual(System.Drawing.Point)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.Zoom"/>
            <lastupdated>10/3/2010 6:55:48 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.ZoomXY(NationalInstruments.UI.ComplexPlot,NationalInstruments.ComplexDouble,System.Double,System.Double)">
            <summary>
            Zooms to the region of the plot area specified by the data value, region width, region height, and
            reference plot.
            </summary>
            <param name="referencePlot">
            A <see cref="T:NationalInstruments.UI.ComplexPlot"/> to use as the context for <paramref name="complexData"/>,
            <paramref name="width"/>, and <paramref name="height"/>.
            </param>
            <param name="complexData">
            The corner of the plot area region to zoom, represented as a <see cref="T:NationalInstruments.ComplexDouble"/> data value.
            </param>
            <param name="width">
            The width in data units of the plot area region to zoom.
            </param>
            <param name="height">
            The height in data units of the plot area region to zoom.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="referencePlot"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	The <see cref="T:NationalInstruments.UI.WindowsForms.ComplexGraph"/> is not the
            <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <paramref name="referencePlot"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="width"/> or <paramref name="height"/> is
            <see cref="F:System.Single.NaN"/>,
            <see cref="F:System.Single.NegativeInfinity"/>, or
            <see cref="F:System.Single.PositiveInfinity"/>.
            </para>
            </exception>
            <remarks>
            	<para>
            The imaginary part and real part of <paramref name="complexData"/> are 
            mapped to client coordinates using the <see cref="P:NationalInstruments.UI.ComplexPlot.XAxis"/> and 
            <see cref="P:NationalInstruments.UI.ComplexPlot.YAxis"/> properties of <paramref name="referencePlot"/>.
            The <see cref="P:NationalInstruments.UI.ComplexPlot.XAxis"/> and <see cref="P:NationalInstruments.UI.ComplexPlot.YAxis"/> act 
            as the scale for mapping. The client coordinates are mapped to virtual coordinates using 
            <see cref="M:NationalInstruments.UI.WindowsForms.Graph.RectangleToVirtual(System.Drawing.Rectangle)"/>. Use the virtual coordinates to call 
            <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.ZoomXY(NationalInstruments.UI.ComplexPlot,NationalInstruments.ComplexDouble,System.Double,System.Double)"/>.
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.ZoomXY(NationalInstruments.UI.ComplexPlot,NationalInstruments.ComplexDouble,System.Double,System.Double)"/> determines if
            an animated visual cue is drawn based on the value of 
            <see cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/>.
            </para>
            	<para>
            Calling <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.ZoomXY(NationalInstruments.UI.ComplexPlot,NationalInstruments.ComplexDouble,System.Double,System.Double)"/> raises the
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.Zoom"/> event with 
            <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> set to 
            <see cref="F:NationalInstruments.UI.Action.Programmatic"/>.
            </para>
            	<para>
            Refer to <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/> for
            information about zooming interactively.
            </para>
            </remarks>
            <example>The following example demonstrates zooming to a specifically sized rectangle on a <see cref="T:NationalInstruments.UI.WindowsForms.ComplexGraph" crefType="Unqualified"/> plot. 
            <code lang="VB.NET">
            Dim width As Double = 3
            Dim height As Double = 2
            Dim corner As New ComplexDouble(-2.0, -3.0)
             
            cxGraph.ZoomXY(cxGraph.Plots(0), corner, width, height)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double width = 3;
            double height = 2;
            ComplexDouble corner = new ComplexDouble(-2d, -3d);
             
            cxGraph.ZoomXY(cxGraph.Plots[0], corner, width, height);
            </code>
            </example>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomAroundPoint(System.Single)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.UndoZoomPan"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ResetZoomPan"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.RectangleToVirtual(System.Drawing.Rectangle)"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.Zoom"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/>
            <lastupdated>10/3/2010 7:09:58 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.HitTest(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:NationalInstruments.UI.ComplexGraphHitTestInfo"/> that specifies
            where on the control the specified point is located.
            </summary>
            <param name="x">
            The horizontal location of the point to be hit-tested, in client coordinates.
            </param>
            <param name="y">
            The vertical location of the point to be hit-tested, in client coordinates.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.UI.ComplexGraphHitTestInfo"/> that specifies where on
            the control the <paramref name="x"/> and <paramref name="y"/> coordinate is located.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            When hit-testing a coordinate inside the plot area of the graph, 
            <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.HitTest(System.Int32,System.Int32)"/> respects the
            z-order of objects within the plot area. If a cursor, plot, and annotation
            overlap at a particular coordinate, <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.HitTest(System.Int32,System.Int32)"/>
            tests for cursor, plot, and annotation in that order.
            <para>
            If <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.HitTest(System.Int32,System.Int32)"/> indicates
            an object exists, you can use <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.GetPlotAt(System.Int32,System.Int32)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.GetXAxisAt(System.Int32,System.Int32)"/>,
            and <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.GetYAxisAt(System.Int32,System.Int32)"/> to obtain
            a reference to the object.
            </para>
            </remarks>
            <example>The following example demonstrates using the <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/> method to determine where a user clicked on a <see cref="T:NationalInstruments.UI.WindowsForms.ComplexGraph" crefType="Unqualified"/> object. 
            <code lang="VB.NET">
            Public Sub ComplexGraph_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
                Dim plot As ComplexPlot
                Dim index As Integer
                Dim plotData As ComplexDouble
                Dim hitTestRegion As ComplexGraphHitTestInfo
                Dim randomColor As Color = Color.FromArgb(RandNumberGenerator.[Next](255), RandNumberGenerator.[Next](255), RandNumberGenerator.[Next](255))
             
                hitTestRegion = cxGraph.HitTest(e.X, e.Y)
                Select Case hitTestRegion
                    Case ComplexGraphHitTestInfo.Annotation
                        Dim annot As ComplexPointAnnotation = TryCast(cxGraph.GetAnnotationAt(e.X, e.Y), ComplexPointAnnotation)
                        annot.ShapeFillColor = randomColor
                        Debug.WriteLine("Annotation selected")
                        Debug.WriteLine(String.Format("Annotation real position: {0}, annotation imaginary position {1}", annot.Position.Real.ToString(), annot.Position.Imaginary.ToString()))
                        Exit Select
                    Case ComplexGraphHitTestInfo.Cursor
                        Dim cursor As ComplexCursor = cxGraph.GetCursorAt(e.X, e.Y)
                        cursor.Color = randomColor
                        Debug.WriteLine("Cursor selected")
                        Debug.WriteLine(String.Format("Cursor real position: {0}, cursor imaginary position: {1}", cursor.Position.Real.ToString(), cursor.Position.Imaginary.ToString()))
                        Exit Select
                    Case ComplexGraphHitTestInfo.ErrorBand
                        Dim errData As ComplexDouble
                        Dim realErrString As String, imgErrString As String
             
                        plot = cxGraph.GetErrorBandAt(e.X, e.Y, errData, index)
                        plot.LineColor = randomColor
                        plotData = plot.GetDataPoint(index)
             
                        If errData.Real &gt; plotData.Real Then
                            realErrString = "upper bound is " &amp; errData.Real.ToString(CultureInfo.CurrentCulture)
                        ElseIf errData.Real &lt; plotData.Real Then
                            realErrString = "lower bound is " &amp; errData.Real.ToString(CultureInfo.CurrentCulture)
                        Else
                            realErrString = "is not set"
                        End If
             
                        If errData.Imaginary &gt; plotData.Imaginary Then
                            imgErrString = "upper bound is " &amp; errData.Imaginary.ToString(CultureInfo.CurrentCulture) &amp; "i"
                        ElseIf errData.Imaginary &lt; plotData.Imaginary Then
                            imgErrString = "lower bound is " &amp; errData.Imaginary.ToString(CultureInfo.CurrentCulture) &amp; "i"
                        Else
                            imgErrString = "is not set"
                        End If
             
                        Debug.WriteLine(String.Format("The real error data {0}{1}The imaginary error data {2}", realErrString, Environment.NewLine, imgErrString))
                        Exit Select
                    Case ComplexGraphHitTestInfo.Plot
                        plot = cxGraph.GetPlotAt(e.X, e.Y, plotData, index)
                        plot.LineColor = randomColor
                        Debug.WriteLine(String.Format("Data point {0} is located at {1} + {2}i", index, plotData.Real, plotData.Imaginary))
                        Exit Select
                    Case ComplexGraphHitTestInfo.PlotArea
                        Debug.WriteLine("Plot area was clicked")
                        Exit Select
                    Case ComplexGraphHitTestInfo.XAxis
                        Dim xAxis As ComplexXAxis = cxGraph.GetXAxisAt(e.X, e.Y)
                        xAxis.CaptionBackColor = randomColor
                        Debug.WriteLine("Real axis Selected")
                        Debug.WriteLine(String.Format("Real Axis range minimum: {0}, real axis range maximum: {1}", xAxis.Range.Minimum.ToString(), xAxis.Range.Maximum.ToString()))
                        Exit Select
                    Case ComplexGraphHitTestInfo.YAxis
                        Dim yAxis As ComplexYAxis = cxGraph.GetYAxisAt(e.X, e.Y)
                        yAxis.CaptionBackColor = randomColor
                        Debug.WriteLine("Imaginary Selected")
                        Debug.WriteLine(String.Format("Imaginary axis range minimum: {0}, Imaginary axis range maximum: {1}", yAxis.Range.Minimum.ToString(), yAxis.Range.Maximum.ToString()))
                        Exit Select
                    Case ComplexGraphHitTestInfo.None
                        Debug.WriteLine("Unknown graph area clicked")
                        Exit Select
                End Select
            End Sub
            </code>
            </example>
            <example>
            	<code lang="C#">
            public void ComplexGraph_MouseDown(object sender, MouseEventArgs e)
            {
                ComplexPlot plot;
                int index;
                ComplexDouble plotData;
                ComplexGraphHitTestInfo hitTestRegion;
                Color randomColor = Color.FromArgb(RandNumberGenerator.Next(255),
                                                    RandNumberGenerator.Next(255),
                                                    RandNumberGenerator.Next(255));
             
                hitTestRegion = cxGraph.HitTest(e.X, e.Y);
                switch (hitTestRegion)
                {
                    case ComplexGraphHitTestInfo.Annotation:
                        ComplexPointAnnotation annot = cxGraph.GetAnnotationAt (e.X, e.Y) as ComplexPointAnnotation;
                        annot.ShapeFillColor = randomColor;
                        Debug.WriteLine("Annotation selected");
                        Debug.WriteLine(string.Format("Annotation real position: {0}, annotation imaginary position {1}",
                                                    annot.Position.Real.ToString(), annot.Position.Imaginary.ToString()));
                        break;
                    case ComplexGraphHitTestInfo.Cursor:
                        ComplexCursor cursor = cxGraph.GetCursorAt(e.X, e.Y);
                        cursor.Color = randomColor;
                        Debug.WriteLine("Cursor selected");
                        Debug.WriteLine(string.Format("Cursor real position: {0}, cursor imaginary position: {1}",
                                                    cursor.Position.Real.ToString(), cursor.Position.Imaginary.ToString()));
                        break;
                    case ComplexGraphHitTestInfo.ErrorBand:
                        ComplexDouble errData;
                        string realErrString, imgErrString;
             
                        plot = cxGraph.GetErrorBandAt(e.X, e.Y, out errData, out index);
                        plot.LineColor = randomColor;
                        plotData = plot.GetDataPoint(index);
             
                        if (errData.Real &gt; plotData.Real)
                            realErrString = "upper bound is " + errData.Real.ToString(CultureInfo.CurrentCulture);
                        else if (errData.Real &lt; plotData.Real)
                            realErrString = "lower bound is " + errData.Real.ToString(CultureInfo.CurrentCulture);
                        else
                            realErrString = "is not set";
             
                        if (errData.Imaginary &gt; plotData.Imaginary)
                            imgErrString = "upper bound is " + errData.Imaginary.ToString(CultureInfo.CurrentCulture) + "i";
                        else if (errData.Imaginary &lt; plotData.Imaginary)
                            imgErrString = "lower bound is " + errData.Imaginary.ToString(CultureInfo.CurrentCulture) + "i";
                        else
                            imgErrString= "is not set";
             
                        Debug.WriteLine(string.Format("The real error data {0}{1}The imaginary error data {2}",
                                                        realErrString, Environment.NewLine, imgErrString));
                        break;
                    case ComplexGraphHitTestInfo.Plot:
                        plot = cxGraph.GetPlotAt(e.X, e.Y, out plotData, out index);
                        plot.LineColor = randomColor;
                        Debug.WriteLine(string.Format("Data point {0} is located at {1} + {2}i", index, plotData.Real, plotData.Imaginary));
                        break;
                    case ComplexGraphHitTestInfo.PlotArea:
                        Debug.WriteLine("Plot area was clicked");
                        break;
                    case ComplexGraphHitTestInfo.XAxis:
                        ComplexXAxis xAxis = cxGraph.GetXAxisAt(e.X, e.Y);
                        xAxis.CaptionBackColor = randomColor;
                        Debug.WriteLine("Real axis Selected");
                        Debug.WriteLine(string.Format("Real Axis range minimum: {0}, real axis range maximum: {1}",
                                                    xAxis.Range.Minimum.ToString(), xAxis.Range.Maximum.ToString()));
                        break;
                    case ComplexGraphHitTestInfo.YAxis:
                        ComplexYAxis yAxis = cxGraph.GetYAxisAt(e.X, e.Y);
                        yAxis.CaptionBackColor = randomColor;
                        Debug.WriteLine("Imaginary Selected");
                        Debug.WriteLine(string.Format("Imaginary axis range minimum: {0}, Imaginary axis range maximum: {1}",
                                                    yAxis.Range.Minimum.ToString(), yAxis.Range.Maximum.ToString()));
                        break;
                    case ComplexGraphHitTestInfo.None:
                        Debug.WriteLine("Unknown graph area clicked");
                        break;
                }
            }
            </code>
            </example>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.GetPlotAt(System.Int32,System.Int32)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.GetYAxisAt(System.Int32,System.Int32)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.GetXAxisAt(System.Int32,System.Int32)"/>
            <lastupdated>10/3/2010 6:35:19 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.GetCursorAt(System.Int32,System.Int32)">
            <summary>
            Gets the cursor at the specified location.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for a cursor.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for a cursor.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.ComplexCursor"/> at the specified location. If 
            there is no cursor at the specified location, the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            </remarks>
            <example>The following example demonstrates determining which cursor a user clicked on by calling the <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.GetCursorAt(System.Int32,System.Int32)" crefType="Unqualified"/> method in response to the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown" crefType="Unqualified"/> event. 
            For another example of <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.GetCursorAt(System.Int32,System.Int32)" crefType="Unqualified"/>, refer to <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/>.
            <code lang="VB.NET">
            Public Sub ComplexGraph_PlotAreaMouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
                Dim randomColor As Color = Color.FromArgb(RandNumberGenerator.[Next](255), RandNumberGenerator.[Next](255), RandNumberGenerator.[Next](255))
             
                Dim cursor As ComplexCursor = DirectCast(cxGraph.GetCursorAt(e.X, e.Y), ComplexCursor)
             
                If cursor IsNot Nothing Then
                    cursor.Color = randomColor
                    cursor.MoveNext()
                Else
                    Debug.WriteLine("There was no cursor at the selected location")
                End If
            End Sub
            </code>
            </example>
            <example>
            	<code lang="C#">
            public void ComplexGraph_PlotAreaMouseDown(object sender, MouseEventArgs e)
            {
                Color randomColor = Color.FromArgb( RandNumberGenerator.Next(255),
                                                    RandNumberGenerator.Next(255),
                                                    RandNumberGenerator.Next(255));
             
                ComplexCursor cursor = (ComplexCursor)cxGraph.GetCursorAt(e.X, e.Y);
             
                if (cursor != null)
                {
                    cursor.Color = randomColor;
                    cursor.MoveNext();
                }
                else
                {
                    Debug.WriteLine("There was no cursor at the selected location");
                }
            }
            </code>
            </example>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>5/9/2011 4:23:09 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.GetPlotAt(System.Int32,System.Int32)">
            <summary>
            Gets the plot at the specified location.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for a plot.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for a plot.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.ComplexPlot"/> at the specified location. If 
            there is no plot at the specified location, the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>8/11/2005 5:32:57 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.GetPlotAt(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets the plot at the specified location along with the index to the corresponding 
            <see cref="T:NationalInstruments.ComplexDouble"/> data value.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for a plot.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for a plot.
            </param>
            <param name="index">
            Upon return, contains the index to the data value at the specified location.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.ComplexPlot"/> at the specified location. If 
            there is no plot at the specified location, <paramref name="index"/> is set to 
            <entity value="ndash"/>1, and the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>8/11/2005 5:33:47 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.GetPlotAt(System.Int32,System.Int32,NationalInstruments.ComplexDouble@)">
            <summary>
            Gets the plot at the specified location along with the corresponding <see cref="T:NationalInstruments.ComplexDouble"/>
            data value.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for a plot.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for a plot.
            </param>
            <param name="complexData">
            Upon return, contains the <see cref="T:NationalInstruments.ComplexDouble"/> data value at the specified location.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.ComplexPlot"/> at the specified location. If 
            there is no plot at the specified location, the imaginary part and real part of <paramref name="complexData"/> are set to <see cref="F:System.Double.NaN"/>, and the method 
            returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>8/11/2005 5:33:15 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.GetPlotAt(System.Int32,System.Int32,NationalInstruments.ComplexDouble@,System.Int32@)">
            <summary>
            Gets the plot at the specified location along with the corresponding <see cref="T:NationalInstruments.ComplexDouble"/> 
            data value and the index to the x and y data value.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for a plot.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for a plot.
            </param>
            <param name="complexData">
            Upon return, contains the <see cref="T:NationalInstruments.ComplexDouble"/> data value at the specified location.
            </param>
            <param name="index">
            Upon return, contains the index to the data value at the specified location.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.ComplexPlot"/> at the specified location. If 
            there is no plot at the specified location, the imaginary part and real part of <paramref name="complexData"/> are set to <see cref="F:System.Double.NaN"/>, 
            <paramref name="index"/> is set to <entity value="ndash"/>1, and the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>8/11/2005 5:33:32 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.GetErrorBandAt(System.Int32,System.Int32)">
            <summary>
            Gets the plot associated with the error point at the specified location.
            </summary>
            <param name="x">
            The x-coordinate of the location in client coordinates to search for an error point.
            </param>
            <param name="y">
            The y-coordinate of the location in client coordinates to search for an error point.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.ComplexPlot"/> of the error point at the specified location. 
            If there is no error point at the specified location, 
            the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>7/28/2006 4:31:42 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.GetErrorBandAt(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets the plot associated with the error point at the specified location along with 
            the index of the error value.
            </summary>
            <param name="x">
            The x-coordinate of the location in client coordinates to search for an error point.
            </param>
            <param name="y">
            The y-coordinate of the location in client coordinates to search for an error point.
            </param>
            <param name="index">
            Upon return, contains the index to the error data value at the specified location.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.ComplexPlot"/> of the error point at the specified location. 
            If there is no error point at the specified location, 
            <paramref name="index"/> is set to <entity value="ndash"/>1, 
            and the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>7/28/2006 4:32:36 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.GetErrorBandAt(System.Int32,System.Int32,NationalInstruments.ComplexDouble@)">
            <summary>
            Gets the plot associated with the error point at the specified location along with 
            the corresponding x and y coordinates of the error value.
            </summary>
            <param name="x">
            The x-coordinate of the location in client coordinates to search for an error point.
            </param>
            <param name="y">
            The y-coordinate of the location in client coordinates to search for an error point.
            </param>
            <param name="errorData">
            Upon return, contains the <see cref="T:NationalInstruments.ComplexDouble"/> coordinates 
            for the error point at the specified location.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.ComplexPlot"/> of the error point at the specified location. 
            If there is no error point at the specified location, 
            the imaginary part and real part of <paramref name="errorData"/> are set to <see cref="F:System.Double.NaN"/>, 
            and the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>7/28/2006 4:32:01 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.GetErrorBandAt(System.Int32,System.Int32,NationalInstruments.ComplexDouble@,System.Int32@)">
            <summary>
            Gets the plot associated with the error point at the specified location along with 
            the corresponding x and y coordinates of the error value and the index of the error value.
            </summary>
            <param name="x">
            The x-coordinate of the location in client coordinates to search for an error point.
            </param>
            <param name="y">
            The y-coordinate of the location in client coordinates to search for an error point.
            </param>
            <param name="errorData">
            Upon return, contains the <see cref="T:NationalInstruments.ComplexDouble"/> coordinates 
            for the error point at the specified location.
            </param>
            <param name="index">
            Upon return, contains the index to the error data value at the specified location.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.ComplexPlot"/> of the error point at the specified location. 
            If there is no error point at the specified location, 
            the imaginary part and real part of <paramref name="errorData"/> are set to <see cref="F:System.Double.NaN"/>, 
            <paramref name="index"/> is set to <entity value="ndash"/>1, 
            and the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>7/28/2006 4:32:19 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.GetAnnotationAt(System.Int32,System.Int32)">
            <summary>
            Gets the annotation at the specified location.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for an annotation.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for an annotation.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.ComplexAnnotation"/> at the specified location. If 
            there is no annotation at the specified location, the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <example>The following example demonstrates determining which annotation a user clicked on by calling the <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.GetAnnotationAt(System.Int32,System.Int32)" crefType="Unqualified"/> method in response to the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown" crefType="Unqualified"/> event.
            For another example of <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.GetAnnotationAt(System.Int32,System.Int32)" crefType="Unqualified"/>, refer to <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/>. 
            <code lang="VB.NET">
            Public Sub ComplexGraph_PlotAreaMouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
                Dim randomColor As Color = Color.FromArgb(RandNumberGenerator.[Next](255), RandNumberGenerator.[Next](255), RandNumberGenerator.[Next](255))
             
                Dim annot As ComplexPointAnnotation = DirectCast(cxGraph.GetAnnotationAt(e.X, e.Y), ComplexPointAnnotation)
             
                If annot IsNot Nothing Then
                    annot.ShapeFillColor = randomColor
                    annot.ShapeLineColor = randomColor
                    annot.ArrowColor = randomColor
                Else
                    Debug.WriteLine("There was no annotation at the selected location")
                End If
            End Sub
            </code>
            </example>
            <example>
            	<code lang="C#">
            public void ComplexGraph_PlotAreaMouseDown(object sender, MouseEventArgs e)
            {
                Color randomColor = Color.FromArgb( RandNumberGenerator.Next(255),
                                                    RandNumberGenerator.Next(255),
                                                    RandNumberGenerator.Next(255));
             
                ComplexPointAnnotation annot = (ComplexPointAnnotation)cxGraph.GetAnnotationAt(e.X, e.Y);
             
                if (annot != null)
                {
                    annot.ShapeFillColor = randomColor;
                    annot.ShapeLineColor = randomColor;
                    annot.ArrowColor = randomColor;
                }
                else
                {
                    Debug.WriteLine("There was no annotation at the selected location");
                }
            }
            </code>
            </example>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            <note type="note">
            The arrow of the annotation is not used to determine if an annotation is located at the specified coordinates.
            </note>
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>10/3/2010 6:43:06 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.GetXAxisAt(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:NationalInstruments.UI.ComplexXAxis"/> at the specified location.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for an axis.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for an axis.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.ComplexXAxis"/> at the specified location. If 
            there is no axis at the specified location, the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.HitTest(System.Int32,System.Int32)"/>
            <remarks>
            For an example of <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.GetXAxisAt(System.Int32,System.Int32)" crefType="Unqualified"/>, refer to <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/>.
            </remarks>
            <lastupdated>10/2/2010 4:45:49 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.GetYAxisAt(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:NationalInstruments.UI.ComplexYAxis"/> at the specified location.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for an axis.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for an axis.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.ComplexYAxis"/> at the specified location. If 
            there is no axis at the specified location, the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.HitTest(System.Int32,System.Int32)"/>
            <remarks>
            For an example of <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.GetYAxisAt(System.Int32,System.Int32)" crefType="Unqualified"/>, refer to <see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/>.
            </remarks>
            <lastupdated>10/2/2010 4:46:07 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.DrawOriginLines(NationalInstruments.UI.ComponentDrawArgs)">
            <summary>
            Draws the origin lines in the plot area of the complex graph.
            </summary>
            <param name="args">
            A <see cref="T:NationalInstruments.UI.ComponentDrawArgs"/> that contains the drawing data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="args"/> is <see langword="null"/>.
            </exception>
            <remarks>
            	<see cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.DrawOriginLines(NationalInstruments.UI.ComponentDrawArgs)"/>
            provides an easy way to draw the origin lines while custom
            drawing the plot area. To custom draw the plot area, attach an event handler
            to <see cref="E:NationalInstruments.UI.WindowsForms.Graph.BeforeDrawPlotArea"/> or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea"/> events.
            </remarks>
            <example>The following example demonstrates drawing the origin lines of a <see cref="T:NationalInstruments.UI.WindowsForms.ComplexGraph" crefType="Unqualified"/> object to a .png image file in response to the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea" crefType="Unqualified"/> event. 
            <code lang="VB.NET">
            Public Sub ComplexGraph_AfterDrawPlotArea(ByVal sender As Object, ByVal e As AfterDrawEventArgs)
                Dim imageFileName As String = "ComplexGraphOriginLinesImage.png"
                Using bmp As New Bitmap(cxGraph.PlotAreaBounds.Width, cxGraph.PlotAreaBounds.Height)
                    Dim g As Graphics = Graphics.FromImage(bmp)
                    Dim args As New ComponentDrawArgs(g, New Rectangle(0, 0, bmp.Width, bmp.Height))
             
                    cxGraph.DrawOriginLines(args)
                    bmp.Save(imageFileName, ImageFormat.Png)
                End Using
                Debug.WriteLine(String.Format("file {0} has been saved", imageFileName))
            End Sub
            </code>
            </example>
            <example>
            	<code lang="C#">
            public void ComplexGraph_AfterDrawPlotArea(object sender, AfterDrawEventArgs e)
            {
                string imageFileName = "ComplexGraphOriginLinesImage.png";
                using (Bitmap bmp = new Bitmap(cxGraph.PlotAreaBounds.Width, cxGraph.PlotAreaBounds.Height))
                {
                    Graphics g = Graphics.FromImage(bmp);
                    ComponentDrawArgs args = new ComponentDrawArgs(g, new Rectangle(0, 0, bmp.Width, bmp.Height));
             
                    cxGraph.DrawOriginLines(args);
                    bmp.Save(imageFileName, ImageFormat.Png);
                }
                Debug.WriteLine(string.Format("file {0} has been saved", imageFileName));
            }
            </code>
            </example>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.BeforeDrawPlotArea"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea"/>
            <lastupdated>10/3/2010 6:53:41 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnXAxesChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxesChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.ComponentModel.CollectionChangeEventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxesChanged"/>
            <lastupdated>6/1/2005 3:01:00 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnYAxesChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxesChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.ComponentModel.CollectionChangeEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxesChanged"/>
            <lastupdated>6/1/2005 3:01:18 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnXAxisRangeChanged(NationalInstruments.UI.ComplexXAxisEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxisRangeChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.ComplexXAxisEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxisRangeChanged"/>
            <seealso cref="P:NationalInstruments.UI.ComplexAxis.Range"/>
            <lastupdated>6/1/2005 3:01:10 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnYAxisRangeChanged(NationalInstruments.UI.ComplexYAxisEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxisRangeChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.ComplexYAxisEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxisRangeChanged"/>
            <seealso cref="P:NationalInstruments.UI.ComplexAxis.Range"/>
            <lastupdated>6/1/2005 3:01:24 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnPlotDataChanged(NationalInstruments.UI.ComplexPlotDataChangedEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotDataChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.ComplexPlotDataChangedEventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotDataChanged"/>
            <lastupdated>6/1/2005 3:00:48 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnBeforeDrawPlot(NationalInstruments.UI.BeforeDrawComplexPlotEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawPlot"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.BeforeDrawComplexPlotEventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawPlot"/>
            <lastupdated>6/1/2005 3:00:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnAfterDrawPlot(NationalInstruments.UI.AfterDrawComplexPlotEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawPlot"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterDrawComplexPlotEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawPlot"/>
            <lastupdated>6/1/2005 3:00:28 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxesChanged">
            <summary>
            Occurs when the content of the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxes"/> collection
            changes.
            </summary>
            <remarks>
            The content of the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxes"/> collection changes
            through an add, remove, insert, or clear operation on the collection.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxes"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnXAxesChanged(System.ComponentModel.CollectionChangeEventArgs)"/>
            <lastupdated>6/1/2005 3:39:34 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxesChanged">
            <summary>
            Occurs when the content of the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxes"/> collection
            changes.
            </summary>
            <remarks>
            The content of the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxes"/> collection changes
            through an add, remove, insert, or clear operation on the collection.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxes"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnYAxesChanged(System.ComponentModel.CollectionChangeEventArgs)"/>
            <lastupdated>6/1/2005 3:39:48 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotDataChanged">
            <summary>
            Occurs when a new set of data is plotted on a plot that is contained in the graph plot collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>6/1/2005 3:39:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawPlot">
            <summary>
            Occurs before a plot is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawPlot"/> 
            to participate in the drawing of the plot. Only plots contained in the graph plot collection
            raise <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawPlot"/> before the plot begins
            drawing. Set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
             property of the event argument to <see langword="true"/> to cancel drawing of the
            plot. If you set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawPlot"/> is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawPlot"/> event is not raised for that plot. You must provide all of the
            implementation for drawing the plot if <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <see langword="true"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnBeforeDrawPlot(NationalInstruments.UI.BeforeDrawComplexPlotEventArgs)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawPlot"/>
            <lastupdated>6/1/2005 3:39:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawPlot">
            <summary>
            Occurs after a plot is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawPlot"/> to participate in the drawing of the plot.
            Only plots contained in the graph plot collection raise
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawPlot"/> after the plot has
            completed drawing. Use <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawPlot"/> in conjunction with custom drawing 
            to further annotate the plot. If you set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property
            to <see langword="true"/> in the event arguments of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawPlot"/> event, this event is not raised for that plot.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnAfterDrawPlot(NationalInstruments.UI.AfterDrawComplexPlotEventArgs)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawPlot"/>
            <lastupdated>6/1/2005 3:39:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxisRangeChanged">
            <summary>
            Occurs when the range of an x-axis in the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxes"/> collection
            of the graph changes.
            </summary>
            <remarks>
            Only x axes contained  in the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxes"/> collection raise the 
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.XAxisRangeChanged"/> event.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnXAxisRangeChanged(NationalInstruments.UI.ComplexXAxisEventArgs)"/>
            <seealso cref="P:NationalInstruments.UI.ComplexAxis.Range"/>
            <lastupdated>6/1/2005 3:39:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxisRangeChanged">
            <summary>
            Occurs when the range of a y-axis in the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxes"/> collection
            of the graph changes.
            </summary>
            <remarks>
            Only y axes contained  in the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxes"/> collection raise the 
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.YAxisRangeChanged"/> event.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnYAxisRangeChanged(NationalInstruments.UI.ComplexYAxisEventArgs)"/>
            <seealso cref="P:NationalInstruments.UI.ComplexAxis.Range"/>
            <lastupdated>6/1/2005 3:39:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnAfterMoveCursor(NationalInstruments.UI.AfterMoveComplexCursorEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterMoveCursor"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterMoveComplexCursorEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterMoveCursor"/>
            <lastupdated>10/5/2006 3:37:25 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnAfterDrawCursor(NationalInstruments.UI.AfterDrawComplexCursorEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawCursor"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterDrawComplexCursorEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/5/2006 3:36:44 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnBeforeMoveCursor(NationalInstruments.UI.BeforeMoveComplexCursorEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeMoveCursor"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.BeforeMoveComplexCursorEventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeMoveCursor"/>
            <lastupdated>10/5/2006 3:39:41 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnBeforeDrawCursor(NationalInstruments.UI.BeforeDrawComplexCursorEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawCursor"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.BeforeDrawComplexCursorEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/5/2006 3:39:02 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnCursorsChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.CursorsChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.ComponentModel.CollectionChangeEventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.CursorsChanged"/>
            <lastupdated>10/5/2006 3:39:47 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnAnnotationsChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AnnotationsChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.ComponentModel.CollectionChangeEventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AnnotationsChanged"/>
            <lastupdated>10/5/2006 3:37:37 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnAfterDrawComplexPointAnnotation(NationalInstruments.UI.AfterDrawComplexPointAnnotationEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawComplexPointAnnotation"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterDrawComplexPointAnnotationEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/5/2006 3:36:21 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnBeforeDrawComplexPointAnnotation(NationalInstruments.UI.BeforeDrawComplexPointAnnotationEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawComplexPointAnnotation"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.BeforeDrawComplexPointAnnotationEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/5/2006 3:38:42 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnAfterDrawComplexRangeAnnotation(NationalInstruments.UI.AfterDrawComplexRangeAnnotationEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawComplexRangeAnnotation"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterDrawComplexRangeAnnotationEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/5/2006 3:36:33 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnBeforeDrawComplexRangeAnnotation(NationalInstruments.UI.BeforeDrawComplexRangeAnnotationEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawComplexRangeAnnotation"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.BeforeDrawComplexRangeAnnotationEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/5/2006 3:38:51 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnAfterDrawMagnitudePhaseRangeAnnotation(NationalInstruments.UI.AfterDrawMagnitudePhaseRangeAnnotationEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawMagnitudePhaseRangeAnnotation"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterDrawMagnitudePhaseRangeAnnotationEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/5/2006 3:37:05 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnBeforeDrawMagnitudePhaseRangeAnnotation(NationalInstruments.UI.BeforeDrawMagnitudePhaseRangeAnnotationEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawMagnitudePhaseRangeAnnotation"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.BeforeDrawMagnitudePhaseRangeAnnotationEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/5/2006 3:39:34 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnAfterDrawMagnitudeCircleAnnotation(NationalInstruments.UI.AfterDrawMagnitudeCircleAnnotationEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawMagnitudeCircleAnnotation"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterDrawMagnitudeCircleAnnotationEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/5/2006 3:36:53 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnBeforeDrawMagnitudeCircleAnnotation(NationalInstruments.UI.BeforeDrawMagnitudeCircleAnnotationEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawMagnitudeCircleAnnotation"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.BeforeDrawMagnitudeCircleAnnotationEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/5/2006 3:39:16 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnAfterDragAnnotationCaption(NationalInstruments.UI.AfterDragComplexAnnotationCaptionEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDragAnnotationCaption"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterDragComplexAnnotationCaptionEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/5/2006 3:36:11 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnBeforeDragAnnotationCaption(NationalInstruments.UI.BeforeDragComplexAnnotationCaptionEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDragAnnotationCaption"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.BeforeDragComplexAnnotationCaptionEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/5/2006 3:38:32 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotLineColorGeneratorChanged">
            <summary>
            Occurs when the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.PlotLineColorGenerator" crefType="Unqualified"/> property is changed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <lastupdated>6/11/2009 6:13:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.UseColorGeneratorChanged">
            <summary>
            Occurs when the <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.UseColorGenerator"/> property  is changed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <lastupdated>6/11/2009 6:13:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterMoveCursor">
            <summary>
            Occurs after a cursor has been moved.
            </summary>
            <remarks>
            Only cursors contained in the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Cursors"/> collection 
            raise the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterMoveCursor"/> event after 
            the the cursor has completed moving. If you set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property
            to <see langword="true"/> in the event arguments of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeMoveCursor"/> event, this event is not raised for that cursor.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnAfterMoveCursor(NationalInstruments.UI.AfterMoveComplexCursorEventArgs)"/>
            <lastupdated>10/5/2006 3:42:18 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawCursor">
            <summary>
            Occurs after a cursor is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawCursor"/> to participate in the drawing of the cursor.
            Only cursors contained in the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Cursors"/> collection raise
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawCursor"/> after the cursor has
            completed drawing. Use <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawCursor"/> in conjunction with custom drawing 
            to further annotate the cursor. If you set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property
            to <see langword="true"/> in the event arguments of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawCursor"/> event, this event is not raised for that cursor.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>10/5/2006 3:41:13 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeMoveCursor">
            <summary>
            Occurs before a cursor is moved.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeMoveCursor"/> to prevent the cursor from moving to
            specific values or range of values. Only cursors contained in the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Cursors"/> collection raise 
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeMoveCursor"/> before the cursor begins moving. Set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
             property of the event argument to <see langword="true"/> to prevent the cursor from moving.
            If you set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeMoveCursor"/> is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterMoveCursor"/> event is not raised for that cursor. You must provide all of the
            implementation for drawing the cursor if <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <see langword="true"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnBeforeMoveCursor(NationalInstruments.UI.BeforeMoveComplexCursorEventArgs)"/>
            <lastupdated>10/5/2006 4:46:01 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawCursor">
            <summary>
            Occurs before a cursor is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawCursor"/> 
            to participate in the drawing of the cursor. Only cursors contained in the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Cursors"/> collection
            raise <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawCursor"/> before the cursor begins
            drawing. Set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            property of the event argument to <see langword="true"/> to cancel drawing of the
            cursor. If you set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawCursor"/> is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawCursor"/> event is not raised for that cursor. You must provide all of the
            implementation for drawing the cursor if <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <see langword="true"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>10/5/2006 4:44:26 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.CursorsChanged">
            <summary>
            Occurs when the content of the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Cursors"/> collection
            changes.
            </summary>
            <remarks>
            The content of the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Cursors"/> collection changes
            through an add, remove, insert, or clear operation on the collection.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Cursors"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnCursorsChanged(System.ComponentModel.CollectionChangeEventArgs)"/>
            <lastupdated>10/5/2006 4:46:16 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AnnotationsChanged">
            <summary>
            Occurs when the content of the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Annotations"/> collection
            changes.
            </summary>
            <remarks>
            The content of the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Annotations"/> collection changes
            through an add, remove, insert, or clear operation on the collection.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Annotations"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnAnnotationsChanged(System.ComponentModel.CollectionChangeEventArgs)"/>
            <lastupdated>10/5/2006 3:42:33 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawComplexPointAnnotation">
            <summary>
            Occurs before a point annotation is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawComplexPointAnnotation"/> 
            to participate in the drawing of the point annotation. Only point annotations contained in the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Annotations"/> collection
            raise <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawComplexPointAnnotation"/> before the point annotation begins
            drawing. Set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            property of the event argument to <see langword="true"/> to cancel drawing of the
            point annotation. If you set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawComplexPointAnnotation"/> is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawComplexPointAnnotation"/> event is not raised for that point annotation. You must provide all of the
            implementation for drawing the point annotation if <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <see langword="true"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>10/5/2006 4:43:12 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawComplexPointAnnotation">
            <summary>
            Occurs after a point annotation is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawComplexPointAnnotation"/> to participate in the drawing of the point annotation.
            Only point annotations contained in the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Annotations"/> collection raise
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawComplexPointAnnotation"/> after the annotation has
            completed drawing. Use <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawComplexPointAnnotation"/> in conjunction with custom drawing 
            to further annotate the point annotation. If you set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property
            to <see langword="true"/> in the event arguments of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawComplexPointAnnotation"/> event, this event is not raised for that annotation.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnAfterDrawComplexPointAnnotation(NationalInstruments.UI.AfterDrawComplexPointAnnotationEventArgs)"/>
            <lastupdated>10/5/2006 3:40:30 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawComplexRangeAnnotation">
            <summary>
            Occurs before a range annotation is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawComplexRangeAnnotation"/> 
            to participate in the drawing of the range annotation. Only range annotations contained in the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Annotations"/> collection
            raise <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawComplexRangeAnnotation"/> before the range annotation begins
            drawing. Set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            property of the event argument to <see langword="true"/> to cancel drawing of the
            range annotation. If you set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawComplexRangeAnnotation"/> is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawComplexRangeAnnotation"/> event is not raised for that range annotation. You must provide all of the
            implementation for drawing the range annotation if <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <see langword="true"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>10/5/2006 4:43:52 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawComplexRangeAnnotation">
            <summary>
            Occurs after a range annotation is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawComplexRangeAnnotation"/> to participate in the drawing of the range annotation.
            Only range annotations contained in the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Annotations"/> collection raise
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawComplexRangeAnnotation"/> after the annotation has
            completed drawing. Use <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawComplexRangeAnnotation"/> in conjunction with custom drawing 
            to further annotate the range annotation. If you set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property
            to <see langword="true"/> in the event arguments of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawComplexRangeAnnotation"/> event, this event is not raised for that annotation.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnAfterDrawComplexRangeAnnotation(NationalInstruments.UI.AfterDrawComplexRangeAnnotationEventArgs)"/>
            <lastupdated>10/5/2006 4:42:11 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawMagnitudePhaseRangeAnnotation">
            <summary>
            Occurs before a <see cref="T:NationalInstruments.UI.MagnitudePhaseRangeAnnotation"/>
            is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawMagnitudePhaseRangeAnnotation"/> 
            to participate in the drawing of <see cref="T:NationalInstruments.UI.MagnitudePhaseRangeAnnotation"/>. Only a <see cref="T:NationalInstruments.UI.MagnitudePhaseRangeAnnotation"/>
            contained in the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Annotations"/> collection
            raises <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawMagnitudePhaseRangeAnnotation"/> before the <see cref="T:NationalInstruments.UI.MagnitudePhaseRangeAnnotation"/>
            begins
            drawing. Set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            property of the event argument to <see langword="true"/> to cancel drawing of the
            <see cref="T:NationalInstruments.UI.MagnitudePhaseRangeAnnotation"/>. If you set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawMagnitudePhaseRangeAnnotation"/> is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawMagnitudePhaseRangeAnnotation"/> event is not raised for that <see cref="T:NationalInstruments.UI.MagnitudePhaseRangeAnnotation"/>. You must provide all of the
            implementation for drawing <see cref="T:NationalInstruments.UI.MagnitudePhaseRangeAnnotation"/>
            if <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <see langword="true"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>11/7/2008 6:27:22 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawMagnitudePhaseRangeAnnotation">
            <summary>
            Occurs after a <see cref="T:NationalInstruments.UI.MagnitudePhaseRangeAnnotation"/>
            is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawMagnitudePhaseRangeAnnotation"/> to participate in the drawing of <see cref="T:NationalInstruments.UI.MagnitudePhaseRangeAnnotation"/>.
            Only a <see cref="T:NationalInstruments.UI.MagnitudePhaseRangeAnnotation"/>
             contained in the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Annotations"/> collection raises
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawMagnitudePhaseRangeAnnotation"/> after the annotation has
            completed drawing. Use <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawMagnitudePhaseRangeAnnotation"/> in conjunction with custom drawing 
            to further annotate the range annotation. If you set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property
            to <see langword="true"/> in the event arguments of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawMagnitudePhaseRangeAnnotation"/> event, this event is not raised for that annotation.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnAfterDrawMagnitudePhaseRangeAnnotation(NationalInstruments.UI.AfterDrawMagnitudePhaseRangeAnnotationEventArgs)"/>
            <lastupdated>11/7/2008 6:28:50 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawMagnitudeCircleAnnotation">
            <summary>
            Occurs before a MagnitudeCircle annotation is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawMagnitudeCircleAnnotation"/> 
            to participate in the drawing of the MagnitudeCircle annotation. Only MagnitudeCircle annotations contained in the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Annotations"/> collection
            raise <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawMagnitudeCircleAnnotation"/> before the MagnitudeCircle annotation begins
            drawing. Set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            property of the event argument to <see langword="true"/> to cancel drawing of the
            MagnitudeCircle annotation. If you set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawMagnitudeCircleAnnotation"/> is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawMagnitudeCircleAnnotation"/> event is not raised for that MagnitudeCircle annotation. You must provide all of the
            implementation for drawing the MagnitudeCircle annotation if <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <see langword="true"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>10/5/2006 4:45:05 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawMagnitudeCircleAnnotation">
            <summary>
            Occurs after a MagnitudeCircle annotation is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawMagnitudeCircleAnnotation"/> to participate in the drawing of the MagnitudeCircle annotation.
            Only MagnitudeCircle annotations contained in the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Annotations"/> collection raise
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawMagnitudeCircleAnnotation"/> after the annotation has
            completed drawing. Use <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDrawMagnitudeCircleAnnotation"/> in conjunction with custom drawing 
            to further annotate the range annotation. If you set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property
            to <see langword="true"/> in the event arguments of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDrawMagnitudeCircleAnnotation"/> event, this event is not raised for that annotation.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnAfterDrawMagnitudeCircleAnnotation(NationalInstruments.UI.AfterDrawMagnitudeCircleAnnotationEventArgs)"/>
            <lastupdated>10/5/2006 3:41:37 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDragAnnotationCaption">
            <summary>
            Occurs before an annotation caption is dragged.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDragAnnotationCaption"/> to prevent the annotation caption from being dragged to
            specific values or a range of values. Only annotations contained in the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Annotations"/> collection raise 
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDragAnnotationCaption"/> before the annotation caption begins moving. Set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
             property of the event argument to <see langword="true"/> to prevent the annotation caption from being dragged.
            If you set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDragAnnotationCaption"/> is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDragAnnotationCaption"/> event is not raised for that annotation.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnBeforeDragAnnotationCaption(NationalInstruments.UI.BeforeDragComplexAnnotationCaptionEventArgs)"/>
            <lastupdated>10/5/2006 4:42:46 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDragAnnotationCaption">
            <summary>
            Occurs after an annotation caption has been dragged.
            </summary>
            <remarks>
            Only annotations contained in the <see cref="P:NationalInstruments.UI.WindowsForms.ComplexGraph.Annotations"/> collection 
            raise the <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.AfterDragAnnotationCaption"/> event after 
            the annotation caption has been dragged. If you set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property
            to <see langword="true"/> in the event arguments of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.ComplexGraph.BeforeDragAnnotationCaption"/> event, this event is not raised for that annotation.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ComplexGraph.OnAfterDragAnnotationCaption(NationalInstruments.UI.AfterDragComplexAnnotationCaptionEventArgs)"/>
            <lastupdated>10/5/2006 3:40:04 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.ControlBase">
            <summary>
            Provides an <see langword="abstract"/> base class for Measurement Studio Windows Forms controls.
            </summary>
            <threadsafety safety="control"/>
            <remarks>
            	<see cref="T:NationalInstruments.UI.WindowsForms.ControlBase"/> provides properties to configure the appearance of 
            Measurement Studio .NET Windows Forms controls. You can use <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackColor"/>,
            <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackgroundImage"/>, <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackgroundImageAlignment"/>,
            and <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.ForeColor"/> to customize the background and foreground 
            of the control. Use <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.Border"/> to change the border of the control.
            You can use <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CanShowFocus"/> to specify if the control draw a focus rectangle when the control has focus.
            You can change the caption and its background color, font, foreground color, and position with
            <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.Caption"/>, <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionBackColor"/>,
            <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionFont"/>, <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionForeColor"/>,
            and <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionPosition"/> respectively.
            <para>
            		<see cref="T:NationalInstruments.UI.WindowsForms.ControlBase"/> provides additional members for managing the painting of the control. 
            Use <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.ImmediateUpdates"/> to specify if the control updates 
            when invalidated. <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.BeginUpdate"/> suspends the painting of the control until 
            <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.EndUpdate"/> is called. <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.EndUpdate"/> resumes the painting of the 
            control that is suspended by calling <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.BeginUpdate"/>. Use <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.BeginUpdate"/> 
            and <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.EndUpdate"/> when making many changes to the appearance of the 
            control to minimize distraction to the end-user by preventing flickering and to improve performance. Use <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.Draw(NationalInstruments.UI.ComponentDrawArgs)"/> to draw the control to a GDI+ 
            drawing surface by passing the appropriate <see cref="P:NationalInstruments.UI.DrawArgs.Graphics"/> object. The <see cref="P:NationalInstruments.UI.DrawArgs.Graphics"/> 
            object can represent the drawing surface of an image, the drawing 
            surface of another device such as the printer, or the drawing surface of an area of the screen other than the area in which the component is located.
            </para>
            	<note type="note">
            For more information about the Windows Forms controls, refer to <see keyword="UsingNINETWinFormsControls" keywordType="mstudio">Using the Measurement Studio Windows Forms .NET Controls</see>.
            </note>
            </remarks>
            <seealso cref="T:System.Windows.Forms.Control"/>
            <lastupdated>6/26/2006 2:20:20 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.ControlBase"/> class.
            </summary>
            <lastupdated>7/1/2003 12:08:47 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.DefaultSize">
            <summary>
            Gets the default size of the control.
            </summary>
            <value>
            The default value is a <see cref="T:System.Drawing.Size"/> with a width of 150 and height of 125.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="P:System.Windows.Forms.Control.DefaultSize"/>.
            </remarks>
            <seealso cref="P:System.Windows.Forms.Control.DefaultSize"/>
            <seealso cref="T:System.Windows.Forms.Control"/>
            <lastupdated>7/1/2003 3:05:25 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.CanShowFocus">
            <summary>
            Gets or sets a value indicating if the control draws a focus rectangle when the control has focus.
            </summary>
            <value>
                <see langword="true"/> if the control draws a focus rectangle when the control has focus. The default value is <see langword="false"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>7/8/2004 3:20:56 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.Border">
            <summary>
            Gets or sets the border style of the control.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.Border"/> that represents the border to draw. The default value is 
            <see cref="P:NationalInstruments.UI.Border.None"/>.
            </value>
            <remarks>
            You can set this property to any instance of
            <see cref="T:NationalInstruments.UI.Border"/>, including the <see cref="T:NationalInstruments.UI.Border"/> properties 
            and any custom class that implements the <see cref="T:NationalInstruments.UI.Border"/> base class.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The specified <see cref="T:NationalInstruments.UI.Border"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>7/13/2004 5:03:18 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.BackColor">
            <summary>
            Gets or sets the background color of the control.
            </summary>
            <value>
            A <see cref="T:System.Drawing.Color"/> that represents the background color of the control.
            The default value is <see cref="P:System.Drawing.SystemColors.Control"/>.
            </value>
            <remarks>
            <para>
            Overrides <see cref="P:System.Windows.Forms.Control.BackColor"/>.
            </para>
            <para>
            The value of <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackgroundImage"/> takes precedence over <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackColor"/>.
            If <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackgroundImage"/> is set to a value other than its default value, the 
            specified image is drawn in the background; otherwise, the background is filled with the color specified in
            <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackColor"/>.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:System.Windows.Forms.Control.BackColor"/>
            <seealso cref="T:System.Windows.Forms.Control"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackgroundImage"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.ForeColor"/>
            <lastupdated>6/26/2003 12:57:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.ResetBackColor">
            <summary>
            Resets the background color to its default value.
            </summary>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.Control.ResetBackColor"/>.
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackColor"/>
            <lastupdated>7/1/2003 3:06:55 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.Cursor">
            <summary>
            Gets or sets the cursor that is displayed when the mouse pointer is over the control.
            </summary>
            <value>
            A <see cref="T:System.Windows.Forms.Cursor"/> object that represents the cursor that is 
            displayed when the mouse pointer is over the control.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="P:System.Windows.Forms.Control.Cursor"/>. 
            </remarks>
            <seealso cref="P:System.Windows.Forms.Control.Cursor"/>
            <lastupdated>11/11/2003 11:48:26 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.BackgroundImage">
            <summary>
            Gets or sets the image to display in the background of the control.
            </summary>
            <value>
            An <see cref="T:System.Drawing.Image"/> that represents the image to display in the
            background of the control. The default value is <see langword="null"/>.
            </value>
            <remarks>
            <para>
            Overrides <see cref="P:System.Windows.Forms.Control.BackgroundImage"/>.
            </para>
            <para>
            The value of <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackgroundImage"/> takes precedence over <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackColor"/>.
            If <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackgroundImage"/> is set to a value other than its default value, the 
            specified image is drawn in the background; otherwise, the background is filled with the color specified in
            <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackColor"/>.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:System.Windows.Forms.Control.BackgroundImage"/>
            <seealso cref="T:System.Windows.Forms.Control"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackgroundImageAlignment"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackColor"/>
            <lastupdated>6/26/2003 12:58:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.BackgroundImageAlignment">
            <summary>
            Gets or sets the alignment of the background image of the control.
            </summary>
            <value>The <see cref="T:NationalInstruments.UI.ImageAlignment"/> of the background image within an enclosed bounds. 
            The default value is <see cref="F:NationalInstruments.UI.ImageAlignment.Stretch"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not an <see cref="T:NationalInstruments.UI.ImageAlignment"/> value.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackgroundImage"/>
            <lastupdated>6/26/2003 12:59:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.Font">
            <summary>
            Gets or sets the font to apply to the text that is displayed by the control.
            </summary>
            <value>
            The <see cref="T:System.Drawing.Font"/> to apply to the text that is displayed by the control.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="P:System.Windows.Forms.Control.Font"/>.
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.Font"/>
            <seealso cref="T:System.Windows.Forms.Control"/>
            <lastupdated>6/26/2003 1:08:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.ResetFont">
            <summary>
            Resets the font to its default value.
            </summary>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.Control.ResetFont"/>.
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.Font"/>
            <lastupdated>7/1/2003 3:07:01 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.ForeColor">
            <summary>
            Gets or sets the foreground color of the control.
            </summary>
            <value>
            A <see cref="T:System.Drawing.Color"/> that represents the foreground color of the control.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="P:System.Windows.Forms.Control.ForeColor"/>.
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.ForeColor"/>
            <seealso cref="T:System.Windows.Forms.Control"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackColor"/>
            <lastupdated>6/26/2003 1:08:55 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.ResetForeColor">
            <summary>
            Resets the foreground color to its default value.
            </summary>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.Control.ResetForeColor"/>.
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.ForeColor"/>
            <lastupdated>7/1/2003 3:07:05 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.Text">
            <exclude/>
            <lastupdated>7/11/2003 12:38:17 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.Caption">
            <summary>
            Gets or sets the caption for the control.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the caption for the control. The default 
            value is <see cref="F:System.String.Empty"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionBackColor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionFont"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionForeColor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionPosition"/>
            <lastupdated>9/28/2011 1:49:34 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionFont">
            <summary>
            Gets or sets the font of the caption that is displayed by the control.
            </summary>
            <value>
            The <see cref="T:System.Drawing.Font"/> to apply to the caption that is displayed by the control.
            The default value is <see cref="P:System.Windows.Forms.Control.DefaultFont"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.Caption"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionBackColor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionForeColor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionPosition"/>
            <lastupdated>6/26/2003 1:05:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionForeColor">
            <summary>
            Gets or sets the foreground color of the caption that is displayed by the control.
            </summary>
            <value>
            A <see cref="T:System.Drawing.Color"/> that represents the foreground color of the caption
            that is displayed by the control. The default value is <see cref="P:System.Drawing.SystemColors.ActiveCaptionText"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.Caption"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionBackColor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionFont"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionPosition"/>
            <lastupdated>9/28/2011 1:49:45 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionBackColor">
            <summary>
            Gets or sets the background color of the caption that is displayed by the control.
            </summary>
            <value>
            A <see cref="T:System.Drawing.Color"/> that represents the background color of the caption
            that is displayed by the control. The default value is <see cref="P:System.Drawing.SystemColors.ActiveCaption"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.Caption"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionFont"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionForeColor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionPosition"/>
            <lastupdated>9/28/2011 1:49:39 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionPosition">
            <summary>
            Gets or sets the position of the caption that is displayed by the control.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.CaptionPosition"/> of the caption that is displayed
            by the control. The default value is <see cref="F:NationalInstruments.UI.CaptionPosition.Top"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:NationalInstruments.UI.CaptionPosition"/> value.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.Caption"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionBackColor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionFont"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionForeColor"/>
            <lastupdated>9/28/2011 1:49:53 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionVerticalOrientation">
            <summary>
            Gets or sets the orientation of the caption when displayed vertically to the left or right of the control.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.VerticalCaptionOrientation"/> of the caption. The default value is
            <see cref="F:NationalInstruments.UI.VerticalCaptionOrientation.BottomToTop"/> when <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionPosition"/>
            is <see cref="F:NationalInstruments.UI.CaptionPosition.Left"/> and
            <see cref="F:NationalInstruments.UI.VerticalCaptionOrientation.TopToBottom"/> when <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionPosition"/>
            is <see cref="F:NationalInstruments.UI.CaptionPosition.Right"/>.
            </value>
            <remarks>
            This property has no effect when <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionPosition"/> is <see cref="F:NationalInstruments.UI.CaptionPosition.Top"/> or <see cref="F:NationalInstruments.UI.CaptionPosition.Bottom"/>.
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a <see cref="T:NationalInstruments.UI.VerticalCaptionOrientation"/> value.
            </exception>
            <seealso cref="T:NationalInstruments.UI.VerticalCaptionOrientation" crefType="Unqualified"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionPosition" crefType="Unqualified"/>
            <lastupdated>8/26/2009 11:12:53 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionVisible">
            <summary>
            Gets or sets a value indicating whether the caption is displayed by the control.
            </summary>
            <value>
            	<see langword="true"/> if the caption is displayed by the control. The default value is 
            <see langword="true"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.Caption"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionBackColor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionFont"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionForeColor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionPosition"/>
            <lastupdated>9/1/2005 9:57:50 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.ImmediateUpdates">
            <summary>
            Gets or sets a value indicating if the control updates immediately when invalidated.
            </summary>
            <value>
                <see langword="true"/> if the control updates immediately when invalidated. The default value is 
            <see langword="false"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
                
            Setting <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.ImmediateUpdates"/> to <see langword="true"/>
            executes all pending requests for painting every time the control is invalidated. This behavior can substantially degrade
            the performance of the control. Set <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.ImmediateUpdates"/> to <see langword="false"/> for optimal performance unless you require paint requests to be processed immediately. 
            </remarks>
            <lastupdated>7/8/2004 3:32:02 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.HoverInterval">
            <summary>
            Gets or sets the delay for the mouse hover event. 
            </summary>
            <value>
            The delay for the mouse hover event.   The default value is 800 ms.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<see cref="P:System.TimeSpan.TotalMilliseconds"/> is greater than <see cref="F:System.Int32.MaxValue"/>.
            </exception>
            <remarks>
            	<see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.HoverInterval"/> controls the length of time between when the mouse
            becomes inactive to the time the <see cref="E:System.Windows.Forms.Control.MouseHover"/> event is raised. To use the system setting, set
            <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.HoverInterval"/> to <see cref="F:System.TimeSpan.Zero"/>.
            <note type="note"><see cref="T:System.TimeSpan"/> will always
            be represented in the culture invariant string format because of limitations in the .NET Framework.
            </note>
            </remarks>
            <lastupdated>3/26/2008 12:06:41 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.NationalInstruments#UI#IControlBase#Enabled">
            <exclude/>
            <lastupdated>7/10/2003 2:06:49 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.NationalInstruments#UI#IControlBase#Visible">
            <exclude/>
            <lastupdated>7/10/2003 2:06:59 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.NationalInstruments#UI#IControlBase#Width">
            <exclude/>
            <lastupdated>7/10/2003 2:07:05 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.NationalInstruments#UI#IControlBase#Height">
            <exclude/>
            <lastupdated>7/10/2003 2:06:52 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.InnerBounds">
            <summary>
            Gets a rectangle that represents the actual bounds of the control.
            </summary>
            <value>
            A <see cref="T:System.Drawing.Rectangle"/> that represents the actual
            bounds of the control.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            The actual bounds of the control is the client rectangle, excluding the area occupied by
            the border, focus rectangle, caption, and any additional padding.
            </remarks>
            <lastupdated>7/8/2004 3:33:14 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.ControlBase"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
                <see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.ControlBase"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
                <note type="note">
                    <see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            </remarks>
            <seealso cref="M:System.IDisposable.Dispose"/>
            <seealso cref="T:System.IDisposable"/>
            <lastupdated>7/1/2003 12:00:17 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.System#IServiceProvider#GetService(System.Type)">
            <exclude/>
            <lastupdated>1/23/2009 5:24:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.GetService(System.Type)">
            <summary>
            Returns an object that represents a service provided by the control or by its container.
            </summary>
            <param name="service">
            A service provided by the control.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents a service provided by the control.  This value is
            <see langword="null"/> if the control does not provide the specified service.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>3/28/2003 2:42:57 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>7/8/2004 3:39:48 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains 
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)"/>.
            </remarks>
            <seealso cref="E:System.Windows.Forms.Control.Paint"/>
            <seealso cref="T:System.Windows.Forms.Control"/>
            <lastupdated>7/13/2004 5:06:10 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the background of the control.
            </summary>
            <param name="pe">
            A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains 
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)"/>.
            </remarks>
            <seealso cref="T:System.Windows.Forms.Control"/>
            <lastupdated>7/13/2004 5:06:19 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseMove"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.
            </param>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)"/>.
            </remarks>
            <seealso cref="E:System.Windows.Forms.Control.MouseMove"/>
            <lastupdated>11/11/2003 11:49:57 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.OnBackgroundImageAlignmentChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ControlBase.BackgroundImageAlignmentChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ControlBase.BackgroundImageAlignmentChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackgroundImageAlignment"/>
            <lastupdated>7/13/2004 5:03:50 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.OnImmediateUpdatesChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ControlBase.ImmediateUpdatesChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ControlBase.ImmediateUpdatesChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.ImmediateUpdates"/>
            <lastupdated>7/13/2004 5:06:01 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.OnCaptionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ControlBase.CaptionChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ControlBase.CaptionChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.Caption"/>
            <lastupdated>7/13/2004 5:04:47 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.OnCaptionFontChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ControlBase.CaptionFontChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ControlBase.CaptionFontChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionFont"/>
            <lastupdated>7/13/2004 5:04:56 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.OnCaptionForeColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ControlBase.CaptionForeColorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ControlBase.CaptionForeColorChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionForeColor"/>
            <lastupdated>7/13/2004 5:05:05 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.OnCaptionBackColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ControlBase.CaptionBackColorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ControlBase.CaptionBackColorChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionBackColor"/>
            <lastupdated>7/13/2004 5:04:38 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.OnCaptionPositionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ControlBase.CaptionPositionChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ControlBase.CaptionPositionChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionPosition"/>
            <lastupdated>7/13/2004 5:05:18 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.OnCaptionVerticalOrientationChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ControlBase.CaptionVerticalOrientationChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ControlBase.CaptionVerticalOrientationChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionVerticalOrientation"/>
            <lastupdated>8/26/2009 11:13:15 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.OnCaptionVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ControlBase.CaptionVisibleChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ControlBase.CaptionVisibleChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionVisible"/>
            <lastupdated>9/1/2005 9:58:27 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.OnBorderChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ControlBase.BorderChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ControlBase.BorderChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.Border"/>
            <lastupdated>7/13/2004 5:04:16 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.OnCanShowFocusChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ControlBase.CanShowFocusChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ControlBase.CanShowFocusChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CanShowFocus"/>
            <lastupdated>7/13/2004 5:04:28 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.OnInnerBoundsChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ControlBase.InnerBoundsChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ControlBase.InnerBoundsChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.InnerBounds"/>
            <lastupdated>7/8/2004 3:35:20 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.OnHoverIntervalChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ControlBase.HoverIntervalChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ControlBase.HoverIntervalChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.HoverInterval"/>
            <lastupdated>7/8/2004 3:34:50 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.OnBeforeDrawCaption(NationalInstruments.UI.BeforeDrawCaptionEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ControlBase.BeforeDrawCaption"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.BeforeDrawCaptionEventArgs"/> that contains the drawing data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ControlBase.BeforeDrawCaption"/>
            <lastupdated>7/13/2004 5:04:02 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.OnAfterDrawCaption(NationalInstruments.UI.AfterDrawCaptionEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ControlBase.AfterDrawCaption"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterDrawCaptionEventArgs"/> that contains the drawing data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ControlBase.AfterDrawCaption"/>
            <lastupdated>7/13/2004 5:03:40 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.BeginUpdate">
            <summary>
            Suspends the painting of the control until <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.EndUpdate"/>
            is called.
            </summary>
            <remarks>
            When making many changes to the appearance of a control, you can call
            <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.BeginUpdate"/> to 
            temporarily suspend the painting of the control. This results in less 
            distraction to the end-user by preventing flickering when making many 
            changes to the appearance of a control and improves performance. 
            After all updates are made, call 
            <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.EndUpdate"/> to 
            resume drawing of the control. You must call <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.EndUpdate"/>
            once for each call to <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.BeginUpdate"/>.
            <para>
            <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.BeginUpdate"/>
            requires <see cref="T:System.Security.Permissions.SecurityPermission"/>
            with <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode"/>
            be granted to the <format type="monospace">NationalInstruments.UI.WindowsForms</format> assembly. If the permission is not granted, 
            <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.BeginUpdate"/> has no effect.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlBase.EndUpdate"/>
            <lastupdated>12/15/2014 3:00:03 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.EndUpdate">
            <summary>
            Resumes the painting of the control suspended by calling 
            <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.BeginUpdate"/>.
            </summary>
            <remarks>
            When making many changes to the appearance of a control, you can call
            <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.BeginUpdate"/> to 
            temporarily suspend the painting of the control. This results in less 
            distraction to the end-user by preventing flickering when making many 
            changes to the appearance of a control and improves performance. 
            After all updates are made, call 
            <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.EndUpdate"/> to 
            resume drawing of the control. You must call <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.EndUpdate"/>
            once for each call to <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.BeginUpdate"/>.
            <para>
            <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.EndUpdate"/>
            requires <see cref="T:System.Security.Permissions.SecurityPermission"/>
            with <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode"/> be granted to the
                    <format type="monospace">NationalInstruments.UI.WindowsForms</format> assembly. If the permission is not granted, 
            <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.EndUpdate"/> has no effect.</para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlBase.BeginUpdate"/>
            <lastupdated>12/15/2014 3:00:27 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.Draw(NationalInstruments.UI.ComponentDrawArgs)">
            <summary>
            Draws the control with the specified <see cref="T:NationalInstruments.UI.ComponentDrawArgs"/>.
            </summary>
            <param name="args">
            A <see cref="T:NationalInstruments.UI.ComponentDrawArgs"/> that contains the drawing data.
            </param>
            <remarks>
            	<para>
            The <see cref="P:NationalInstruments.UI.DrawArgs.Graphics"/> in <paramref name="args"/> specifies the
            <see cref="T:System.Drawing.Graphics"/> to use for drawing. The 
            <see cref="P:NationalInstruments.UI.ComponentDrawArgs.Bounds"/> in <paramref name="args"/> specifies the bounds in
            which the control is drawn.
            </para>
            	<para>
            Use <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.Draw(NationalInstruments.UI.ComponentDrawArgs)"/> to draw the control
            to a GDI+ drawing surface by passing the appropriate <see cref="T:System.Drawing.Graphics"/>
            object. The <see cref="T:System.Drawing.Graphics"/> object can represent the drawing surface
            of an image, the drawing surface of another device such as the printer, or the drawing surface
            of an area of the screen other than the area in which the component is located. Passing the drawing 
            surface of an image allows the component to be drawn to an image format of your choice. You can 
            query the bounds and size of the control using <see cref="P:System.Windows.Forms.Control.Bounds"/> 
            and <see cref="P:System.Windows.Forms.Control.Size"/>, respectively.
            </para>
            </remarks>
            <example>The following example demonstrates drawing a control to a .png image file in response to the <see cref="E:System.Windows.Forms.Control.Paint" crefType="Unqualified"/> event. 
            <code lang="VB.NET">
            Public Sub ControlBase_Paint(ByVal sender As Object, ByVal e As PaintEventArgs)
                Dim imageFileName As String = "ControlImage.png"
                Using bmp As New Bitmap(baseControl.Width, baseControl.Height)
                    Dim g As Graphics = Graphics.FromImage(bmp)
                    Dim args As New ComponentDrawArgs(g, New Rectangle(0, 0, bmp.Width, bmp.Height))
             
                    baseControl.Draw(args)
                    bmp.Save(imageFileName, ImageFormat.Png)
                End Using
                Debug.WriteLine(String.Format("file {0} has been saved", imageFileName))
            End Sub
            </code>
            </example>
            <example>
            	<code lang="C#">
            public void ControlBase_Paint(object sender, PaintEventArgs e)
            {
                string imageFileName = "ControlImage.png";
                using (Bitmap bmp = new Bitmap(baseControl.Width, baseControl.Height))
                {
                    Graphics g = Graphics.FromImage(bmp);
                    ComponentDrawArgs args = new ComponentDrawArgs(g, new Rectangle(0, 0, bmp.Width, bmp.Height));
             
                    baseControl.Draw(args);                
                    bmp.Save(imageFileName, ImageFormat.Png);
                }
                Debug.WriteLine(string.Format("file {0} has been saved", imageFileName));
            }
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="args"/> is <see langword="null"/>.
            </exception>
            <lastupdated>10/3/2010 7:13:11 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.ToImage">
            <summary>
            Creates an image of the control.
            </summary>
            <returns>
            An <see cref="T:System.Drawing.Image"/> that represents the control.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            When a color in the control is set to <see cref="P:System.Drawing.Color.Transparent"/>,
            the returned image contains transparency information.
            Due to limitations in the .NET Framework, when you <see cref="M:System.Drawing.Image.Save(System.String)"/> an image
            and specify <see cref="P:System.Drawing.Imaging.ImageFormat.Gif"/> as the image format, transparency is lost.
            Refer to <see href="http://support.microsoft.com/kb/318343/EN-US/">Microsoft KB 318343</see> for information about GDI+ and GIF files saved using the 8-bpp format. 
            However, you can save an image of the control without losing transparency. Call the <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.ToFile(System.String,NationalInstruments.UI.ImageType)"/> or <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.ToImage"/> method and specify <see cref="P:NationalInstruments.UI.ImageType.Gif"/> or <see cref="P:NationalInstruments.UI.ImageType.Png"/> as the <see cref="T:NationalInstruments.UI.ImageType"/> to save the image with transparency information.
            </para>
            	<para>
            If a control uses 3D styles, such as the <see cref="T:NationalInstruments.UI.WindowsForms.Led"/>, 
            <see cref="T:NationalInstruments.UI.WindowsForms.Switch"/>, or 
            <see cref="T:NationalInstruments.UI.WindowsForms.NumericPointer"/> controls,  and <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackColor"/>
             is set to <see cref="P:System.Drawing.Color.Transparent"/>,  the resulting image will have a 
            white background instead of a transparent background. 
            If you do not want this behavior, override the <format type="monospace">Is3D</format>  property  of the corresponding 
            style property to return <see langword="true"/>.
            </para>
            </remarks>
            <lastupdated>3/24/2011 3:24:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.ToImage(System.Drawing.Size)">
            <summary>
            Creates an image of the control with a specified size.
            </summary>
            <param name="size">
            A <see cref="T:System.Drawing.Size"/> that specifies the width and height of the exported image.
            </param>
            <returns>
            An <see cref="T:System.Drawing.Image"/> that represents the control.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            When a color in the control is set to <see cref="P:System.Drawing.Color.Transparent"/>,
            the returned image contains transparency information.
            Due to limitations in the .NET Framework, when you <see cref="M:System.Drawing.Image.Save(System.String)"/> an image
            and specify <see cref="P:System.Drawing.Imaging.ImageFormat.Gif"/> as the image format, transparency is lost.
            Refer to <see href="http://support.microsoft.com/kb/318343/EN-US/">Microsoft KB 318343</see> for information about GDI+ and GIF files saved using the 8-bpp format. 
            However, you can save an image of the control without losing transparency. Call the <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.ToFile(System.String,NationalInstruments.UI.ImageType)"/> or <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.ToImage"/> method and specify <see cref="P:NationalInstruments.UI.ImageType.Gif"/> or <see cref="P:NationalInstruments.UI.ImageType.Png"/> as the <see cref="T:NationalInstruments.UI.ImageType"/> to save the image with transparency information.
            </para>
            	<para>
            If a control uses 3D styles, such as the <see cref="T:NationalInstruments.UI.WindowsForms.Led"/>, 
            <see cref="T:NationalInstruments.UI.WindowsForms.Switch"/>, or 
            <see cref="T:NationalInstruments.UI.WindowsForms.NumericPointer"/> controls,  and <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackColor"/>
             is set to <see cref="P:System.Drawing.Color.Transparent"/>,  the resulting image will have a 
            white background instead of a transparent background. 
            If you do not want this behavior, override the <format type="monospace">Is3D</format> property  of the corresponding 
            style property to return <see langword="true"/>.
            </para>
            </remarks>
            <example>The following example demonstrates getting an image object from  a control, manipulating the image object, and then saving it to a .png file in  response to a user pressing <entity value="lt"/>Ctrl+S<entity value="gt"/> while the control has focus. 
            <code lang="VB.NET">
            Public Sub ControlBase_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs)
                ' Rotate and save the control when &lt;Ctrl+S&gt; is pressed.
                If Control.ModifierKeys = Keys.Control AndAlso e.KeyCode = Keys.S Then
                    ' Get the control image, then rotate it 90 degrees.
                    Dim image As Image = baseControl.ToImage(New Size(baseControl.Width, baseControl.Height))
                    image.RotateFlip(RotateFlipType.Rotate90FlipNone)
                    image.Save("FlippedImage.png", ImageFormat.Png)
                End If
            End Sub
            </code>
            </example>
            <example>
            	<code lang="C#">
            public void ControlBase_KeyDown(object sender, KeyEventArgs e)
            {
                // Rotate and save the control when &lt;Ctrl+S&gt; is pressed.
                if (Control.ModifierKeys == Keys.Control &amp;&amp; e.KeyCode == Keys.S)
                {
                    // Get the control image, then rotate it 90 degrees.
                    Image image = baseControl.ToImage(new Size(baseControl.Width, baseControl.Height));
                    image.RotateFlip(RotateFlipType.Rotate90FlipNone);
                    image.Save("FlippedImage.png", ImageFormat.Png);
                }
            }
            </code>
            </example>
            <lastupdated>3/24/2011 3:24:33 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.ToStream(System.IO.Stream,NationalInstruments.UI.ImageType)">
            <summary>
            Writes an image of the control to a stream.
            </summary>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> to write the image to.
            </param>
            <param name="type">
            The format of the image.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="type"/> is <see langword="null"/>.
            </exception>
            <remarks>
            	<para>
            When the <paramref name="type"/> parameter specified is either <see cref="P:NationalInstruments.UI.ImageType.Gif"/> or <see cref="P:NationalInstruments.UI.ImageType.Png"/> and the image is transparent, the stream will include transparency information. 
             </para>
            	<para>
            If a control uses 3D styles, such as the <see cref="T:NationalInstruments.UI.WindowsForms.Led"/>, 
            <see cref="T:NationalInstruments.UI.WindowsForms.Switch"/>, or 
            <see cref="T:NationalInstruments.UI.WindowsForms.NumericPointer"/> controls,  and <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackColor"/>
             is set to <see cref="P:System.Drawing.Color.Transparent"/>,  the resulting image will have a 
            white background instead of a transparent background. 
            If you do not want this behavior, override the <format type="monospace">Is3D</format>  property  of the corresponding 
            style property to return <see langword="true"/>.
            </para>
            	<para>
            If the <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackColor"/> is set to <see cref="P:System.Drawing.Color.Transparent"/> 
            and the specified image <paramref name="type"/> does not support transparent colors, such as 
             <see cref="P:NationalInstruments.UI.ImageType.Bmp"/> or <see cref="P:NationalInstruments.UI.ImageType.Jpeg"/>, 
            then the transparent region of the control will be saved as a white region.
            	</para>
            </remarks>
            <lastupdated>3/24/2011 3:24:39 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.ToStream(System.IO.Stream,NationalInstruments.UI.ImageType,System.Drawing.Size)">
            <summary>
            Writes an image of the control to a stream with a specified size.
            </summary>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> to write the image to.
            </param>
            <param name="type">
            The format of the image.
            </param>
            <param name="size">
            A <see cref="T:System.Drawing.Size"/> that specifies the width and height of the image that
            is written to the stream.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="type"/> is <see langword="null"/>.
            </exception>
            <remarks>
            	<para>
            When the <paramref name="type"/> parameter specified is either <see cref="P:NationalInstruments.UI.ImageType.Gif"/> or <see cref="P:NationalInstruments.UI.ImageType.Png"/> and the image is transparent, the stream will include transparency information. 
              </para>
            	<para>
            If a control uses 3D styles, such as the <see cref="T:NationalInstruments.UI.WindowsForms.Led"/>, 
            <see cref="T:NationalInstruments.UI.WindowsForms.Switch"/>, or 
            <see cref="T:NationalInstruments.UI.WindowsForms.NumericPointer"/> controls,  and <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackColor"/>
             is set to <see cref="P:System.Drawing.Color.Transparent"/>,  the resulting image will have a 
            white background instead of a transparent background. 
            If you do not want this behavior, override the <format type="monospace">Is3D</format>  property  of the corresponding 
            style property to return <see langword="true"/>.
            </para>
            	<para>
            If <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackColor"/> is set to <see cref="P:System.Drawing.Color.Transparent"/> and
             the specified image <paramref name="type"/> does not support transparent colors, such as  <see cref="P:NationalInstruments.UI.ImageType.Bmp"/> or <see cref="P:NationalInstruments.UI.ImageType.Jpeg"/>, then the transparent region of the control will be saved as a white region.
            	</para>
            </remarks>
            <example>The following example demonstrates writing a control to a <see cref="T:System.IO.Stream"/> object and then saving that stream as a .png image file in response to a user pressing <entity value="lt"/>Ctrl + S<entity value="gt"/> while the control has focus. 
            <code lang="VB.NET">
            Public Sub ControlBase_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs)
                ' Save the control from a stream when &lt;Ctrl + S&gt; is pressed.
                If Control.ModifierKeys = Keys.Control AndAlso e.KeyCode = Keys.S Then
                    Dim imageStream As New FileStream("ImageFromStream.png", FileMode.Create)
                    ' Writes the image of the control to a stream.
                    baseControl.ToStream(imageStream, ImageType.Png, New Size(baseControl.Width, baseControl.Height))
                    imageStream.Dispose()
                End If
            End Sub
            </code>
            </example>
            <example>
            	<code lang="C#">
            public void ControlBase_KeyDown(object sender, KeyEventArgs e)
            { 
                // Save the control from a stream when &lt;Ctrl + S&gt; is pressed.
                if (Control.ModifierKeys == Keys.Control &amp;&amp; e.KeyCode == Keys.S)
                {
                    FileStream imageStream = new FileStream("ImageFromStream.png", FileMode.Create);
                    // Writes the image of the control to a stream.
                    baseControl.ToStream(imageStream, ImageType.Png, new Size(baseControl.Width, baseControl.Height));
                    imageStream.Dispose();
                }
            }
            </code>
            </example>
            <lastupdated>3/24/2011 3:24:43 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.ToFile(System.String,NationalInstruments.UI.ImageType)">
            <summary>
            Writes an image of the control to a file.
            </summary>
            <param name="filename">
            The file path to write the image to.
            </param>
            <param name="type">
            The format of the image.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="filename"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="type"/> is <see langword="null"/>.
            </exception>
            <remarks>
            	<para>
            When the <paramref name="type"/> parameter specified is either <see cref="P:NationalInstruments.UI.ImageType.Gif"/> or <see cref="P:NationalInstruments.UI.ImageType.Png"/> and the image is transparent, the saved image includes transparency information. 
             </para>
            	<para>
            If a control uses 3D styles, such as the <see cref="T:NationalInstruments.UI.WindowsForms.Led"/>, 
            <see cref="T:NationalInstruments.UI.WindowsForms.Switch"/>, or 
            <see cref="T:NationalInstruments.UI.WindowsForms.NumericPointer"/> controls,  and <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackColor"/>
             is set to <see cref="P:System.Drawing.Color.Transparent"/>,  the resulting image will have a 
            white background instead of a transparent background. 
            If you do not want this behavior, override the <format type="monospace">Is3D</format>  property  of the corresponding 
            style property to return <see langword="true"/>.
            </para>
            	<para>
            If  <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackColor"/> is set to <see cref="P:System.Drawing.Color.Transparent"/> and the specified image <paramref name="type"/> does not support transparent colors, such as  <see cref="P:NationalInstruments.UI.ImageType.Bmp"/> or <see cref="P:NationalInstruments.UI.ImageType.Jpeg"/>, then the transparent region of the control will be saved as a white region.
            	</para>
            </remarks>
            <lastupdated>3/24/2011 3:24:20 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.ToFile(System.String,NationalInstruments.UI.ImageType,System.Drawing.Size)">
            <summary>
            Writes an image of the control to a file with a specified size.
            </summary>
            <param name="filename">
            The file path to write the image to.
            </param>
            <param name="type">
            The format of the image.
            </param>
            <param name="size">
            A <see cref="T:System.Drawing.Size"/> that specifies the width and height of the image that
            is written to the file.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="filename"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="type"/> is <see langword="null"/>.
            </exception>
            <remarks>
            	<para>
            When the <paramref name="type"/> parameter specified is either <see cref="P:NationalInstruments.UI.ImageType.Gif"/> or <see cref="P:NationalInstruments.UI.ImageType.Png"/> and the image is transparent, the saved image includes transparency information. 
            </para>
            	<para>
            If a control uses 3D styles, such as the <see cref="T:NationalInstruments.UI.WindowsForms.Led"/>, 
            <see cref="T:NationalInstruments.UI.WindowsForms.Switch"/>, or 
            <see cref="T:NationalInstruments.UI.WindowsForms.NumericPointer"/> controls,  and <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackColor"/>
             is set to <see cref="P:System.Drawing.Color.Transparent"/>,  the resulting image will have a 
            white background instead of a transparent background. 
            If you do not want this behavior, override the <format type="monospace">Is3D</format>  property  of the corresponding 
            style property to return <see langword="true"/>.
            </para>
            	<para>
            If  <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackColor"/> is set to <see cref="P:System.Drawing.Color.Transparent"/> and the specified image <paramref name="type"/> does not support transparent colors, such as  <see cref="P:NationalInstruments.UI.ImageType.Bmp"/> or <see cref="P:NationalInstruments.UI.ImageType.Jpeg"/>, then the transparent region of the control will be saved as a white region.
            	</para>
            </remarks>
            <example>The following example demonstrates writing the control to a .png file in response to a user pressing <entity value="lt"/>Ctrl+S<entity value="gt"/> while the control has focus. 
            <code lang="VB.NET">
            Public Sub ControlBase_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs)
                ' Copy the control to the clipboard when ctrl+s is pressed.
                If Control.ModifierKeys = Keys.Control AndAlso e.KeyCode = Keys.S Then
                    baseControl.ToFile("ToFileImage.png", ImageType.Png, New Size(baseControl.Width, baseControl.Height))
                End If
            End Sub
            </code>
            </example>
            <example>
            	<code lang="C#">
            public void ControlBase_KeyDown(object sender, KeyEventArgs e)
            {
                // Copy the control to the clipboard when ctrl+s is pressed.
                if (Control.ModifierKeys == Keys.Control &amp;&amp; e.KeyCode == Keys.S)
                    baseControl.ToFile("ToFileImage.png", ImageType.Png, new Size (baseControl.Width, baseControl.Height));
            }
            </code>
            </example>
            <lastupdated>3/24/2011 3:24:24 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.ToClipboard">
            <summary>
            Copies a bitmap image of the control to the clipboard.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>7/8/2004 3:36:49 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.ToClipboard(System.Drawing.Size)">
            <summary>
            Copies a bitmap image of the control to the clipboard with a specified size.
            </summary>
            <param name="size">
            A <see cref="T:System.Drawing.Size"/> that specifies the width and height of the bitmap image that
            is copied to the clipboard.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <example>The following example demonstrates placing a bitmap image of a control onto the clipboard in response to a user pressing <entity value="lt"/>Ctrl+C<entity value="gt"/> while the  the control has focus. 
            <code lang="VB.NET">
            Public Sub ControlBase_KeyDown(ByVal sender As Object, ByVal e As KeyEventArgs)
                ' copy the control to the clipboard when ctrl+c is pressed
                If Control.ModifierKeys = Keys.Control AndAlso e.KeyCode = Keys.C Then
                    baseControl.ToClipboard(New Size(baseControl.Width, baseControl.Height))
                End If
            End Sub
            </code>
            </example>
            <example>
            	<code lang="C#">
            public void ControlBase_KeyDown(object sender, KeyEventArgs e)
            {
                // copy the control to the clipboard when ctrl+c is pressed
                if (Control.ModifierKeys == Keys.Control &amp;&amp; e.KeyCode == Keys.C)
                    baseControl.ToClipboard(new Size (baseControl.Width, baseControl.Height));
            }
            </code>
            </example>
            <lastupdated>10/3/2010 7:16:20 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.RaiseExceptionIfDisposed">
            <summary>
            This member is obsolete. Use the <see cref="M:NationalInstruments.UI.WindowsForms.ControlBase.ThrowExceptionIfDisposed"/>
            method to achieve the same functionality.
            </summary>
            <lastupdated>7/8/2004 3:36:02 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.ThrowExceptionIfDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if the object has been disposed.
            </summary>
            <remarks>
            The <see cref="T:System.ObjectDisposedException"/> is thrown if the value of <see cref="P:System.Windows.Forms.Control.IsDisposed"/>
            is <see langword="true"/>. 
            </remarks>
            <seealso cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)"/>
            <seealso cref="P:System.Windows.Forms.Control.IsDisposed"/>
            <seealso cref="T:System.GC"/>
            <lastupdated>7/8/2004 3:36:40 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ControlBase.BackgroundImageAlignmentChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackgroundImageAlignment"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackgroundImageAlignment"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlBase.OnBackgroundImageAlignmentChanged(System.EventArgs)"/>
            <lastupdated>6/26/2003 12:29:18 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ControlBase.ImmediateUpdatesChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.ImmediateUpdates"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.ImmediateUpdates"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlBase.OnImmediateUpdatesChanged(System.EventArgs)"/>
            <lastupdated>6/26/2003 12:30:30 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ControlBase.CaptionChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.Caption"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.Caption"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlBase.OnCaptionChanged(System.EventArgs)"/>
            <lastupdated>6/26/2003 12:29:58 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ControlBase.CaptionVerticalOrientationChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionVerticalOrientation"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionVerticalOrientation"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlBase.OnCaptionVerticalOrientationChanged(System.EventArgs)"/>
            <lastupdated>8/26/2009 11:13:07 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ControlBase.CaptionFontChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionFont"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionFont"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlBase.OnCaptionFontChanged(System.EventArgs)"/>
            <lastupdated>6/26/2003 12:30:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ControlBase.CaptionForeColorChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionForeColor"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionForeColor"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlBase.OnCaptionForeColorChanged(System.EventArgs)"/>
            <lastupdated>6/26/2003 12:30:14 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ControlBase.CaptionBackColorChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionBackColor"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionBackColor"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlBase.OnCaptionBackColorChanged(System.EventArgs)"/>
            <lastupdated>6/26/2003 12:29:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ControlBase.CaptionPositionChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionPosition"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionPosition"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlBase.OnCaptionPositionChanged(System.EventArgs)"/>
            <lastupdated>6/26/2003 12:30:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ControlBase.CaptionVisibleChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionVisible"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionVisible"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlBase.OnCaptionVisibleChanged(System.EventArgs)"/>
            <lastupdated>9/1/2005 9:58:31 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ControlBase.BorderChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.Border"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.Border"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlBase.OnBorderChanged(System.EventArgs)"/>
            <lastupdated>6/26/2003 12:29:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ControlBase.CanShowFocusChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CanShowFocus"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CanShowFocus"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlBase.OnCanShowFocusChanged(System.EventArgs)"/>
            <lastupdated>6/26/2003 12:29:35 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ControlBase.HoverIntervalChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.HoverInterval"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.HoverInterval"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlBase.OnHoverIntervalChanged(System.EventArgs)"/>
            <lastupdated>7/8/2004 3:39:58 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ControlBase.InnerBoundsChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.InnerBounds"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.InnerBounds"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlBase.OnInnerBoundsChanged(System.EventArgs)"/>
            <lastupdated>7/8/2004 3:40:08 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ControlBase.BeforeDrawCaption">
            <summary>
            Occurs before the caption is drawn.
            </summary>
            <remarks>
            You can use <see cref="E:NationalInstruments.UI.WindowsForms.ControlBase.BeforeDrawCaption"/> to participate in the drawing of
            the <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.Caption"/>. The event occurs before the control begins to draw 
            the caption, but after the <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.CaptionBackColor"/> has already drawn. 
            Set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property of the event argument to 
            <see langword="true"/> to cancel drawing of the caption. Cancelling the drawing of the caption prevents the 
            caption from being drawn. If you set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.ControlBase.BeforeDrawCaption"/> is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.ControlBase.AfterDrawCaption"/> event is not raised. You must provide all of 
            the implementation for drawing the caption if <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to 
            <see langword="true"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlBase.OnBeforeDrawCaption(NationalInstruments.UI.BeforeDrawCaptionEventArgs)"/>
            <seealso cref="E:NationalInstruments.UI.IControlBase.AfterDrawCaption"/>
            <lastupdated>11/11/2003 11:51:12 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ControlBase.AfterDrawCaption">
            <summary>
            Occurs after the caption is drawn.
            </summary>
            <remarks>
            You can use <see cref="E:NationalInstruments.UI.WindowsForms.ControlBase.AfterDrawCaption"/> to participate in the drawing
            of the caption. The event occurs after the control has completed drawing the caption. You can use this event in 
            conjunction with custom drawing to annotate the caption. If you set the 
            <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property to <see langword="true"/> in the event 
            arguments of the <see cref="E:NationalInstruments.UI.WindowsForms.ControlBase.BeforeDrawCaption"/> event, this event is not 
            raised.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlBase.OnAfterDrawCaption(NationalInstruments.UI.AfterDrawCaptionEventArgs)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ControlBase.BeforeDrawCaption"/>
            <lastupdated>11/11/2003 11:50:20 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.System#ComponentModel#ISupportInitialize#BeginInit">
            <exclude/>
            <lastupdated>1/23/2009 5:24:30 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.BeginInit">
            <summary>
            Signals to the object that initialization is beginning.
            </summary>
            <lastupdated>3/15/2006 1:21:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.System#ComponentModel#ISupportInitialize#EndInit">
            <exclude/>
            <lastupdated>1/23/2009 5:24:31 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ControlBase.EndInit">
            <summary>
            Signals to the object that initialization is complete.
            </summary>
            <lastupdated>3/15/2006 1:21:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ControlBase.NationalInstruments#UI#IControlBase#IsDisposed">
            <exclude/>
            <lastupdated>1/23/2009 5:24:27 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph">
            <summary>
            Represents the class for Measurement Studio Windows Forms graphs that accept
            <see cref="T:NationalInstruments.DigitalWaveform"/> data.
            </summary>
            <threadsafety safety="control"/>
            <remarks>
            	<para>A <see cref="T:NationalInstruments.DigitalWaveform"/> data type represents a set of 
            digital states that are grouped by samples or signals.</para>
            	<para>
            You can use the <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.Plots"/>  collection to include multiple <see cref="T:NationalInstruments.UI.DigitalWaveformPlot"/> instances on a single graph. With multiple plots, you can plot multiple sets of data in the same plot area. 
            Use <see cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotWaveform(NationalInstruments.DigitalWaveform)"/> to plot a waveform and 
            <see cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotWaveforms(NationalInstruments.DigitalWaveform[])"/> to plot an array of 
            <see cref="T:NationalInstruments.DigitalWaveform"/> data.</para>
            	<para>Use
            <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotHeight"/> to control the height in pixels of the digital plots.
            Use <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.SignalPlotPadding"/> to specify the amount of
            space in pixels between signal plots and use <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.WaveformPlotPadding"/>
            to specify the distance in pixels between waveform plots.  
            </para>
            	<para>
            		You can enable or disable the mode of the horizontal or vertical scroll bar with <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HorizontalScrollMode"/> and 
            <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.VerticalScrollMode"/>, respectively.
            Use <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HorizontalScrollPosition"/> to place the horizontal scroll bar at the top or bottom of the plot area. 
            Use <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.VerticalScrollPosition"/> to place the vertical scroll bar to the left or right of the plot area.
            Use <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarStyle"/> to customize the appearance of the scroll bar.
            </para>
            	<para>
            Use <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.XAxis"/> and <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.YAxis"/>
            to configure the digital x and y axes. 
            </para>
            	<para>
            		You can use <see cref="P:NationalInstruments.UI.IDigitalWaveformGraph.BindingData"/> to bind the graph to a data source.
            </para>
            	<note type="note">
            For more information about the digital waveform graph control, refer to <see keyword="UsingNINETGraphWinForms" keywordType="mstudio">Using the Measurement Studio Windows Forms Graph .NET Controls</see> or 
            <see keyword="KeyNETDigitalWaveformGraphFeaturesWinForms" keywordType="mstudio">Key Measurement Studio Windows Forms Digital Waveform Graph .NET Control Features</see>.
            </note>
            </remarks>
            <lastupdated>9/17/2008 4:07:19 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph"/> class.
            </summary>
            <lastupdated>6/1/2005 2:06:28 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.Plots">
            <summary>
            Gets the collection of digital waveform plots on the graph.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.DigitalWaveformPlotCollection"/> that contains the
            <see cref="T:NationalInstruments.UI.DigitalWaveformPlot"/> objects on the graph.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>9/27/2011 1:42:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.WaveformPlotTemplate">
            <summary>
            Gets the waveform plot template to use for creating new waveform plots.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.DigitalWaveformPlot"/> template.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	The <see cref="T:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph"/> uses the <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.WaveformPlotTemplate"/>
            to create waveform plots if the number of digital waveforms being plotted
            by <see cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotWaveform(NationalInstruments.DigitalWaveform)"/> or
            <see cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotWaveforms(NationalInstruments.DigitalWaveform[])"/> is greater than the number of 
            <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.Plots"/>.
            </remarks>
            <lastupdated>9/27/2011 1:42:34 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.SignalPlotTemplate">
            <summary>
            Gets the signal plot template to use as a template for creating new signal plots.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.DigitalSignalPlot"/> template.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	The <see cref="T:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph"/> uses the <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.SignalPlotTemplate"/>
            if the number of signals in a digital waveform being plotted
            by <see cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotWaveform(NationalInstruments.DigitalWaveform)"/> or
            <see cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotWaveforms(NationalInstruments.DigitalWaveform[])"/> is greater than the number of 
            <see cref="P:NationalInstruments.UI.DigitalWaveformPlot.SignalPlots"/>.
            </remarks>
            <lastupdated>9/27/2011 1:43:07 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.DisplayMode">
            <summary>
            Gets or sets whether the graph displays waveforms and signals or displays only signals.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.DigitalWaveformGraphDisplayMode"/> of the graph.
            The default value is <see cref="F:NationalInstruments.UI.DigitalWaveformGraphDisplayMode.WaveformAndSignals"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:NationalInstruments.UI.DigitalWaveformGraphDisplayMode"/> value.
            </exception>
            <lastupdated>9/27/2011 1:41:20 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ShowGroupLines">
            <summary>
            Gets or sets whether the lines that group the signals of the waveform are displayed. </summary>
            <value>
            	<see langword="true"/> to display group lines. The default value is <see langword="true"/>. 
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>8/11/2005 10:57:04 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.InteractionMode">
            <summary>
            Gets or sets the user interactions that are supported by the graph.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.DigitalWaveformGraphInteractionModes"/> that indicates which user
            interaction modes are supported by the graph. The default value is a bitwise combination of
            <see cref="F:NationalInstruments.UI.DigitalWaveformGraphInteractionModes.ZoomX"/>,
            <see cref="F:NationalInstruments.UI.DigitalWaveformGraphInteractionModes.ZoomAroundPoint"/>,
            <see cref="F:NationalInstruments.UI.DigitalWaveformGraphInteractionModes.PanX"/>,
            <see cref="F:NationalInstruments.UI.DigitalWaveformGraphInteractionModes.PanY"/>,
            <see cref="F:NationalInstruments.UI.DigitalWaveformGraphInteractionModes.EditRange"/>, and
            <see cref="F:NationalInstruments.UI.DigitalWaveformGraphInteractionModes.CollapseSignals"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            Set <see cref="P:System.Windows.Forms.Control.Enabled"/> to <see langword="true"/> to enable 
            interaction. If <see cref="P:System.Windows.Forms.Control.Enabled"/> is <see langword="false"/>,
            the <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.InteractionMode"/> property has no
            effect regardless of its value. The control must have focus to enable interaction with the use of modifier keys.
            </para>
            </remarks>
            <lastupdated>9/30/2005 1:39:47 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.InteractionMouseCursors">
            <summary>
            Gets the collection of properties that you can use to customize mouse cursors for different interactions with the digital waveform graph control.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.DigitalWaveformGraphInteractionMouseCursors"/> that you use to customize mouse cursors for different interactions.
            The default value is the collection with all properties within the collection set to default values.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>9/17/2008 4:08:09 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.InteractionModeDefault">
            <summary>
            Gets or sets the user interaction that is enabled on the graph without the use of a modifier key.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.DigitalWaveformGraphDefaultInteractionMode"/> that
            represents the user interaction that is enabled on the graph without the use of a modifier key. The default value is
            <see cref="F:NationalInstruments.UI.DigitalWaveformGraphDefaultInteractionMode.None"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.InteractionModeDefault"/> determines the default
            interaction of the graph. Unlike <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.InteractionMode"/>,
            the user is not required to press any modifier keys to interact with the graph when
            <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.InteractionModeDefault"/> is set to a value
            other than <see cref="F:NationalInstruments.UI.GraphDefaultInteractionMode.None"/>. For example,
            if <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.InteractionModeDefault"/> is set to
            <see cref="F:NationalInstruments.UI.DigitalWaveformGraphDefaultInteractionMode.ZoomX"/>, the user is not
            required to press the <entity value="lt"/>Shift<entity value="gt"/> key to zoom with a selection rectangle in the plot area
            of the graph.
            <para>
            The value of <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.InteractionModeDefault"/> is independent of
            the value of <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.InteractionMode"/>. For example,
            <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.InteractionModeDefault"/> can be set to
            <see cref="F:NationalInstruments.UI.DigitalWaveformGraphDefaultInteractionMode.ZoomX"/> to allow users to
            zoom with a selection rectangle while <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.InteractionMode"/>
            can be set to a bitwise combination of <see cref="F:NationalInstruments.UI.DigitalWaveformGraphInteractionModes.PanX"/> and
            <see cref="F:NationalInstruments.UI.DigitalWaveformGraphInteractionModes.PanY"/> to allow panning in the horizontal
            and vertical directions.
            </para>
            </remarks>
            <lastupdated>8/11/2005 10:56:42 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.XAxis">
            <summary>
            Gets the x-axis for the digital waveform graph.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.DigitalXAxis"/> for the
            <see cref="T:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>6/1/2005 2:05:30 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.YAxis">
            <summary>
            Gets the y-axis for the digital waveform graph.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.DigitalYAxis"/> for the
            <see cref="T:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>6/1/2005 2:05:41 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarBackColor">
            <summary>
            Gets or sets the background color of the horizontal or vertical scroll bar.
            </summary>
            <value>
            The background <see cref="T:System.Drawing.Color"/> of the scroll bar. The default value is
            <see cref="F:System.Drawing.Color.Empty"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarBackColor"/>
             is an ambient property. You can retrieve the property value, if not set, from <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackColor"/>. 
            Set <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarBackColor"/> to <see cref="F:System.Drawing.Color.Empty"/>
            to enable ambient behavior.
            </remarks>
            <lastupdated>8/11/2005 10:56:53 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarForeColor">
            <summary>
            Gets or sets the foreground color of the horizontal or vertical scroll bar.
            </summary>
            <value>
            The foreground <see cref="T:System.Drawing.Color"/> of the scroll bar. The default value is
            <see cref="F:System.Drawing.Color.Empty"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarForeColor"/>
             is an ambient property. You can retrieve the property value, if not set, from <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.ForeColor"/>. 
            Set <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarForeColor"/> to <see cref="F:System.Drawing.Color.Empty"/>
            to enable ambient behavior.
            </remarks>
            <lastupdated>8/11/2005 10:56:56 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarStyle">
            <summary>
            Gets or sets the style of the horizontal or vertical scroll bar.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.ScrollBarStyle"/> for the scroll bars.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <lastupdated>8/11/2005 10:57:01 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.VerticalScrollPosition">
            <summary>
            Gets or sets the scroll position of the vertical scroll bar to the left or right of the plot area.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.VerticalScrollPosition"/> of the vertical scroll bar. The default
            value is <see cref="F:NationalInstruments.UI.VerticalScrollPosition.Right"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:NationalInstruments.UI.VerticalScrollPosition"/> value.
            </exception>
            <lastupdated>9/27/2011 1:41:49 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.VerticalScrollMode">
            <summary>
            Gets or sets whether the vertical scroll bar is enabled or disabled.</summary>
            <value>
            The <see cref="T:NationalInstruments.UI.ScrollMode"/> of the vertical scroll bar. The default value is
            <see cref="F:NationalInstruments.UI.ScrollMode.Visible"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:NationalInstruments.UI.ScrollMode"/> value.
            </exception>
            <lastupdated>9/27/2011 1:42:06 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HorizontalScrollPosition">
            <summary>
            Gets or sets the scroll position of the horizontal scroll bar at the top or bottom of the plot area.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.HorizontalScrollPosition"/> of the horizontal scroll bar. The default
            value is <see cref="F:NationalInstruments.UI.HorizontalScrollPosition.Bottom"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:NationalInstruments.UI.HorizontalScrollPosition"/> value.
            </exception>
            <lastupdated>9/27/2011 1:41:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HorizontalScrollMode">
            <summary>
            Gets or sets whether the horizontal scroll bar is enabled or disabled.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.ScrollMode"/> of the horizontal scroll bar. The default value is
            <see cref="F:NationalInstruments.UI.ScrollMode.Auto"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:NationalInstruments.UI.ScrollMode"/> value.
            </exception>
            <lastupdated>9/27/2011 1:41:56 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.SignalPlotPadding">
            <summary>
            Gets or sets the amount of space in pixels between the signal plots.
            </summary>
            <value>
            The amount of space in pixels between signal plots. The default value is
            <format type="monospace">10</format> pixels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than zero.
            </exception>
            <lastupdated>6/2/2005 3:52:57 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.WaveformPlotPadding">
            <summary>
            Gets or sets the amount of space in pixels between the waveform plots.
            </summary>
            <value>
            The amount of space in pixels between waveform plots. The default value is
            <format type="monospace">10</format> pixels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than zero.
            </exception>
            <lastupdated>6/2/2005 3:53:44 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotHeight">
            <summary>
            Gets or sets the height of the digital plot in pixels. 
            </summary>
            <value>
            The height of the digital plot in pixels. The default value is
            <format type="monospace">20</format> pixels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than zero.
            </exception>
            <lastupdated>8/11/2005 10:56:46 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotHeightIncrement">
            <summary>
            Gets or sets the value the graph uses to increase or decrease the plot height of the digital waveform graph.
            </summary>
            <value>
            The plot height increment in pixels. The default value is
            2 pixels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than zero.
            </exception>
            <remarks>
            When <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.InteractionMode"/> is set to
            <see cref="F:NationalInstruments.UI.DigitalWaveformGraphInteractionModes.PanX"/> or
            <see cref="F:NationalInstruments.UI.DigitalWaveformGraphInteractionModes.PanY"/> and the control key is pressed down, scrolling the mouse
            wheel increases or decreases <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotHeight"/> by 
            <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotHeightIncrement"/>.
            </remarks>
            <lastupdated>9/28/2005 5:11:35 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GroupLineColor">
            <summary>
            Gets or sets the color of the lines that group the signals of the waveform.
            </summary>
            <value>
            The <see cref="T:System.Drawing.Color"/> of the group line. The default value is 
            <see cref="P:System.Drawing.SystemColors.ControlDark"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>9/27/2011 1:43:59 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GroupNodeColor">
            <summary>
            Gets or sets the color of the node next to the waveform plot that expands or collapses the signals of the waveform. 
            </summary>
            <value>
            The <see cref="T:System.Drawing.Color"/> of the group node. The default value is
            <see cref="P:System.Drawing.Color.Black"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>9/27/2011 1:43:49 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotLabelMode">
            <summary>
            Gets or sets the plot label mode that determines where the labels for the
            digital plots come from.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.DigitalPlotLabelMode"/> of the digital graph. The default value is
            <see cref="P:NationalInstruments.UI.DigitalPlotLabelMode.WaveformOrPlots"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <remarks>
            	<see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotLabelMode"/> determines where the labels for the
            digital plots come from. For example, if <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotLabelMode"/> is
            set to <see cref="P:NationalInstruments.UI.DigitalPlotLabelMode.Plots"/>, then the plot labels are retrieved from
            <see cref="P:NationalInstruments.UI.DigitalPlot.Label"/>.
            </remarks>
            <lastupdated>9/27/2011 1:43:13 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GetWaveforms">
            <summary>
            Returns a <see cref="T:NationalInstruments.DigitalWaveform"/> array containing <see cref="T:NationalInstruments.DigitalWaveform"/> references.
            </summary>
            <returns>
            A <see cref="T:NationalInstruments.DigitalWaveform"/> array containing <see cref="T:NationalInstruments.DigitalWaveform"/> references.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            The digital waveforms returned are referenced and not copied; therefore, if a <see cref="T:NationalInstruments.DigitalWaveform"/> changes,
            the <see cref="T:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph"/> updates to reflect the new values.
            </remarks>
            <example>The following example demonstrates getting all the <see cref="T:NationalInstruments.DigitalWaveform"/> objects associated with a <see cref="T:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph" crefType="Unqualified"/> object and printing the states of each waveform to debug output. 
            <code lang="VB.NET">
            Dim waves As DigitalWaveform()
             
            waves = digiGraph.GetWaveforms()
             
            For Each wave As DigitalWaveform In waves
                Debug.WriteLine(wave.ChannelName + ": ")
                For Each signal As DigitalWaveformSignal In wave.Signals
                    Dim i As Integer = 0
                    Debug.Write(vbTab + signal.Name &amp; ": ")
                    For Each state As DigitalState In signal.States
                        If (i Mod 10) &lt;&gt; 0 Then
                            Debug.Write(state.ToString() &amp; " ")
                        Else
                            Debug.Write(Environment.NewLine &amp; vbTab &amp; vbTab &amp; state.ToString() &amp; " ")
                        End If
                        i += 1
                    Next
                    Debug.Write(Environment.NewLine)
                Next
            Next
            </code>
            </example>
            <example>
            	<code lang="C#">
            DigitalWaveform[] waves;
             
            waves = digiGraph.GetWaveforms();
             
            foreach (DigitalWaveform wave in waves)
            {
                Debug.WriteLine(wave.ChannelName + ": ");
                foreach (DigitalWaveformSignal signal in wave.Signals)
                {
                    int i = 0;
                    Debug.Write("\t" + signal.Name + ": ");
                    foreach (DigitalState state in signal.States)
                    {
                        if ((i % 10) != 0)
                            Debug.Write(state.ToString() + " ");
                        else
                            Debug.Write(Environment.NewLine + "\t\t" + state.ToString() + " ");
                        i++;
                    }
                    Debug.Write(Environment.NewLine);
                }
            }
            </code>
            </example>
            <lastupdated>10/5/2010 1:57:05 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ExpandSignals">
            <summary>
            Expands all digital signals on each digital waveform plot. 
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>6/1/2005 2:07:09 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.CollapseSignals">
            <summary>
            Collapses all digital signals on each digital waveform plot. 
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <example>
            	<code lang="VB.NET">
            digiGraph.CollapseSignals()
            </code>
            </example>
            <example>
            	<code lang="C#">
            digiGraph.CollapseSignals();
            </code>
            </example>
            <lastupdated>10/3/2010 7:25:59 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HitTest(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:NationalInstruments.UI.DigitalWaveformGraphHitTestInfo"/> that specifies
            where on the control the specified point is located.
            </summary>
            <param name="x">
            The horizontal location of the point to be hit-tested, in client coordinates.
            </param>
            <param name="y">
            The vertical location of the point to be hit-tested, in client coordinates.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.UI.DigitalWaveformGraphHitTestInfo"/> that specifies where on
            the control the <paramref name="x"/> and <paramref name="y"/> coordinate is located.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	If <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.HitTest(System.Int32,System.Int32)"/> indicates an object exists, you can use
            <see cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GetWaveformPlotAt(System.Int32,System.Int32)"/> and
            <see cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GetSignalPlotAt(System.Int32,System.Int32)"/>
            to obtain a reference to the object.
            </remarks>
            <example>The following example demonstrates using the <see cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/> method to determine where a user clicked on a <see cref="T:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph" crefType="Unqualified"/> object. 
            <code lang="VB.NET">
            Public Sub DigitalGraph_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
                Dim hitTestRegion As DigitalWaveformGraphHitTestInfo
                Dim waveformIndex As Integer, sampleIndex As Integer, signalIndex As Integer
                Dim randomColor As Color = Color.FromArgb(RandNumberGenerator.[Next](255), RandNumberGenerator.[Next](255), RandNumberGenerator.[Next](255))
             
                hitTestRegion = digiGraph.HitTest(e.X, e.Y)
             
                Select Case hitTestRegion
                    Case DigitalWaveformGraphHitTestInfo.HorizontalScrollBar
                        Debug.WriteLine("Horizontal scrollbar selected")
                        Exit Select
                    Case DigitalWaveformGraphHitTestInfo.PlotArea
                        Debug.WriteLine("Plot area selected")
                        Exit Select
                    Case DigitalWaveformGraphHitTestInfo.SignalPlot
                        Dim signalPlot As DigitalSignalPlot
                        Dim theState As DigitalState
             
                        signalPlot = digiGraph.GetSignalPlotAt(e.X, e.Y, theState, waveformIndex, sampleIndex, signalIndex)
                        signalPlot.LineColor = randomColor
                        Debug.WriteLine("Signal plot selected")
                        Debug.WriteLine(String.Format("Sample {0} in signal {1} of waveform {2} has state {3}", sampleIndex, signalIndex, waveformIndex, theState.ToString()))
                        Exit Select
                    Case DigitalWaveformGraphHitTestInfo.VerticalScrollBar
                        Debug.WriteLine("Vertical scrollbar selected")
                        Exit Select
                    Case DigitalWaveformGraphHitTestInfo.WaveformPlot
                        Dim sample As DigitalWaveformSample = Nothing
                        Dim plot As DigitalWaveformPlot
                        Dim states As New List(Of String)(10)
             
                        plot = digiGraph.GetWaveformPlotAt(e.X, e.Y, sample, waveformIndex, sampleIndex)
                        plot.LineColor = randomColor
                        For Each state As DigitalState In sample.States
                            states.Add(state.ToString())
                        Next
                        Debug.WriteLine("Waveform plot selected")
                        Debug.WriteLine(String.Format("Waveform {0}'s sample number {1} has states {2}", waveformIndex, sampleIndex, String.Join(" ", states.ToArray())))
                        Exit Select
                    Case DigitalWaveformGraphHitTestInfo.XAxis
                        digiGraph.XAxis.CaptionBackColor = randomColor
                        Debug.WriteLine("XAxis selected")
                        Debug.WriteLine(String.Format("X Axis range minimum is {0}, XAxis range maximum is {1}", digiGraph.XAxis.Range.Minimum, digiGraph.XAxis.Range.Maximum))
                        Exit Select
                    Case DigitalWaveformGraphHitTestInfo.YAxis
                        Debug.WriteLine("YAxis selected")
                        Debug.WriteLine(String.Format("The major divisions grid is {0}visible{1}The minor divisions grid is {2}visible", If(digiGraph.YAxis.MajorGridVisible, "", "not "), Environment.NewLine, If(digiGraph.YAxis.MinorGridVisible, "", "not ")))
                        Exit Select
                End Select
            End Sub
            </code>
            </example>
            <example>The following example demonstrates using the HitTest method to determine where a user clicked on a DigitalWaveformGraph object. 
            <code lang="C#">
            public void DigitalGraph_MouseDown(object sender, MouseEventArgs e)
            {
                DigitalWaveformGraphHitTestInfo hitTestRegion;
                int waveformIndex, sampleIndex, signalIndex;
                Color randomColor = Color.FromArgb(RandNumberGenerator.Next(255),
                                                    RandNumberGenerator.Next(255),
                                                    RandNumberGenerator.Next(255));
             
                hitTestRegion = digiGraph.HitTest(e.X, e.Y);
             
                switch (hitTestRegion)
                {
                    case DigitalWaveformGraphHitTestInfo.HorizontalScrollBar:
                        Debug.WriteLine("Horizontal scrollbar selected");
                        break;
                    case DigitalWaveformGraphHitTestInfo.PlotArea:
                        Debug.WriteLine("Plot area selected");
                        break;
                    case DigitalWaveformGraphHitTestInfo.SignalPlot:
                        DigitalSignalPlot signalPlot;
                        DigitalState theState;
             
                        signalPlot = digiGraph.GetSignalPlotAt(e.X, e.Y, out theState, out waveformIndex,
                                                                out sampleIndex, out signalIndex);
                        signalPlot.LineColor = randomColor;
                        Debug.WriteLine("Signal plot selected");
                        Debug.WriteLine(string.Format("Sample {0} in signal {1} of waveform {2} has state {3}",
                                                        sampleIndex, signalIndex, waveformIndex, theState.ToString()));
                        break;
                    case DigitalWaveformGraphHitTestInfo.VerticalScrollBar:
                        Debug.WriteLine("Vertical scrollbar selected");
                        break;
                    case DigitalWaveformGraphHitTestInfo.WaveformPlot:
                        DigitalWaveformSample sample;
                        DigitalWaveformPlot plot;
                        List&lt;string&gt; states = new List&lt;string&gt;(10);
             
                        plot = digiGraph.GetWaveformPlotAt(e.X, e.Y, out sample, out waveformIndex, out sampleIndex);
                        plot.LineColor = randomColor;
                        foreach (DigitalState state in sample.States)
                            states.Add(state.ToString());
                        Debug.WriteLine("Waveform plot selected");
                        Debug.WriteLine(string.Format("Waveform {0}'s sample number {1} has states {2}",
                                        waveformIndex, sampleIndex, string.Join(" ", states.ToArray&lt;string&gt;())));
                        break;
                    case DigitalWaveformGraphHitTestInfo.XAxis:
                        digiGraph.XAxis.CaptionBackColor = randomColor;
                        Debug.WriteLine("XAxis selected");
                        Debug.WriteLine(string.Format("X Axis range minimum is {0}, XAxis range maximum is {1}",
                                                        digiGraph.XAxis.Range.Minimum, digiGraph.XAxis.Range.Maximum));
                        break;
                    case DigitalWaveformGraphHitTestInfo.YAxis:
                        Debug.WriteLine("YAxis selected");
                        Debug.WriteLine(string.Format("The major divisions grid is {0}visible{1}The minor divisions grid is {2}visible",
                                                        digiGraph.YAxis.MajorGridVisible ? "" : "not ",
                                                        Environment.NewLine,
                                                        digiGraph.YAxis.MinorGridVisible ? "" : "not "));
                        break;
                }
            }
            </code>
            </example>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GetWaveformPlotAt(System.Int32,System.Int32)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GetSignalPlotAt(System.Int32,System.Int32)"/>
            <lastupdated>10/5/2010 9:32:34 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GetSignalPlotAt(System.Int32,System.Int32)">
            <summary>
            Gets the digital signal plot at the specified location.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for a signal plot.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for a signal plot.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.DigitalSignalPlot"/> at the specified location. If 
            there is no signal plot at the specified location, the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            </remarks>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HitTest(System.Int32,System.Int32)"/>
            <lastupdated>8/11/2005 5:37:11 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GetSignalPlotAt(System.Int32,System.Int32,NationalInstruments.DigitalState@)">
            <summary>
            Gets the digital signal plot at the specified location along with the corresponding <see cref="T:NationalInstruments.DigitalState"/>.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for a signal plot.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for a signal plot.
            </param>
            <param name="state">
            Upon return, contains the <see cref="T:NationalInstruments.DigitalState"/> value at the specified location.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.DigitalSignalPlot"/> at the specified location. If 
            there is no signal plot at the specified location, the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            </remarks>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HitTest(System.Int32,System.Int32)"/>
            <lastupdated>8/11/2005 5:37:25 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GetSignalPlotAt(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the digital signal plot at the specified location along with the corresponding waveform index, sample index,
            and signal index. 
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for a signal plot.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for a signal plot.
            </param>
            <param name="waveformIndex">
            Upon return, contains the index of the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </param>
            <param name="sampleIndex">
            Upon return, contains the <see cref="T:NationalInstruments.DigitalWaveform"/> index of the sample.
            </param>
            <param name="signalIndex">
            Upon return, contains the <see cref="T:NationalInstruments.DigitalWaveform"/> index of the signal.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.DigitalSignalPlot"/> at the specified location. If 
            there is no signal plot at the specified location, the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            </remarks>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HitTest(System.Int32,System.Int32)"/>
            <lastupdated>8/11/2005 5:37:42 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GetSignalPlotAt(System.Int32,System.Int32,NationalInstruments.DigitalState@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the digital signal plot at the specified location along with the corresponding <see cref="T:NationalInstruments.DigitalState"/>, 
            waveform index, sample index, and signal index. 
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for a signal plot.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for a signal plot.
            </param>
            <param name="state">
            Upon return, contains the <see cref="T:NationalInstruments.DigitalState"/> value at the specified location.
            </param>
            <param name="waveformIndex">
            Upon return, contains the index of the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </param>
            <param name="sampleIndex">
            Upon return, contains the <see cref="T:NationalInstruments.DigitalWaveform"/> index of the sample.
            </param>
            <param name="signalIndex">
            Upon return, contains the <see cref="T:NationalInstruments.DigitalWaveform"/> index of the signal.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.DigitalSignalPlot"/> at the specified location. If 
            there is no signal plot at the specified location, the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            <para>
            For an example of <see cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GetSignalPlotAt(System.Int32,System.Int32)" crefType="Unqualified"/>, refer to <see cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/>.
            </para>
            </remarks>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HitTest(System.Int32,System.Int32)"/>
            <lastupdated>10/2/2010 4:51:02 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GetWaveformPlotAt(System.Int32,System.Int32)">
            <summary>
            Gets the digital waveform plot at the specified location.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for a waveform plot.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for a waveform plot.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.DigitalWaveformPlot"/> at the specified location. If 
            there is no waveform plot at the specified location, the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            </remarks>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HitTest(System.Int32,System.Int32)"/>
            <lastupdated>8/11/2005 5:37:56 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GetWaveformPlotAt(System.Int32,System.Int32,NationalInstruments.DigitalWaveformSample@)">
            <summary>
            Gets the digital waveform plot at the specified location along with the corresponding <see cref="T:NationalInstruments.DigitalWaveformSample"/>.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for a waveform plot.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for a waveform plot.
            </param>
            <param name="sample">
            Upon return, contains the <see cref="T:NationalInstruments.DigitalWaveformSample"/> at the specified location.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.DigitalWaveformPlot"/> at the specified location. If 
            there is no waveform plot at the specified location, the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            </remarks>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HitTest(System.Int32,System.Int32)"/>
            <lastupdated>8/11/2005 5:38:11 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GetWaveformPlotAt(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the digital waveform plot at the specified location along with the corresponding waveform index and sample index.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for a waveform plot.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for a waveform plot.
            </param>
            <param name="waveformIndex">
            Upon return, contains the index of the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </param>
            <param name="sampleIndex">
            Upon return, contains the <see cref="T:NationalInstruments.DigitalWaveform"/> index of the sample.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.DigitalWaveformPlot"/> at the specified location. If 
            there is no waveform plot at the specified location, the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            </remarks>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HitTest(System.Int32,System.Int32)"/>
            <lastupdated>8/11/2005 5:38:25 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GetWaveformPlotAt(System.Int32,System.Int32,NationalInstruments.DigitalWaveformSample@,System.Int32@,System.Int32@)">
            <summary>
            Gets the digital waveform plot at the specified location along with the corresponding <see cref="T:NationalInstruments.DigitalWaveformSample"/>, 
            waveform index, and sample index.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for a waveform plot.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for a waveform plot.
            </param>
            <param name="sample">
            Upon return, contains the <see cref="T:NationalInstruments.DigitalWaveformSample"/> at the specified location.
            </param>
            <param name="waveformIndex">
            Upon return, contains the index of the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </param>
            <param name="sampleIndex">
            Upon return, contains the <see cref="T:NationalInstruments.DigitalWaveform"/> index of the sample.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.DigitalWaveformPlot"/> at the specified location. If 
            there is no waveform plot at the specified location, the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            <para>
            For an example of <see cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GetWaveformPlotAt(System.Int32,System.Int32)" crefType="Unqualified"/>, refer to <see cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/>.
            </para>
            </remarks>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HitTest(System.Int32,System.Int32)"/>
            <lastupdated>10/2/2010 4:52:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GetService(System.Type)">
            <summary>
            Returns an object that represents a service provided by the control or by the control container.
            </summary>
            <param name="serviceType">
            A service provided by the control.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents a service provided by the control.  This value is
            <see langword="null"/> if the control does not provide the specified service.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>9/1/2005 11:41:00 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            </remarks>
            <seealso cref="M:System.IDisposable.Dispose"/>
            <seealso cref="T:System.IDisposable"/>
            <lastupdated>6/1/2005 2:06:21 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotWaveform(NationalInstruments.DigitalWaveform)">
            <summary>
            Plots a <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </summary>
            <param name="waveform">
            The <see cref="T:NationalInstruments.DigitalWaveform"/> to plot.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<see cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotWaveform(NationalInstruments.DigitalWaveform)"/> does not copy the <see cref="T:NationalInstruments.DigitalWaveform"/> when it is plotted. 
            You improve plot performance, especially when dealing with large digital waveforms, by not copying the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            In this case, the <see cref="T:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph"/> updates when the <see cref="T:NationalInstruments.DigitalWaveform"/> changes. 
            <note type="note">
            The default <see cref="P:NationalInstruments.UI.DigitalXAxis.Mode"/> on the digital x-axis is <see cref="F:NationalInstruments.UI.DigitalAxisMode.Fixed"/>. 
             If you zoom or pan to an area and then plot new data, you might not see any data in the plot area. To view the data, consider calling <see cref="M:NationalInstruments.UI.WindowsForms.Graph.ResetZoomPan"/> or set the <see cref="P:NationalInstruments.UI.DigitalXAxis.Range"/> of the digital x-axis to the original values.
            </note>
            </remarks>
            <example>The following example demonstrates plotting a digital waveform to a <see cref="T:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph" crefType="Unqualified"/> object. 
            <code lang="VB.NET">
            Dim wave As DigitalWaveform = Nothing
             
            ' Get some DigitalWaveform data.
            GenerateRandomDigitalWaveformData(wave)
            digiGraph.PlotWaveform(wave)
            </code>
            </example>
            <example>
            	<code lang="C#">
             
            DigitalWaveform wave;
             
            // Get some DigitalWaveform data.
            GenerateRandomDigitalWaveformData(out wave);
            digiGraph.PlotWaveform(wave);
            </code>
            </example>
            <lastupdated>4/2/2012 1:04:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotWaveform(NationalInstruments.DigitalWaveform,System.Boolean)">
            <summary>
            Plots a <see cref="T:NationalInstruments.DigitalWaveform"/> with the choice to copy the digital waveform.
            </summary>
            <param name="waveform">
            The <see cref="T:NationalInstruments.DigitalWaveform"/> to plot.
            </param>
            <param name="copyWaveform">
            Whether to copy the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            Setting <paramref name="copyWaveform"/> to <see langword="true"/> copies the <see cref="T:NationalInstruments.DigitalWaveform"/>
            when it is plotted. By copying the <see cref="T:NationalInstruments.DigitalWaveform"/>, plotted data remains constant
            when changes are made to the <see cref="T:NationalInstruments.DigitalWaveform"/>. Copying large digital waveforms decreases plotting performance.
            </para>
            	<para>
            Setting <paramref name="copyWaveform"/> to <see langword="false"/> does not copy the <see cref="T:NationalInstruments.DigitalWaveform"/>
            when it is plotted. You improve plot performance, especially when dealing with large digital waveforms, by not copying the <see cref="T:NationalInstruments.DigitalWaveform"/>.
            In this case, <see cref="T:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph"/> updates when the <see cref="T:NationalInstruments.DigitalWaveform"/> changes. 
             
            </para>
            	<note type="note">
            The deafult <see cref="P:NationalInstruments.UI.DigitalXAxis.Mode"/> on the digital x-axis is <see cref="F:NationalInstruments.UI.DigitalAxisMode.Fixed"/>. 
             If you zoom or pan to an area and then plot new data, you might not see any data in the plot area. Consider calling <see cref="M:NationalInstruments.UI.WindowsForms.Graph.ResetZoomPan"/> or setting <see cref="P:NationalInstruments.UI.DigitalXAxis.Range"/> of the digital x-axis to view the data in the plot area.
            </note>
            </remarks>
            <example>The following example demonstrates plotting a digital waveform to a <see cref="T:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph" crefType="Unqualified"/> object and electing to create a copy of the <see cref="T:NationalInstruments.DigitalWaveform"/> object for the purpose of plotting. 
            <code lang="VB.NET">
            Dim wave As DigitalWaveform = Nothing
             
            ' Get some DigitalWaveform data.
            GenerateRandomDigitalWaveformData(wave)
            'Passing value of true copies the wave array when plotted. 
            digiGraph.PlotWaveform(wave, True)
            </code>
            </example>
            <example>
            	<code lang="C#">
            DigitalWaveform wave;
             
            // Get some DigitalWaveform data.
            GenerateRandomDigitalWaveformData(out wave);
            //Copies the DigitalWaveform when it is plotted. 
            digiGraph.PlotWaveform(wave, true);
            </code>
            </example>
            <lastupdated>4/2/2012 1:04:31 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotWaveforms(NationalInstruments.DigitalWaveform[])">
            <summary>
            Plots a <see cref="T:NationalInstruments.DigitalWaveform"/> array.
            </summary>
            <param name="waveforms">
            The <see cref="T:NationalInstruments.DigitalWaveform"/> array to plot.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<see cref="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotWaveforms(NationalInstruments.DigitalWaveform[])"/> does not copy the <see cref="T:NationalInstruments.DigitalWaveform"/> array when it is plotted. 
            You improve plot performance, especially when dealing with large digital waveforms, by not copying the <see cref="T:NationalInstruments.DigitalWaveform"/> array.
            In this case, the <see cref="T:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph"/> updates when the <see cref="T:NationalInstruments.DigitalWaveform"/> array changes.  
            <note type="note">
            The deafult <see cref="P:NationalInstruments.UI.DigitalXAxis.Mode"/> on the digital x-axis is <see cref="F:NationalInstruments.UI.DigitalAxisMode.Fixed"/>. 
             If you zoom or pan to an area and then plot new data, you might not see any data in the plot area. Consider calling <see cref="M:NationalInstruments.UI.WindowsForms.Graph.ResetZoomPan"/> or setting <see cref="P:NationalInstruments.UI.DigitalXAxis.Range"/> of the digital x-axis to view the data in the plot area.
            </note>
            </remarks>
            <example>The following example demonstrates plotting a <see cref="T:NationalInstruments.DigitalWaveform"/>  array to a <see cref="T:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph" crefType="Unqualified"/> object. 
            <code lang="VB.NET">
            Dim waves As DigitalWaveform() = Nothing
             
            ' Get some DigitalWaveform data.
            GenerateRandomDigitalWaveformData(waves)
            digiGraph.PlotWaveforms(waves)
            </code>
            </example>
            <example>
            	<code lang="C#">
            DigitalWaveform[] waves;
             
            // Get some DigitalWaveform data.
            GenerateRandomDigitalWaveformData(out waves);
            digiGraph.PlotWaveforms(waves);
            </code>
            </example>
            <lastupdated>4/2/2012 1:04:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotWaveforms(NationalInstruments.DigitalWaveform[],System.Boolean)">
            <summary>
            Plots a <see cref="T:NationalInstruments.DigitalWaveform"/> array with the choice to copy the digital waveforms.
            </summary>
            <param name="waveforms">
            The <see cref="T:NationalInstruments.DigitalWaveform"/> array to plot.
            </param>
            <param name="copyWaveforms">
            Whether to copy the <see cref="T:NationalInstruments.DigitalWaveform"/> array.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            Setting <paramref name="copyWaveforms"/> to <see langword="true"/> copies the <see cref="T:NationalInstruments.DigitalWaveform"/>
            array when it is plotted. By copying the <see cref="T:NationalInstruments.DigitalWaveform"/> array, the plotted data remains constant
            when changes are made to the <see cref="T:NationalInstruments.DigitalWaveform"/>. Copying large digital waveforms decreases plotting performance.
            </para>
            	<para>
            Setting <paramref name="copyWaveforms"/> to <see langword="false"/> does not copy the <see cref="T:NationalInstruments.DigitalWaveform"/>
            array when it is plotted. You improve plot performance, especially when dealing with large digital waveforms, by not copying the <see cref="T:NationalInstruments.DigitalWaveform"/> array.
            In this case, the <see cref="T:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph"/> updates when the <see cref="T:NationalInstruments.DigitalWaveform"/> array changes. 
             
            </para>
            	<note type="note">
            The deafult <see cref="P:NationalInstruments.UI.DigitalXAxis.Mode"/> on the digital x-axis is <see cref="F:NationalInstruments.UI.DigitalAxisMode.Fixed"/>. 
             If you zoom or pan to an area and then plot new data, you might not see any data in the plot area. Consider calling <see cref="M:NationalInstruments.UI.WindowsForms.Graph.ResetZoomPan"/> or setting <see cref="P:NationalInstruments.UI.DigitalXAxis.Range"/> of the digital x-axis to view the data in the plot area.
            </note>
            </remarks>
            <example>The following example demonstrates plotting <see cref="T:NationalInstruments.DigitalWaveform"/> array to a <see cref="T:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph" crefType="Unqualified"/> object and electing to create a copy of the  <see cref="T:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph" crefType="Unqualified"/> objects for the purpose of plotting. 
            <code lang="VB.NET">
            Dim waves As DigitalWaveform() = Nothing
             
            ' Get some DigitalWaveform data.
            GenerateRandomDigitalWaveformData(waves)
            'Passing value of true copies the wave array when plotted. 
            digiGraph.PlotWaveforms(waves, True)
            </code>
            </example>
            <example>
            	<code lang="C#">
            DigitalWaveform[] waves;
             
            // Get some DigitalWaveform data.
            GenerateRandomDigitalWaveformData(out waves);
            //Passing value of true copies the wave array when plotted. 
            digiGraph.PlotWaveforms(waves, true);
            </code>
            </example>
            <lastupdated>4/2/2012 1:04:41 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.BindingData">
            <summary>
            Gets or sets the data when binding to a data source.
            </summary>
            <value>
            The data when binding to a data source.
            </value>
            <remarks>
            	<para>
            The return value of <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.BindingData"/> 
            is always <see langword="null"/>.
            </para>
            	<para>
            You can  select a data source using   <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.BindingData"/> 
            within the Windows Forms Designer by expanding the 
             <see cref="P:System.Windows.Forms.Control.DataBindings"/> node in the Properties window. 
            The data source bound to <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.BindingData"/>
            must be data of type <see cref="T:NationalInstruments.DigitalWaveform"/> 
            or an 
            array of data of type <see cref="T:NationalInstruments.DigitalWaveform"/>.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>5/9/2011 4:14:52 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.DisplayModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.DisplayMode"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.DisplayMode"/>
            <lastupdated>6/1/2005 2:57:07 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.OnDisplayModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.DisplayModeChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.DisplayModeChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.DisplayMode"/>
            <lastupdated>6/1/2005 3:26:29 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ShowGroupLinesChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ShowGroupLines"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ShowGroupLines"/>
            <lastupdated>6/1/2005 2:58:45 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.OnShowGroupLinesChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ShowGroupLinesChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ShowGroupLinesChanged"/>
            <lastupdated>6/1/2005 3:27:29 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarStyleChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarStyle"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarStyle"/>
            <lastupdated>6/1/2005 2:58:37 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.OnScrollBarStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarStyleChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarStyleChanged"/>
            <lastupdated>6/1/2005 3:27:23 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarBackColorChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarBackColor"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarBackColor"/>
            <lastupdated>6/1/2005 2:58:16 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.OnScrollBarBackColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarBackColorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarBackColorChanged"/>
            <lastupdated>6/1/2005 3:27:10 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarForeColorChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarForeColor"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarForeColor"/>
            <lastupdated>6/1/2005 2:58:28 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.OnScrollBarForeColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarForeColorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarForeColorChanged"/>
            <lastupdated>6/1/2005 3:27:16 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.VerticalScrollPositionChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.VerticalScrollPosition"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.VerticalScrollPosition"/>
            <lastupdated>6/1/2005 2:59:35 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.OnVerticalScrollPositionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.VerticalScrollPositionChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.VerticalScrollPositionChanged"/>
            <lastupdated>6/1/2005 3:27:47 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.VerticalScrollModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.VerticalScrollMode"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.VerticalScrollMode"/>
            <lastupdated>6/1/2005 2:59:30 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.OnVerticalScrollModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.VerticalScrollModeChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.VerticalScrollModeChanged"/>
            <lastupdated>6/1/2005 3:27:42 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HorizontalScrollPositionChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HorizontalScrollPosition"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HorizontalScrollPosition"/>
            <lastupdated>6/1/2005 2:57:51 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.OnHorizontalScrollPositionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HorizontalScrollPositionChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HorizontalScrollPositionChanged"/>
            <lastupdated>6/1/2005 3:26:55 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HorizontalScrollModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HorizontalScrollMode"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HorizontalScrollMode"/>
            <lastupdated>6/1/2005 2:57:41 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.OnHorizontalScrollModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HorizontalScrollModeChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.HorizontalScrollModeChanged"/>
            <lastupdated>6/1/2005 3:26:49 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.SignalPlotPaddingChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.SignalPlotPadding"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.SignalPlotPadding"/>
            <lastupdated>6/1/2005 2:58:59 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.OnSignalPlotPaddingChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.SignalPlotPaddingChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.SignalPlotPaddingChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.SignalPlotPadding"/>
            <lastupdated>6/1/2005 3:27:36 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.WaveformPlotPaddingChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.WaveformPlotPadding"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.WaveformPlotPadding"/>
            <lastupdated>6/1/2005 2:59:39 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.OnWaveformPlotPaddingChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.WaveformPlotPaddingChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.WaveformPlotPaddingChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.WaveformPlotPadding"/>
            <lastupdated>6/1/2005 3:27:54 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotHeightChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotHeight"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotHeight"/>
            <lastupdated>6/1/2005 2:58:06 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.OnPlotHeightChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotHeightChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotHeightChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotHeight"/>
            <lastupdated>6/1/2005 3:27:02 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotHeightIncrementChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotHeightIncrement"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotHeightIncrement"/>
            <lastupdated>9/28/2005 2:44:36 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.OnPlotHeightIncrementChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotHeightIncrementChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotHeightIncrementChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotHeightIncrement"/>
            <lastupdated>9/28/2005 2:44:27 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotLabelModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotLabelMode"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotLabelMode"/>
            <lastupdated>9/28/2005 2:45:49 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.OnPlotLabelModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotLabelModeChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotLabelModeChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.PlotLabelMode"/>
            <lastupdated>9/28/2005 2:45:39 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GroupLineColorChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GroupLineColor"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GroupLineColor"/>
            <lastupdated>6/1/2005 2:57:20 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.OnGroupLineColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GroupLineColorChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GroupLineColorChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GroupLineColor"/>
            <lastupdated>6/1/2005 3:26:35 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GroupNodeColorChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GroupNodeColor"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GroupNodeColor"/>
            <lastupdated>6/1/2005 2:57:29 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.OnGroupNodeColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GroupNodeColorChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GroupNodeColorChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.GroupNodeColor"/>
            <lastupdated>6/1/2005 3:26:42 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.DataChanged">
            <summary>
            Occurs when the digital waveform graph data changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>6/1/2005 2:56:57 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.OnDataChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.DataChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.DataChanged"/>
            <lastupdated>6/1/2005 3:26:23 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.BeforeCollapseWaveform">
            <summary>
            Occurs before a digital signal is collapsed on a digital waveform plot.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler
            </exception>
            <remarks>
            Set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            property of the event argument to <see langword="true"/> to cancel collapsing the signals. If you set
            <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.BeforeCollapseWaveform"/> is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.AfterCollapseWaveform"/> event is not raised.
            </remarks>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.AfterCollapseWaveform"/>
            <lastupdated>6/1/2005 2:51:49 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.OnBeforeCollapseWaveform(NationalInstruments.UI.BeforeDigitalWaveformPlotEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.BeforeCollapseWaveform"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.BeforeDigitalWaveformPlotEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.BeforeCollapseWaveform"/>
            <lastupdated>8/12/2005 5:46:00 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.BeforeExpandWaveform">
            <summary>
            Occurs before a digital signal is expanded on a digital waveform plot.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler 
            </exception>
            <remarks>
            Set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            property of the event argument to <see langword="true"/> to cancel expanding the signals.
            If you set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.BeforeExpandWaveform"/> is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.AfterExpandWaveform"/> event is not raised.
            </remarks>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.AfterExpandWaveform"/>
            <lastupdated>6/1/2005 2:52:08 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.OnBeforeExpandWaveform(NationalInstruments.UI.BeforeDigitalWaveformPlotEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.BeforeExpandWaveform"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.BeforeDigitalWaveformPlotEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.BeforeExpandWaveform"/>
            <lastupdated>8/12/2005 5:49:38 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.AfterCollapseWaveform">
            <summary>
            Occurs after a digital signal is collapsed on a digital waveform plot.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <remarks>
            If you set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property to <see langword="true"/>
            in the event arguments of the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.BeforeCollapseWaveform"/>
            event, the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.AfterCollapseWaveform"/>
             event is not raised.
            </remarks>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.BeforeCollapseWaveform"/>
            <lastupdated>6/1/2005 2:49:29 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.OnAfterCollapseWaveform(NationalInstruments.UI.AfterDigitalWaveformPlotEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.AfterCollapseWaveform"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterDigitalWaveformPlotEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.AfterCollapseWaveform"/>
            <lastupdated>6/1/2005 3:25:26 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.AfterExpandWaveform">
            <summary>
            Occurs after a digital signal is expanded on a digital waveform plot.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <remarks>
            If you set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property to <see langword="true"/>
            in the event arguments of the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.BeforeExpandWaveform"/>
            event, the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.AfterExpandWaveform"/>
             event is not raised.
            </remarks>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.BeforeExpandWaveform"/>
            <lastupdated>6/1/2005 2:49:59 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.OnAfterExpandWaveform(NationalInstruments.UI.AfterDigitalWaveformPlotEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.AfterExpandWaveform"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterDigitalWaveformPlotEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.AfterExpandWaveform"/>
            <lastupdated>6/1/2005 3:25:48 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.Gauge">
            <summary>
            Represents a Measurement Studio Windows Forms gauge control to display numeric
            values.
            </summary>
            <threadsafety safety="control"/>
            <remarks>
            Typically, you use a <see cref="T:NationalInstruments.UI.WindowsForms.Gauge"/> as an indicator. 
            You can use <see cref="P:NationalInstruments.UI.WindowsForms.Gauge.SpindleColor"/>, <see cref="P:NationalInstruments.UI.WindowsForms.Gauge.SpindleVisible"/>, and <see cref="P:NationalInstruments.UI.WindowsForms.Gauge.GaugeStyle"/> to change the appearance
            of the <see cref="T:NationalInstruments.UI.WindowsForms.Gauge"/>.
            <para>
            The default value of <see cref="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.DialColor"/> 
            has been changed to give the control a more gauge-like appearance. The
            default value of <see cref="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.DialColor"/> is
            <see cref="P:System.Drawing.SystemColors.Window"/>. 
            	</para>
            	<note type="note">
            For more information about the gauge control, refer to <see keyword="UsingNINETNumericPointerControlsWinForms" keywordType="mstudio">Using the Measurement Studio Windows Forms Numeric Pointer .NET Controls</see>.
            </note>
            </remarks>
            <lastupdated>9/28/2011 12:18:10 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Gauge.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.Gauge"/> class.
            </summary>
            <lastupdated>4/28/2004 4:06:53 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Gauge.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.Gauge"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.Gauge"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            </remarks>
            <lastupdated>4/28/2004 4:06:50 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Gauge.DefaultSize">
            <summary>
            Gets the default size of the control.
            </summary>
            <value>
            The default value is a <see cref="T:System.Drawing.Size"/> with a width of 160 and a height of 152.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.DefaultSize"/>.
            </remarks>
            <seealso cref="P:System.Windows.Forms.Control.DefaultSize"/>
            <seealso cref="T:System.Windows.Forms.Control"/>
            <lastupdated>4/28/2004 4:06:40 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Gauge.SpindleColor">
            <summary>
            Gets or sets the color of the base that connects the pointer to the gauge.
            </summary>
            <value>
            A <see cref="T:System.Drawing.Color"/> that represents the color of the base
            that connects the pointer to the gauge. The default value is <see cref="P:System.Drawing.SystemColors.Control"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>4/28/2004 4:06:45 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Gauge.SpindleVisible">
            <summary>
            Gets or sets a value indicating if the base that connects the pointer to the gauge is visible.
            </summary>
            <value>
            	<see langword="true"/> if the base that connects the pointer to the gauge is visible.
            The default value is <see langword="true"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>7/8/2004 1:30:04 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Gauge.GaugeStyle">
            <summary>
            Gets or sets the style that determines the appearance of the gauge.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.GaugeStyle"/> that determines the appearance of
            the gauge. The default value is <see cref="P:NationalInstruments.UI.GaugeStyle.SunkenWithThickNeedle3D"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <lastupdated>9/28/2011 12:26:13 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Gauge.PointerLengthMode">
            <summary>
            Gets or sets the mode that determines the length of the pointer.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.PointerLengthMode"/> that determines the length of the pointer. 
            The default value is <see cref="F:NationalInstruments.UI.PointerLengthMode.Far"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:NationalInstruments.UI.PointerLengthMode"/> value.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineVisible"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineColor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineWidth"/>
            <lastupdated>3/6/2012 2:17:39 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Gauge.OnSpindleColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Gauge.SpindleColorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> object that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Gauge.SpindleColorChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Gauge.SpindleColor"/>
            <lastupdated>4/28/2004 4:05:12 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Gauge.OnSpindleVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Gauge.SpindleVisibleChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Gauge.SpindleVisibleChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Gauge.SpindleVisible"/>
            <lastupdated>7/13/2004 5:06:57 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Gauge.OnGaugeStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Gauge.GaugeStyleChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Gauge.GaugeStyleChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Gauge.GaugeStyle"/>
            <lastupdated>7/13/2004 5:06:49 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Gauge.OnPointerLengthModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Gauge.PointerLengthModeChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineWidth"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineColor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineVisible"/>
            <lastupdated>7/13/2004 5:27:54 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Gauge.SpindleColorChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Gauge.SpindleColor"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Gauge.SpindleColor"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Gauge.OnSpindleColorChanged(System.EventArgs)"/>
            <lastupdated>4/28/2004 4:07:09 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Gauge.SpindleVisibleChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Gauge.SpindleVisible"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Gauge.SpindleVisible"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Gauge.OnSpindleVisibleChanged(System.EventArgs)"/>
            <lastupdated>4/28/2004 4:07:13 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Gauge.GaugeStyleChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Gauge.GaugeStyle"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Gauge.GaugeStyle"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Gauge.OnGaugeStyleChanged(System.EventArgs)"/>
            <lastupdated>4/28/2004 4:07:05 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Gauge.PointerLengthModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Gauge.PointerLengthMode"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineWidth"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineVisible"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineColor"/>
            <lastupdated>9/20/2011 12:47:11 PM</lastupdated>
            <updatedby>NI</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.Graph">
            <summary>
            Provides an <see langword="abstract"/> base class for all Measurement Studio Windows Forms graph controls.
            </summary>
            <threadsafety safety="control"/>
            <remarks>
            	<see cref="T:NationalInstruments.UI.WindowsForms.Graph"/> is the base class for
            all graph controls. Use a graph control to visualize data in a plot area.
            <para>
            		<para>
            			<see cref="T:NationalInstruments.UI.WindowsForms.Graph"/> supports multiple plots on a single graph. Use multiple
            plots to plot multiple sets of data in the same plot area.
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotsChanged"/> occurs when the collection of plots is modified
            through an add, remove, insert, or clear operation.
            </para>
            		<para>
            You can use <see cref="M:NationalInstruments.UI.WindowsForms.Graph.ClearData"/> to clear data from all of the plots in the graph plot collection.
            </para>
            		<see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaColor"/>, <see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImage"/>,
            and <see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImageAlignment"/> provide the ability to change the
            appearance of the plot area. To retrieve the bounds of the plot area, use <see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBounds"/>. <see cref="T:NationalInstruments.UI.WindowsForms.Graph"/> 
            raises mouse events for the plot area in the form of <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>, 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, and 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>. Custom drawing of the plot area is supported through the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.BeforeDrawPlotArea"/> and
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea"/> events. 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.BeforeDrawPlotArea"/> occurs before the plot area is drawn.
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea"/> occurs after the plot area is drawn.
            <see cref="M:NationalInstruments.UI.WindowsForms.Graph.DrawPlotAreaImage(NationalInstruments.UI.ComponentDrawArgs)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.Graph.DrawGridLines(NationalInstruments.UI.ComponentDrawArgs)"/> and 
            <see cref="M:NationalInstruments.UI.WindowsForms.Graph.DrawPlotAreaComponents(NationalInstruments.UI.ComponentDrawArgs)"/> provide a convenient way to
            draw the plot area image, grid lines, and plot area components, such as plots and cursors, while custom
            drawing the plot area. Use these events to participate in the drawing of the plot area.
            </para>
            	<para>
            		<see cref="T:NationalInstruments.UI.WindowsForms.Graph"/> supports interaction. <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/> 
            is used to configure the suite of interactions with the graph. Use <see cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomAroundPoint(System.Single)"/>
            and <see cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomXY(System.Single,System.Single,System.Single,System.Single)"/> to zoom into the plot area around
            a point or a selection. The <see cref="E:NationalInstruments.UI.WindowsForms.Graph.Zoom"/> event is raised when zooming
            interactively or programmatically. <see cref="M:NationalInstruments.UI.WindowsForms.Graph.PanXY(System.Single,System.Single)"/> pans the plot area 
            relative to the existing view. The <see cref="E:NationalInstruments.UI.WindowsForms.Graph.Pan"/> event is raised when panning
            interactively or programmatically. <see cref="M:NationalInstruments.UI.WindowsForms.Graph.UndoZoomPan"/> can undo the last
            zoom or pan operation. The <see cref="E:NationalInstruments.UI.WindowsForms.Graph.ZoomPanUndone"/> event is raised when the
            zoom or pan is undone interactively or programmatically. <see cref="M:NationalInstruments.UI.WindowsForms.Graph.ResetZoomPan"/> reverts all zoom
            and pan operations to restore the plot area to its initial state. The 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.ZoomPanReset"/> event is raised when the plot area is reset 
            interactively or programmatically.
            </para>
            	<para>
            The client coordinates of the plot area differ from the actual coordinates to enhance ease of use. You must use the bounds of the plot area
            in virtual coordinates when passing arguments to <see cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomAroundPoint(System.Single)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomXY(System.Single,System.Single,System.Single,System.Single)"/>, and <see cref="M:NationalInstruments.UI.WindowsForms.Graph.PanXY(System.Single,System.Single)"/>.
            The virtual coordinates of the plot area are defined from (0.0, 0.0) to (1.0, 1.0).
            <see cref="M:NationalInstruments.UI.WindowsForms.Graph.PointToVirtual(System.Drawing.Point)"/> and <see cref="M:NationalInstruments.UI.WindowsForms.Graph.RectangleToVirtual(System.Drawing.Rectangle)"/>
            convert client coordinates to virtual coordinates. <see cref="M:NationalInstruments.UI.WindowsForms.Graph.VirtualToPoint(System.Drawing.PointF)"/> and
            <see cref="M:NationalInstruments.UI.WindowsForms.Graph.VirtualToRectangle(System.Drawing.RectangleF)"/> convert virtual coordinates to client coordinates.
            </para>
            	<note type="note">
            For more information about the graph controls, refer to <see keyword="UsingNINETGraphWinForms" keywordType="mstudio">Using the Measurement Studio Windows Forms Graph .NET Controls</see>.
            </note>
            </remarks>
            <lastupdated>6/26/2006 2:20:50 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.GetPlotCollection">
            <summary>
            Returns the collection of plots on the graph.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IList"/> that contains the plot objects on the graph.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>11/11/2003 12:43:59 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.Graph"/> class.
            </summary>
            <lastupdated>7/1/2003 12:09:07 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Graph.DefaultSize">
            <summary>
            Gets the default size of the control.
            </summary>
            <value>
            The default value is a <see cref="T:System.Drawing.Size"/> with a width of 272 pixels and a height of 168 pixels.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.DefaultSize"/>.
            </remarks>
            <seealso cref="P:System.Windows.Forms.Control.DefaultSize"/>
            <seealso cref="T:System.Windows.Forms.Control"/>
            <lastupdated>9/1/2005 10:01:23 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBounds">
            <summary>
            Gets the rectangle that represents the plot area of the graph.
            </summary>
            <value>
            A <see cref="T:System.Drawing.Rectangle"/> that represents the plot area of the graph.
            </value>
            <remarks>
            The <see cref="T:System.Drawing.Rectangle"/> excludes the border of the plot area.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>6/26/2003 1:11:03 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBorder">
            <summary>
            Gets or sets the border style of the plot area.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.Border"/> that represents the border to draw.
            </value>
            <remarks>
            You can set this property to any instance of <see cref="T:NationalInstruments.UI.Border"/>, including
            the <see cref="T:NationalInstruments.UI.Border"/> properties and any custom class that extends the
            <see cref="T:NationalInstruments.UI.Border"/> base class.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The specified <see cref="T:NationalInstruments.UI.Border"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>7/13/2004 5:07:19 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaColor">
            <summary>
            Gets or sets the color of the plot area of the graph.
            </summary>
            <value>
            A <see cref="T:System.Drawing.Color"/> that represents the color of the plot area of the graph. 
            The default value is <see cref="P:System.Drawing.Color.Black"/>.
            </value>
            <remarks>
            The value of <see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImage"/> takes precedence over <see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaColor"/>.
            If <see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImage"/> is set to a value other than its default value, the 
            specified image is drawn in the plot area; otherwise, the plot area is filled with the color specified in
            <see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaColor"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImage"/>
            <lastupdated>7/10/2003 1:01:11 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImage">
            <summary>
            Gets or sets the image that is displayed in the plot area of the graph.
            </summary>
            <value>
            An <see cref="T:System.Drawing.Image"/> that represents the image that is displayed in the plot area of the graph.
            The default value is <see langword="null"/>.
            </value>
            <remarks>
            The value of <see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImage"/> takes precedence over <see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaColor"/>.
            If <see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImage"/> is set to a value other than its default value, the 
            specified image is drawn in the plot area; otherwise, the plot area is filled with the color specified in
            <see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaColor"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaColor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImageAlignment"/>
            <lastupdated>6/26/2003 1:13:00 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImageAlignment">
            <summary>
            Gets or sets the alignment of the image that is displayed in the plot area of the graph.
            </summary>
            <value>The <see cref="T:NationalInstruments.UI.ImageAlignment"/> of the image that is displayed in the plot area of the graph. 
            The default value is <see cref="F:NationalInstruments.UI.ImageAlignment.Stretch"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not an <see cref="T:NationalInstruments.UI.ImageAlignment"/> value.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImage"/>
            <lastupdated>7/10/2003 1:02:12 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode">
            <summary>
            Gets or sets the user interactions that are supported by the graph.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.GraphInteractionModes"/> that indicates which user interactions are
            supported by the graph. 
            The default value is a bitwise combination of <see cref="F:NationalInstruments.UI.GraphInteractionModes.ZoomX"/>,
            <see cref="F:NationalInstruments.UI.GraphInteractionModes.ZoomY"/>, 
            <see cref="F:NationalInstruments.UI.GraphInteractionModes.ZoomAroundPoint"/>,
            <see cref="F:NationalInstruments.UI.GraphInteractionModes.PanX"/>,
            <see cref="F:NationalInstruments.UI.GraphInteractionModes.PanY"/>, and
            <see cref="F:NationalInstruments.UI.GraphInteractionModes.DragCursor"/>.
            </value>
            <remarks>
            For detailed information about graph interactions, refer to 
            <see keyword="InteractingNETGraphsWinForms" keywordType="mstudio">Interacting with Measurement Studio Windows Forms .NET Graph Controls</see>.
            <para>
            Set <see cref="P:System.Windows.Forms.Control.Enabled"/> to <see langword="true"/> to enable 
            interaction. If <see cref="P:System.Windows.Forms.Control.Enabled"/> is <see langword="false"/>,
            the <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/> property has no
            effect regardless of its value. The control must have focus to enable interaction with the use of modifier keys.
            </para>
            	<para>
            Use <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionModeDefault"/> to enable user
            interactions without the use of modifier keys.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:System.Windows.Forms.Control.Enabled"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomFactor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionModeDefault"/>
            <lastupdated>1/31/2006 12:01:02 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Graph.InteractionModeDefault">
            <summary>
            Gets or sets the user interaction that is enabled on the graph without the use of a modifier key.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.GraphDefaultInteractionMode"/> that represents the user interaction that
            is enabled on the graph without the use of a modifier key. The default value is <see cref="F:NationalInstruments.UI.GraphDefaultInteractionMode.None"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not an <see cref="T:NationalInstruments.UI.GraphDefaultInteractionMode"/> value.
            </exception>
            <remarks>
            	<see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionModeDefault"/> determines the default
            interaction of the graph. Unlike <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/>,
            the user is not required to press any modifier keys to interact with the graph when
            <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionModeDefault"/> is set to a value
            other than <see cref="F:NationalInstruments.UI.GraphDefaultInteractionMode.None"/>. For example,
            if <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionModeDefault"/> is set to
            <see cref="F:NationalInstruments.UI.GraphDefaultInteractionMode.ZoomXY"/>, the user is not
            required to press the <entity value="lt"/>Shift<entity value="gt"/> key to zoom with a selection rectangle in the plot area
            of the graph.
            <para>
            The value of <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionModeDefault"/> is independent of
            the value of <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/>. For example,
            <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionModeDefault"/> can be set to
            <see cref="F:NationalInstruments.UI.GraphDefaultInteractionMode.ZoomXY"/> to allow users to
            zoom with a selection rectangle while <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/>
            can be set to a bitwise combination of <see cref="F:NationalInstruments.UI.GraphInteractionModes.PanX"/> and
            <see cref="F:NationalInstruments.UI.GraphInteractionModes.PanY"/> to allow panning in the horizontal
            and vertical directions.
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/>
            <lastupdated>6/22/2006 9:27:01 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Graph.SelectionStyle">
            <summary>
            Gets or sets the style with which a selection is drawn in the graph.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.SelectionStyle"/> that specifies how a selection is drawn in the graph. The default value is
            <see cref="P:NationalInstruments.UI.SelectionStyle.Translucent"/>.
            </value>
            <remarks>
            While zooming interactively, the selection style is applied to the selection drawn in the plot area when selecting
            a rectangle to zoom to.
            <para>
            		<see cref="P:NationalInstruments.UI.SelectionStyle.OperatingSystem"/> requires
            <see cref="T:System.Security.Permissions.RegistryPermission"/> with
            <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Read"/> be granted
            to the <format type="monospace">NationalInstruments.UI</format> assembly to allow the operating system setting to be read from the registry.
            If the security permission is not granted or if the operating system
            cannot be retrieved, the <see cref="P:NationalInstruments.UI.WindowsForms.Graph.SelectionStyle"/>
            defaults to <see cref="P:NationalInstruments.UI.SelectionStyle.Translucent"/>
            on Windows XP or later, and to <see cref="P:NationalInstruments.UI.SelectionStyle.Outline"/>
            on Windows 2000 or earlier. 
            	</para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.SelectionColor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/>
            <lastupdated>7/10/2003 1:03:46 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Graph.SelectionColor">
            <summary>
            Gets or sets the color of a selection in the graph.
            </summary>
            <value>
            A <see cref="T:System.Drawing.Color"/> that represents the color of a selection in the graph. The default value
            is <see cref="P:System.Drawing.SystemColors.Info"/> with an alpha value of 64.
            </value>
            <remarks>
            While zooming interactively, the selection color is applied to the selection drawn in the plot area when selecting
            a rectangle to zoom to.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.SelectionStyle"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/>
            <lastupdated>7/13/2004 5:07:27 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Graph.ZoomFactor">
            <summary>
            Gets or sets the factor to use to zoom around a point when zooming interactively.
            </summary>
            <value>
            The factor to use to zoom around a point when zooming interactively. The default value is <format type="monospace">2.0</format>.
            </value>
            <remarks>
            A value less than 1.0 indicates a zoom out, whereas a value greater than 1.0 indicates a 
            zoom in. For example, a value of 0.8 zooms out by 80% and value of 1.5 zooms in by 150%. 
            If the value is set to 1.0, the plot area is not zoomed because a value of 1.0 zooms by 100%
            of the current view.
            <para>
            To zoom around a point in the plot area, you must set <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/>
            to a value that includes <see cref="F:NationalInstruments.UI.GraphInteractionModes.ZoomAroundPoint"/>.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            The value is less than or equal to 0.0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The specified value is <see cref="F:System.Single.NaN"/>,
            <see cref="F:System.Single.NegativeInfinity"/>, or
            <see cref="F:System.Single.PositiveInfinity"/>.
            </para>
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/>
            <lastupdated>7/10/2003 1:06:53 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Graph.InteractionHistoryCount">
            <summary>
            Gets the number of times the zoom or pan options have been performed on the graph. </summary>
            <value>
            	An integer value which represents the number of times the zoom or pan operations have been performed on the graph.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>2/24/2011 2:34:38 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation">
            <summary>
            Gets or sets a value indicating if an animation is drawn when zooming interactively.
            </summary>
            <value>
            	<see langword="true"/> if an animation is drawn when zooming interactively. The 
            default value is <see langword="true"/>.
            </value>
            <lastupdated>6/30/2004 4:10:54 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMouseCursors">
            <summary>
            Gets the collection of properties that you can use to customize mouse cursors for different interactions with the graph controls.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.GraphInteractionMouseCursors"/> that you use to customize mouse cursors for different interactions.
            The default value is the collection with all properties within the collection set to default values.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>9/17/2008 4:08:53 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.Graph"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.Graph"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            </remarks>
            <lastupdated>7/1/2003 12:01:48 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>7/10/2003 1:08:59 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.NationalInstruments#UI#IGraph#GetPlotCollection">
            <exclude/>
            <lastupdated>1/23/2009 5:24:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.ClearData">
            <summary>
            Removes all data from the history of all plots on the graph.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <example>
            	<code lang="VB.NET">
            graph.ClearData()
            </code>
            </example>
            <example>
            	<code lang="C#">
            graph.ClearData();
            </code>
            </example>
            <remarks>
            When you use this method to clear data on the graph, 
            the ranges on the axes are not reset to default range values. If you have zoomed or panned, you can reset the range values
            with <see cref="M:NationalInstruments.UI.WindowsForms.Graph.UndoZoomPan"/>. Otherwise, set the range of the axes to the original values.
              </remarks>
            <lastupdated>4/2/2012 1:05:41 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.PointToVirtual(System.Drawing.Point)">
            <summary>
            Converts the location of the specified client coordinate to a virtual coordinate with respect to the plot area bounds.
            </summary>
            <param name="point">
            The <see cref="T:System.Drawing.Point"/> in client coordinates to convert.
            </param>
            <returns>
            A <see cref="T:System.Drawing.PointF"/> that represents the converted <see cref="T:System.Drawing.Point"/>, <paramref name="point"/>,
            in virtual coordinates.
            </returns>
            <remarks>
            The virtual coordinates of the plot area are defined from (0.0, 0.0) to (1.0, 1.0), with (0.0, 0.0) representing the 
            left-bottom corner of the plot area and (1.0, 1.0) representing the right-top corner of the plot area.
            You can convert a client coordinate outside the plot area. Use
            <see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBounds"/> to retrieve the bounds of the plot area in client coordinates.
            </remarks>
            <example>The following example demonstrates converting a point in client  coordinates to a point in virtual coordinates. 
            <code lang="VB.NET">
            Dim clientPoint As New Point()
            Dim bounds As Rectangle = graph.PlotAreaBounds
            Dim virtualPoint As PointF
            ' Het the client point for the center of the plot.
            clientPoint.X = CInt(bounds.Width) \ 2 + bounds.X
            clientPoint.Y = CInt(bounds.Height) \ 2 + bounds.Y
            ' PointToVirtual converts a point from client coordinates
            ' to virtual coordinates.
            virtualPoint = graph.PointToVirtual(clientPoint)
             
            Debug.WriteLine("PointToVirtual Inputs: clientPoint.X: " &amp; clientPoint.X.ToString() &amp; " clientPoint.Y: " &amp; clientPoint.Y.ToString())
            Debug.WriteLine("PointToVirtual Outputs: virtualPoint X: " &amp; virtualPoint.X.ToString() &amp; " virtualPoint.Y: " &amp; virtualPoint.Y.ToString())
            </code>
            </example>
            <example>
            	<code lang="C#">
            Point clientPoint = new Point();
            Rectangle bounds = graph.PlotAreaBounds;
            PointF virtualPoint;
            // Get the client point for the center of the plot.
            clientPoint.X = (int)bounds.Width / 2 + bounds.X;
            clientPoint.Y = (int)bounds.Height / 2 + bounds.Y;
            // PointToVirtual converts a point from client coordinates
            // to virtual coordinates.
            virtualPoint = graph.PointToVirtual(clientPoint);
             
            Debug.WriteLine("PointToVirtual Inputs: clientPoint.X: " + clientPoint.X.ToString()
                            + " clientPoint.Y: " + clientPoint.Y.ToString());
            Debug.WriteLine("PointToVirtual Outputs: virtualPoint X: " + virtualPoint.X.ToString()
                            + " virtualPoint.Y: " + virtualPoint.Y.ToString());
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBounds"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.VirtualToPoint(System.Drawing.PointF)"/>
            <lastupdated>10/5/2010 9:55:14 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.VirtualToPoint(System.Drawing.PointF)">
            <summary>
            Converts the location of the specified virtual point to a client coordinate with respect to the plot area bounds.
            </summary>
            <param name="virtualPoint">
            The <see cref="T:System.Drawing.PointF"/> in virtual coordinates to convert.
            </param>
            <returns>
            A <see cref="T:System.Drawing.Point"/> that represents the converted <see cref="T:System.Drawing.PointF"/>, <paramref name="virtualPoint"/>,
            in client coordinates.
            </returns>
            <remarks>
            The virtual coordinates of the plot area are defined from (0.0, 0.0) to (1.0, 1.0)
            with (0.0, 0.0) representing the left-bottom corner of the plot area and (1.0, 1.0) representing
            the right-top corner of the plot area. You can convert a virtual coordinate outside 
            the plot area. Use <see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBounds"/> to 
            retrieve the bounds of the plot area in client coordinates.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBounds"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.PointToVirtual(System.Drawing.Point)"/>
            <lastupdated>7/8/2004 3:55:25 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.RectangleToVirtual(System.Drawing.Rectangle)">
            <summary>
            Converts the size and location of the specified client rectangle to virtual coordinates with respect to the plot area bounds.
            </summary>
            <param name="rectangle">
            The <see cref="T:System.Drawing.Rectangle"/> in client coordinates to convert.
            </param>
            <returns>
            A <see cref="T:System.Drawing.RectangleF"/> that represent the converted <see cref="T:System.Drawing.Rectangle"/>, <paramref name="rectangle"/>,
            in virtual coordinates.
            </returns>
            <remarks>
            The virtual coordinates of the plot area are defined from (0.0, 0.0) to (1.0, 1.0), with (0.0, 0.0) representing the 
            bottom left corner of the plot area and (1.0, 1.0) representing the top right corner of the plot area.
            You can convert a client rectangle outside the plot area. Use <see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBounds"/> 
            to retrieve the bounds of the plot area in client coordinates.
            </remarks>
            <example>The following example demonstrates converting a rectangle in client  coordinates to a rectangle in virtual coordinates. 
            <code lang="VB.NET">
            Dim clientPoint As New Point()
            Dim clientRect As New Rectangle()
            Dim virtualRect As New RectangleF()
             
            ' RectangleToVirtual takes the device coordinates from the client rectangle and converts 
            ' them to virtual coordinates, which are values from 0.0 to 1.0, where 
            ' (0.0, 0.0) represents the left-bottom corner of the plot area and (1.0, 1.0)
            ' represents the right-top corner of the plot area. 
            clientRect = New Rectangle(clientPoint.X, clientPoint.Y, graph.Width / 2, graph.Height / 2)
            virtualRect = graph.RectangleToVirtual(clientRect)
             
            Debug.WriteLine("RectangletoVirtual Inputs: clientRect.X: " &amp; clientRect.X.ToString() &amp; " clientRect.Y: " &amp; clientRect.Y.ToString() &amp; " clientRect.Height: " &amp; clientRect.Height.ToString() &amp; " clientRect.Width: " &amp; clientRect.Width.ToString())
            Debug.WriteLine("RectangletoVirtual Outputs: virtualRect X: " &amp; virtualRect.X.ToString() &amp; " PointToVirtual Outputs: virtualRect Y: " &amp; virtualRect.Y.ToString() &amp; " virtualRect.Height: " &amp; clientRect.Height.ToString() &amp; " virtualRect.Width: " &amp; clientRect.Width.ToString())
            </code>
            </example>
            <example>
            	<code lang="C#">
            Point clientPoint = new Point();
            Rectangle clientRect = new Rectangle();
            RectangleF virtualRect = new RectangleF();
             
            // RectangleToVirtual takes the device coordinates from the client rectangle and converts 
            // them to virtual coordinates, which are values from 0.0 to 1.0, where 
            // (0.0, 0.0) represents the left-bottom corner of the plot area and (1.0, 1.0)
            // represents the right-top corner of the plot area. 
            clientRect = new Rectangle(clientPoint.X, clientPoint.Y, graph.Width / 2, graph.Height / 2);
            virtualRect = graph.RectangleToVirtual(clientRect);
             
            Debug.WriteLine("RectangletoVirtual Inputs: clientRect.X: " + clientRect.X.ToString()
                            + " clientRect.Y: " + clientRect.Y.ToString()
                            + " clientRect.Height: " + clientRect.Height.ToString()
                            + " clientRect.Width: " + clientRect.Width.ToString());
            Debug.WriteLine("RectangletoVirtual Outputs: virtualRect X: " + virtualRect.X.ToString()
                            + " PointToVirtual Outputs: virtualRect Y: " + virtualRect.Y.ToString()
                            + " virtualRect.Height: " + clientRect.Height.ToString()
                            + " virtualRect.Width: " + clientRect.Width.ToString());
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBounds"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.VirtualToRectangle(System.Drawing.RectangleF)"/>
            <lastupdated>10/5/2010 9:58:16 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.RectangleToVirtual(System.Drawing.RectangleF)">
            <summary>
            Converts the size and location of the specified client rectangle to virtual coordinates with respect to the plot area bounds.
            </summary>
            <param name="rectangle">
            The <see cref="T:System.Drawing.RectangleF"/> in client coordinates to convert.
            </param>
            <returns>
            A <see cref="T:System.Drawing.RectangleF"/> that represents the converted <see cref="T:System.Drawing.RectangleF"/>, <paramref name="rectangle"/>,
            in virtual coordinates.
            </returns>
            <remarks>
            The virtual coordinates of the plot area are defined from (0.0, 0.0) to (1.0, 1.0), with (0.0, 0.0) representing the 
            bottom left corner of the plot area and (1.0, 1.0) representing the top right corner of the plot area.
            You can convert a client rectangle outside the plot area. Use <see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBounds"/> 
            to retrieve the bounds of the plot area in client coordinates.
            <note type="note">
            The <paramref name="rectangle"/> parameter represents client coordinates and cannot include floating-point values. 
            If the input <see cref="T:System.Drawing.RectangleF"/> includes floating-point values, the values are truncated before the virtual coordinates are calculated and returned.
            </note>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBounds"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.VirtualToRectangle(System.Drawing.RectangleF)"/>
            <lastupdated>8/27/2009 10:52:04 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.VirtualToRectangle(System.Drawing.RectangleF)">
            <summary>
            Converts the size and location of the specified virtual rectangle to client coordinates with respect to the plot area bounds.
            </summary>
            <param name="virtualRectangle">
            The <see cref="T:System.Drawing.RectangleF"/> in virtual coordinates to convert.
            </param>
            <returns>
            A <see cref="T:System.Drawing.Rectangle"/> that represents the converted <see cref="T:System.Drawing.RectangleF"/>, <paramref name="virtualRectangle"/>,
            in client coordinates.
            </returns>
            <remarks>
            The virtual coordinates of the plot area are defined from (0.0, 0.0) to (1.0, 1.0)
            with (0.0, 0.0) representing the left-bottom corner of the plot area and (1.0, 1.0) representing
            the right-top corner of the plot area. You can convert a virtual rectangle outside the plot area. 
            Use <see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBounds"/> to retrieve the bounds of 
            the plot area in client coordinates.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBounds"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.RectangleToVirtual(System.Drawing.Rectangle)"/>
            <lastupdated>6/26/2003 1:39:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.ZoomAroundPoint(System.Single)">
            <summary>
            Zooms around the center of the plot area using the specified zoom factor.
            </summary>
            <param name="zoomFactor">
            The factor used to perform the zoom.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            The <paramref name="zoomFactor"/> is less than or equal to 0.0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="zoomFactor"/> is <see cref="F:System.Single.NaN"/>,
            <see cref="F:System.Single.NegativeInfinity"/>, or
            <see cref="F:System.Single.PositiveInfinity"/>.
            </para>
            </exception>
            <remarks>
            A <paramref name="zoomFactor"/>
            value less than 1.0 indicates a zoom out, and a value greater than 1.0 indicates a zoom in. For example, a <paramref name="zoomFactor"/>
            value of 0.8 zooms out by 80%, and a value of 1.5 zooms in by 150%. If <paramref name="zoomFactor"/> is set to 
            1.0, the plot area is not zoomed because a value of 1.0 zooms by 100% of the current view.
            <para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomAroundPoint(System.Single)"/> determines if
            an animated visual cue is drawn based on the value of 
            <see cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/>.
            </para>
            	<para>
            Calling <see cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomAroundPoint(System.Single)"/> raises the
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.Zoom"/> event with 
            <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> set to 
            <see cref="F:NationalInstruments.UI.Action.Programmatic"/>.
            </para>
            	<para>
            Refer to <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/> for
            information about zooming interactively.
            </para>
            </remarks>
            <example>The following example demonstrates zooming in around the center of the plot on a <see cref="T:NationalInstruments.UI.WindowsForms.Graph" crefType="Unqualified"/> object area by a factor of 150%. 
            <code lang="VB.NET">
            ' The percentage to zoom by - in this case 150%.
            Dim zoomFactor As Single = 1.5F
             
            ' When you only specify a zoom factor, the
            ' zoom is centered around the center of the graph.
            graph.ZoomAroundPoint(zoomFactor)
             
            </code>
            </example>
            <example>
            	<code lang="C#">
            // The percentage to zoom by - in this case 150%.
            float zoomFactor = 1.5f;
             
            // When you only specify a zoom factor, the
            // zoom is centered around the center of the graph.
            graph.ZoomAroundPoint(zoomFactor);
             
            </code>
            </example>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomFactor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomXY(System.Single,System.Single,System.Single,System.Single)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.UndoZoomPan"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ResetZoomPan"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.Zoom"/>
            <lastupdated>10/5/2010 9:33:54 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.ZoomAroundPoint(System.Single,System.Single,System.Single)">
            <summary>
            Zooms around the specified x and y coordinates with the specified zoom factor.
            </summary>
            <param name="zoomFactor">
            The percentage to zoom by.
            </param>
            <param name="virtualX">
            The horizontal position of the point to zoom around in virtual coordinates.
            </param>
            <param name="virtualY">
            The vertical position of the point to zoom around in virtual coordinates.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            The <paramref name="zoomFactor"/> is less than or equal to 0.0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="zoomFactor"/> is <see cref="F:System.Single.NaN"/>,
            <see cref="F:System.Single.NegativeInfinity"/>, or
            <see cref="F:System.Single.PositiveInfinity"/>.
            </para>
            </exception>
            <remarks>
            	<para>
            A <paramref name="zoomFactor"/>
            value less than 1.0 indicates a zoom out, and a value greater than 1.0 indicates a zoom in. For example, a <paramref name="zoomFactor"/>
            value of 0.8 zooms out by 80%, and a value of 1.5 zooms in by 150%. If <paramref name="zoomFactor"/> is set to 
            1.0, the plot area is not zoomed because a value of 1.0 zooms by 100% of the current view.</para>
            	<para>
            The virtual coordinates of the plot area are defined from (0.0, 0.0) to (1.0, 1.0)
            with (0.0, 0.0) representing the bottom-left corner of the plot area, and (1.0, 1.0) representing
            the top-right corner of the plot area. Use <see cref="M:NationalInstruments.UI.WindowsForms.Graph.PointToVirtual(System.Drawing.Point)"/> 
            to convert client coordinates to virtual coordinates of the plot area.
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomAroundPoint(System.Single)"/> determines if
            an animated visual cue is drawn based on the value of 
            <see cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/>.
            </para>
            	<para>
            Calling <see cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomAroundPoint(System.Single)"/> raises the
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.Zoom"/> event with 
            <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> set to 
            <see cref="F:NationalInstruments.UI.Action.Programmatic"/>.
            </para>
            	<para>
            Refer to <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/> for
            information about zooming interactively.
            </para>
            </remarks>
            <example>The following example demonstrates zooming in by a factor of 125% around a  point on a <see cref="T:NationalInstruments.UI.WindowsForms.Graph" crefType="Unqualified"/> object obtained from handling the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown" crefType="Unqualified"/> event. 
            <code lang="VB.NET">
            Public Sub Graph_PlotAreaMouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
                Dim virtualPoint As PointF
                Dim zoomFactor As Single = 1.25F
             
                ' Only zoom in when the left mouse button is clicked.
                If e.Button = MouseButtons.Left Then
                    ' get the virtual position of the mouse click 
                    virtualPoint = graph.PointToVirtual(e.Location)
                    graph.ZoomAroundPoint(zoomFactor, virtualPoint.X, virtualPoint.Y)
                End If
            End Sub
            </code>
            </example>
            <example>
            	<code lang="C#">
            public void Graph_PlotAreaMouseDown(object sender, MouseEventArgs e)
            {
                PointF virtualPoint;
                float zoomFactor = 1.25f;
             
                // Only zoom in when the left mouse button is clicked.
                if (e.Button == MouseButtons.Left)
                {
                    // get the virtual position of the mouse click 
                    virtualPoint = graph.PointToVirtual(e.Location);
                    graph.ZoomAroundPoint(zoomFactor, virtualPoint.X, virtualPoint.Y);
                }
            }
            </code>
            </example>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomFactor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomXY(System.Single,System.Single,System.Single,System.Single)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.UndoZoomPan"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ResetZoomPan"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.PointToVirtual(System.Drawing.Point)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.Zoom"/>
            <lastupdated>10/5/2010 9:35:14 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.ZoomAroundPoint(System.Single,System.Drawing.PointF)">
            <summary>
            Zooms around the specified point with the specified zoom factor.
            </summary>
            <param name="zoomFactor">
            The percentage to zoom by.
            </param>
            <param name="virtualPoint">
            The <see cref="T:System.Drawing.PointF"/> in virtual coordinates to zoom around.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            The <paramref name="zoomFactor"/> is less than or equal to 0.0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="zoomFactor"/> is <see cref="F:System.Single.NaN"/>,
            <see cref="F:System.Single.NegativeInfinity"/>, or
            <see cref="F:System.Single.PositiveInfinity"/>.
            </para>
            </exception>
            <remarks>
            	<para>
            A <paramref name="zoomFactor"/>
            value less than 1.0 indicates a zoom out, and a value greater than 1.0 indicates a zoom in. For example, a <paramref name="zoomFactor"/>
            value of 0.8 zooms out by 80%, and a value of 1.5 zooms in by 150%. If <paramref name="zoomFactor"/> is set to 
            1.0, the plot area is not zoomed because a value of 1.0 zooms by 100% of the current view.</para>
            	<para>
            The virtual coordinates of the plot area are defined from (0.0, 0.0) to (1.0, 1.0)
            with (0.0, 0.0) representing the bottom-left corner of the plot area, and (1.0, 1.0) representing
            the top-right corner of the plot area. Use <see cref="M:NationalInstruments.UI.WindowsForms.Graph.PointToVirtual(System.Drawing.Point)"/> 
            to convert client coordinates to virtual coordinates of the plot area.
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomAroundPoint(System.Single)"/> determines if
            an animated visual cue is drawn based on the value of 
            <see cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/>.
            </para>
            	<para>
            Calling <see cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomAroundPoint(System.Single)"/> raises the
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.Zoom"/> event with 
            <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> set to 
            <see cref="F:NationalInstruments.UI.Action.Programmatic"/>.
            </para>
            	<para>
            Refer to <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/> for
            information about zooming interactively.
            </para>
            </remarks>
            <example>The following example demonstrates zooming in by a factor of 125% around a  point on a <see cref="T:NationalInstruments.UI.WindowsForms.Graph" crefType="Unqualified"/> object obtained from handling the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown" crefType="Unqualified"/> event. 
            <code lang="VB.NET">
            Public Sub Graph_PlotAreaMouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
                Dim virtualPoint As PointF
                Dim zoomFactor As Single = 1.25F
             
                ' Only zoom in when the left mouse button is clicked.
                If e.Button = MouseButtons.Left Then
                    ' get the virtual position of the mouse click 
                    virtualPoint = graph.PointToVirtual(e.Location)
                    graph.ZoomAroundPoint(zoomFactor, virtualPoint)
                End If
            End Sub
            </code>
            </example>
            <example>
            	<code lang="C#">
            public void Graph_PlotAreaMouseDown(object sender, MouseEventArgs e)
            {
                PointF virtualPoint;
                float zoomFactor = 1.25f;
             
                // Only zoom in when the left mouse button is clicked.
                if (e.Button == MouseButtons.Left)
                {
                    // get the virtual position of the mouse click 
                    virtualPoint = graph.PointToVirtual(e.Location);
                    graph.ZoomAroundPoint(zoomFactor, virtualPoint);
                }
            }
            </code>
            </example>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomFactor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomXY(System.Single,System.Single,System.Single,System.Single)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.UndoZoomPan"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ResetZoomPan"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.PointToVirtual(System.Drawing.Point)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.Zoom"/>
            <lastupdated>10/5/2010 9:38:40 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.ZoomXY(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Zooms to the region of the plot area specified by the x location, y location, width, and height. 
            </summary>
            <param name="virtualX">The horizontal position in virtual coordinates of the bottom-left corner of the region of the plot area to zoom.
            </param>
            <param name="virtualY">
            The vertical position in virtual coordinates of the bottom-left corner of the region of the plot area to zoom.
            </param>
            <param name="virtualWidth">
            The width of the region of the plot area to zoom, in virtual coordinates.
            </param>
            <param name="virtualHeight">
            The height of the region of the plot area to zoom, in virtual coordinates.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="virtualX"/>, <paramref name="virtualY"/>, <paramref name="virtualWidth"/>, or
            <paramref name="virtualHeight"/> is <see cref="F:System.Single.NaN"/>,
            <see cref="F:System.Single.NegativeInfinity"/>, or
            <see cref="F:System.Single.PositiveInfinity"/>.
            </exception>
            <remarks>
            	<para>
            The virtual coordinates of the plot area are defined from (0.0, 0.0) to (1.0, 1.0)
            with (0.0, 0.0) representing the bottom-left corner of the plot area and (1.0, 1.0) representing
            the top-right corner of the plot area. Use <see cref="M:NationalInstruments.UI.WindowsForms.Graph.RectangleToVirtual(System.Drawing.Rectangle)"/> 
            to convert client coordinates to virtual coordinates of the plot area.
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomXY(System.Single,System.Single,System.Single,System.Single)"/> determines if
            an animated visual cue is drawn based on the value of 
            <see cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/>.
            </para>
            	<para>
            Calling <see cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomXY(System.Single,System.Single,System.Single,System.Single)"/> raises the
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.Zoom"/> event with 
            <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> set to 
            <see cref="F:NationalInstruments.UI.Action.Programmatic"/>.
            </para>
            	<para>
            Refer to <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/> for
            information about zooming interactively.
            </para>
            	<note type="note">
            This method may not zoom the graph to the precise floating-point coordinates specified by the parameters due to rounding that occurs when mapping the virtual coordinates to the client coordinates.
            </note>
            </remarks>
            <example>The following example demonstrates zooming in on a <see cref="T:NationalInstruments.UI.WindowsForms.Graph" crefType="Unqualified"/> object to a particular region specified by the x location, y location,  height, and width of a rectangle. 
            <code lang="VB.NET">
            Dim virtualRect As New RectangleF()
             
            ' Zoom in on a rectangle that begins 25% from the x and y
            ' origins and continues for the next 50% of the plot area.
            virtualRect.Y = 0.25F
            virtualRect.X = 0.25F
            virtualRect.Height = 0.5F
            virtualRect.Width = 0.5F
             
            graph.ZoomXY(virtualRect.X, virtualRect.Y, virtualRect.Width, virtualRect.Height)
            </code>
            </example>
            <example>
            	<code lang="C#">
            RectangleF virtualRect = new RectangleF();
             
            // Zoom in on a rectangle that begins 25% from the x and y
            // origins and continues for the next 50% of the plot area.
            virtualRect.Y = .25f;
            virtualRect.X = .25f;
            virtualRect.Height = .5f;
            virtualRect.Width = .5f;
             
            graph.ZoomXY(virtualRect.X, virtualRect.Y, virtualRect.Width, virtualRect.Height);
            </code>
            </example>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomAroundPoint(System.Single)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.UndoZoomPan"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ResetZoomPan"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.RectangleToVirtual(System.Drawing.Rectangle)"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.Zoom"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.ZoomXY(NationalInstruments.UI.XYPlot,System.Double,System.Double,System.Double,System.Double)"/>
            <lastupdated>10/5/2010 9:48:58 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.ZoomXY(System.Drawing.RectangleF)">
            <summary>
            Zooms to the region of the plot area specified by the rectangle.
            </summary>
            <param name="virtualRectangle">
            The <see cref="T:System.Drawing.RectangleF"/> that specifies the region of the plot area to zoom, in virtual coordinates.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            The virtual coordinates of the plot area are defined from (0.0, 0.0) to (1.0, 1.0)
            with (0.0, 0.0) representing the bottom-left corner of the plot area and (1.0, 1.0) representing
            the top-right corner of the plot area. Use <see cref="M:NationalInstruments.UI.WindowsForms.Graph.RectangleToVirtual(System.Drawing.Rectangle)"/> 
            to convert client coordinates to virtual coordinates of the plot area.
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomXY(System.Single,System.Single,System.Single,System.Single)"/> determines if
            an animated visual cue is drawn based on the value of 
            <see cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/>.
            </para>
            	<para>
            Calling <see cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomXY(System.Single,System.Single,System.Single,System.Single)"/> raises the
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.Zoom"/> event with 
            <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> set to 
            <see cref="F:NationalInstruments.UI.Action.Programmatic"/>.
            </para>
            	<para>
            Refer to <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/> for
            information about zooming interactively.
            </para>
            	<note type="note">
            This method may not zoom the graph to the precise floating-point coordinates specified by the parameters due to rounding that occurs when mapping the virtual coordinates to the client coordinates.
            </note>
            </remarks>
            <example>The following example demonstrates zooming in on a <see cref="T:NationalInstruments.UI.WindowsForms.Graph" crefType="Unqualified"/> object to a particular region specified by a rectangle 150 pixels high and wide. 
            <code lang="VB.NET">
            ' The the bounds of the plot area - in client coordinates.
            Dim bounds As Rectangle = graph.PlotAreaBounds
            Dim clientRect As New Rectangle()
            Dim virtualRect As RectangleF
             
            ' Create a client rectangle.  Top left of the rectangle is at the 
            ' center of the plot, and it is 150 pixels high and wide.
            clientRect.Y = bounds.Height \ 2 + bounds.Y
            clientRect.X = bounds.Width \ 2 + bounds.X
            clientRect.Height = 150
            clientRect.Width = 150
             
            ' RectangleToVirtual converts a rectangle from client coordinates
            ' to virtual coordinates, which are required by ZoomXY.
            virtualRect = graph.RectangleToVirtual(clientRect)
            graph.ZoomXY(virtualRect)
            </code>
            </example>
            <example>
            	<code lang="C#">
            // The the bounds of the plot area - in client coordinates.
            Rectangle bounds = graph.PlotAreaBounds;
            Rectangle clientRect = new Rectangle();
            RectangleF virtualRect;
             
            // Create a client rectangle.  Top left of the rectangle is at the 
            // center of the plot, and it is 150 pixels high and wide.
            clientRect.Y = bounds.Height / 2 + bounds.Y;
            clientRect.X = bounds.Width / 2 + bounds.X;
            clientRect.Height = 150;
            clientRect.Width = 150;
             
            // RectangleToVirtual converts a rectangle from client coordinates
            // to virtual coordinates, which are required by ZoomXY.
            virtualRect = graph.RectangleToVirtual(clientRect);
            graph.ZoomXY(virtualRect);
            </code>
            </example>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomAroundPoint(System.Single)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.UndoZoomPan"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ResetZoomPan"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.RectangleToVirtual(System.Drawing.Rectangle)"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.Zoom"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.ZoomXY(NationalInstruments.UI.XYPlot,System.Double,System.Double,System.Double,System.Double)"/>
            <lastupdated>10/5/2010 9:47:49 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.PanXY(System.Single,System.Single)">
            <summary>
            Pans the plot area according to the specified horizontal and vertical factors.
            </summary>
            <param name="xFactor">
            The horizontal factor.
            </param>
            <param name="yFactor">
            The vertical factor.
            </param>
            <remarks>
            If you set <paramref name="xFactor"/>  to 0.0, the plot area is not panned horizontally. 
            If you set <paramref name="yFactor"/> to 0.0, the plot area is not panned vertically.
            <para>An <paramref name="xFactor"/> of 1.0 pans the plot area to
            the right so that the right edge of the plot area becomes the left edge of the plot area. An <paramref name="xFactor"/> of -1.0 pans
            the plot area to the left so that the left edge of the plot area becomes the right edge of the plot area.
            </para>
            	<para>
            A <paramref name="yFactor"/> of 1.0 pans the plot area to
            the top so that the top edge of the plot area becomes the bottom edge of the plot area. A <paramref name="yFactor"/> of -1.0 pans
            the plot area to the bottom so that the bottom edge of the plot area becomes the top edge of the plot area.
            </para>
            	<para>
            Calling <see cref="M:NationalInstruments.UI.WindowsForms.Graph.PanXY(System.Single,System.Single)"/> raises the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.Pan"/> event with 
            <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> set to 
            <see cref="F:NationalInstruments.UI.Action.Programmatic"/>.
            </para>
            	<para>
            Refer to <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/> for
            information about panning interactively.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="xFactor"/> or <paramref name="yFactor"/> is
            <see cref="F:System.Single.NaN"/>, <see cref="F:System.Single.NegativeInfinity"/>,
            or <see cref="F:System.Single.PositiveInfinity"/>.
            </exception>
            <example>The following example demonstrates panning 20% of the <see cref="T:NationalInstruments.UI.WindowsForms.Graph" crefType="Unqualified"/> plot area to the right and 10% of the plot area upwards. 
            <code lang="VB.NET">
            ' Positive pan values pan from right to left and top to bottom.
            ' Negative pan values pan from left to right and bottom to top.
            ' The pan values are in virtual coordinates - 0 does not pan, 1
            ' pans an entire plot area.
            graph.PanXY(0.2F, 0.1F)
            </code>
            </example>
            <example>
            	<code lang="C#">
            // Positive pan values pan from right to left and top to bottom.
            // Negative pan values pan from left to right and bottom to top.
            // The pan values are in virtual coordinates - 0 does not pan, 1
            // pans an entire plot area.
            graph.PanXY(.2F, .1f);
            </code>
            </example>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.Pan"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.UndoZoomPan"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ResetZoomPan"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/>
            <lastupdated>10/5/2010 9:50:18 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.UndoZoomPan">
            <summary>
            Reverts the last zoom or pan operation.
            </summary>
            <remarks>
            You can undo each zoom and pan operation. To undo only the last operation, use 
            <see cref="M:NationalInstruments.UI.WindowsForms.Graph.UndoZoomPan"/>. To undo all operations, use
            <see cref="M:NationalInstruments.UI.WindowsForms.Graph.ResetZoomPan"/>.
            <para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.Graph.UndoZoomPan"/> determines if
            an animated visual cue is drawn based on the value of 
            <see cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/> when the last interactive 
            action is a zoom operation.
            </para>
            	<para>
            Calling <see cref="M:NationalInstruments.UI.WindowsForms.Graph.UndoZoomPan"/> raises the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.ZoomPanUndone"/> event with 
            <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> set to 
            <see cref="F:NationalInstruments.UI.Action.Programmatic"/>.
            </para>
            	<para>
            Refer to <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/> for
            information about reverting the last zoom or pan operation interactively.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ResetZoomPan"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.ZoomPanUndone"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/>
            <lastupdated>11/11/2003 12:46:14 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.ResetZoomPan">
            <summary>
            Reverts all zoom and pan operations to restore the plot area to its initial state.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can undo each zoom and pan operation. To undo only the last operation, use 
            <see cref="M:NationalInstruments.UI.WindowsForms.Graph.UndoZoomPan"/>. To undo all operations, use
            <see cref="M:NationalInstruments.UI.WindowsForms.Graph.ResetZoomPan"/>.
            <para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.Graph.ResetZoomPan"/> determines if
            an animated visual cue is drawn based on the value of 
            <see cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/> when the first interactive 
            action is a zoom operation.
            </para>
            	<para>
            Calling <see cref="M:NationalInstruments.UI.WindowsForms.Graph.ResetZoomPan"/> raises the
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.ZoomPanReset"/> event with 
            <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> set to 
            <see cref="F:NationalInstruments.UI.Action.Programmatic"/>.
            </para>
            	<para>
            Refer to <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/> for
            information about reverting all zoom and pan operations interactively.
            </para>
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.UndoZoomPan"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.ZoomPanReset"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/>
            <lastupdated>11/11/2003 12:45:05 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.DrawPlotAreaImage(NationalInstruments.UI.ComponentDrawArgs)">
            <summary>
            Draws the background image of the plot area.
            </summary>
            <param name="args">
            A <see cref="T:NationalInstruments.UI.ComponentDrawArgs"/> that contains the drawing data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="args"/> is <see langword="null"/>.
            </exception>
            <remarks>
            	<see cref="M:NationalInstruments.UI.WindowsForms.Graph.DrawPlotAreaImage(NationalInstruments.UI.ComponentDrawArgs)"/>
            provides an easy way to draw the background image of the plot area while custom
            drawing the plot area. To custom draw the plot area, attach an event handler
            to the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.BeforeDrawPlotArea"/> or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea"/> events. Use the
            <see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImage"/> value to draw the image.
            </remarks>
            <example>The following example demonstrates drawing the plot area image of a <see cref="T:NationalInstruments.UI.WindowsForms.Graph" crefType="Unqualified"/> object to a .png image file in response to the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea" crefType="Unqualified"/> event. 
            <code lang="VB.NET">
            Public Sub Graph_AfterDrawPlotArea(ByVal sender As Object, ByVal e As AfterDrawEventArgs)
                Dim imageFileName As String = "PlotAreaImage.png"
                Using bmp As New Bitmap(graph.PlotAreaBounds.Width, graph.PlotAreaBounds.Height)
                    Dim g As Graphics = Graphics.FromImage(bmp)
                    Dim args As New ComponentDrawArgs(g, New Rectangle(0, 0, bmp.Width, bmp.Height))
             
                    graph.DrawPlotAreaImage(args)
                    bmp.Save(imageFileName, ImageFormat.Png)
                End Using
                Debug.WriteLine(String.Format("file {0} has been saved", imageFileName))
            End Sub
            </code>
            </example>
            <example>
            	<code lang="C#">
            public void Graph_AfterDrawPlotArea(object sender, AfterDrawEventArgs e)
            {
                string imageFileName = "PlotAreaImage.png";
                using (Bitmap bmp = new Bitmap(graph.PlotAreaBounds.Width, graph.PlotAreaBounds.Height))
                {
                    Graphics g = Graphics.FromImage(bmp);
                    ComponentDrawArgs args = new ComponentDrawArgs(g, new Rectangle(0, 0, bmp.Width, bmp.Height));
             
                    graph.DrawPlotAreaImage(args);
                    bmp.Save(imageFileName, ImageFormat.Png);
                }
                Debug.WriteLine(string.Format("file {0} has been saved", imageFileName));
            }
            </code>
            </example>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.BeforeDrawPlotArea"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImage"/>
            <lastupdated>10/5/2010 9:45:41 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.DrawGridLines(NationalInstruments.UI.ComponentDrawArgs)">
            <summary>
            Draws the grid lines in the plot area of the graph.
            </summary>
            <param name="args">
            A <see cref="T:NationalInstruments.UI.ComponentDrawArgs"/> that contains the drawing data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="args"/> is <see langword="null"/>.
            </exception>
            <remarks>
            	<see cref="M:NationalInstruments.UI.WindowsForms.Graph.DrawGridLines(NationalInstruments.UI.ComponentDrawArgs)"/>
            provides an easy way to draw the grid lines while custom
            drawing the plot area. To custom draw the plot area, attach an event handler
            to <see cref="E:NationalInstruments.UI.WindowsForms.Graph.BeforeDrawPlotArea"/> or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea"/> events. The grid
            lines are drawn as specified by the major, minor, and custom divisions of the axes.
            </remarks>
            <example>The following example demonstrates drawing the origin lines of a <see cref="T:NationalInstruments.UI.WindowsForms.Graph" crefType="Unqualified"/> object to a .png image file in response to the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea" crefType="Unqualified"/> event. 
            <code lang="VB.NET">
            Public Sub Graph_AfterDrawPlotArea(ByVal sender As Object, ByVal e As AfterDrawEventArgs)
                Dim imageFileName As String = "GridLinesImage.png"
                Using bmp As New Bitmap(graph.PlotAreaBounds.Width, graph.PlotAreaBounds.Height)
                    Dim g As Graphics = Graphics.FromImage(bmp)
                    Dim args As New ComponentDrawArgs(g, New Rectangle(0, 0, bmp.Width, bmp.Height))
             
                    graph.DrawGridLines(args)
                    bmp.Save(imageFileName, ImageFormat.Png)
                End Using
                Debug.WriteLine(String.Format("file {0} has been saved", imageFileName))
            End Sub
            </code>
            </example>
            <example>
            	<code lang="C#">
            public void Graph_AfterDrawPlotArea(object sender, AfterDrawEventArgs e)
            {
                string imageFileName = "GridLinesImage.png";
                using (Bitmap bmp = new Bitmap(graph.PlotAreaBounds.Width, graph.PlotAreaBounds.Height))
                {
                    Graphics g = Graphics.FromImage(bmp);
                    ComponentDrawArgs args = new ComponentDrawArgs(g, new Rectangle(0, 0, bmp.Width, bmp.Height));
             
                    graph.DrawGridLines(args);
                    bmp.Save(imageFileName, ImageFormat.Png);
                }
                Debug.WriteLine(string.Format("file {0} has been saved", imageFileName));
            }
            </code>
            </example>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.BeforeDrawPlotArea"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea"/>
            <lastupdated>10/5/2010 1:57:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.DrawPlotAreaComponents(NationalInstruments.UI.ComponentDrawArgs)">
            <summary>
            Draws the components contained in the plot area of the graph, such as plots and cursors.
            </summary>
            <param name="args">
            A <see cref="T:NationalInstruments.UI.ComponentDrawArgs"/> that contains the drawing data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="args"/> is <see langword="null"/>.
            </exception>
            <remarks>
            	<see cref="M:NationalInstruments.UI.WindowsForms.Graph.DrawPlotAreaComponents(NationalInstruments.UI.ComponentDrawArgs)"/>
            provides an easy way to draw the components of the plot area, such as plots and cursors,
            while custom drawing the plot area. To custom draw the plot area, attach an event handler
            to the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.BeforeDrawPlotArea"/> or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea"/> events.
            </remarks>
            <example>The following example demonstrates drawing the plot area components of a <see cref="T:NationalInstruments.UI.WindowsForms.Graph" crefType="Unqualified"/> object to a .png image file in response to the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea" crefType="Unqualified"/> event. 
            <code lang="VB.NET">
            Public Sub Graph_AfterDrawPlotArea(ByVal sender As Object, ByVal e As AfterDrawEventArgs)
                Dim imageFileName As String = "PlotAreaComponentsImage.png"
                Using bmp As New Bitmap(graph.PlotAreaBounds.Width, graph.PlotAreaBounds.Height)
                    Dim g As Graphics = Graphics.FromImage(bmp)
                    Dim args As New ComponentDrawArgs(g, New Rectangle(0, 0, bmp.Width, bmp.Height))
             
                    graph.DrawPlotAreaComponents(args)
                    bmp.Save(imageFileName, ImageFormat.Png)
                End Using
                Debug.WriteLine(String.Format("file {0} has been saved", imageFileName))
            End Sub
            </code>
            </example>
            <example>
            	<code lang="C#">
            public void Graph_AfterDrawPlotArea(object sender, AfterDrawEventArgs e)
            {
                string imageFileName = "PlotAreaComponentsImage.png";
                using (Bitmap bmp = new Bitmap(graph.PlotAreaBounds.Width, graph.PlotAreaBounds.Height))
                {
                    Graphics g = Graphics.FromImage(bmp);
                    ComponentDrawArgs args = new ComponentDrawArgs(g, new Rectangle(0, 0, bmp.Width, bmp.Height));
             
                    graph.DrawPlotAreaComponents(args);
                    bmp.Save(imageFileName, ImageFormat.Png);
                }
                Debug.WriteLine(string.Format("file {0} has been saved", imageFileName));
            }
            </code>
            </example>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.BeforeDrawPlotArea"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea"/>
            <lastupdated>10/5/2010 9:44:28 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.OnInteractionModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.InteractionModeChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.InteractionModeChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/>
            <lastupdated>7/13/2004 5:08:29 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.OnInteractionModeDefaultChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.InteractionModeDefaultChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.InteractionModeDefaultChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionModeDefault"/>
            <lastupdated>9/1/2005 10:03:31 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.OnSelectionStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.SelectionStyleChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.SelectionStyleChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.SelectionStyle"/>
            <lastupdated>7/13/2004 5:13:33 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.OnSelectionColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.SelectionColorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.SelectionColorChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.SelectionColor"/>
            <lastupdated>7/13/2004 5:13:24 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.OnZoomFactorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.ZoomFactorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.ZoomFactorChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomFactor"/>
            <lastupdated>7/13/2004 5:13:58 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.OnZoomAnimationChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimationChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimationChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/>
            <lastupdated>7/13/2004 5:13:49 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.OnPlotAreaBorderChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBorderChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBorderChanged"/>
            <lastupdated>7/13/2004 5:08:47 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.OnPlotAreaColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaColorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaColorChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaColor"/>
            <lastupdated>7/13/2004 5:09:10 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.OnPlotAreaImageChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImageChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImageChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImage"/>
            <lastupdated>7/13/2004 5:09:31 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.OnPlotAreaImageAlignmentChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImageAlignmentChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImageAlignmentChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImageAlignment"/>
            <lastupdated>7/13/2004 5:09:23 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.OnPlotAreaBoundsChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBoundsChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBoundsChanged"/>
            <lastupdated>7/13/2004 5:08:59 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.OnPlotsChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotsChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.ComponentModel.CollectionChangeEventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotsChanged"/>
            <lastupdated>7/13/2004 5:13:15 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.OnPlotAreaMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains 
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBounds"/>
            <lastupdated>7/13/2004 5:09:46 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.OnPlotAreaMouseHover(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseHover"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.EventArgs"/> that contains 
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>7/13/2004 5:09:55 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.OnPlotAreaMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains 
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBounds"/>
            <lastupdated>7/13/2004 5:11:37 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.OnPlotAreaMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains 
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBounds"/>
            <lastupdated>7/13/2004 5:11:48 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.OnPlotAreaMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains 
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBounds"/>
            <lastupdated>7/13/2004 5:12:50 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.OnBeforeDrawPlotArea(NationalInstruments.UI.BeforeDrawEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.BeforeDrawPlotArea"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.BeforeDrawEventArgs"/> that contains the drawing data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.BeforeDrawPlotArea"/>
            <lastupdated>7/13/2004 5:08:16 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.OnAfterDrawPlotArea(NationalInstruments.UI.AfterDrawEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterDrawEventArgs"/> that contains the drawing data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea"/>
            <lastupdated>7/13/2004 5:08:06 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.OnPan(NationalInstruments.UI.ActionEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.Pan"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.ActionEventArgs"/> that contains 
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.Pan"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.PanXY(System.Single,System.Single)"/>
            <lastupdated>7/13/2004 5:08:38 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.OnZoomPanUndone(NationalInstruments.UI.ActionEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.ZoomPanUndone"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.ActionEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.ZoomPanUndone"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.UndoZoomPan"/>
            <lastupdated>7/13/2004 5:14:17 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.OnZoomPanReset(NationalInstruments.UI.ActionEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.ZoomPanReset"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.ActionEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.ZoomPanReset"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ResetZoomPan"/>
            <lastupdated>7/13/2004 5:14:06 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.OnInteractionHistoryCountChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.InteractionHistoryCountChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains 
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>3/26/2008 12:06:49 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.OnZoom(NationalInstruments.UI.ActionEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.Zoom"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.ActionEventArgs"/> that contains 
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.Zoom"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomAroundPoint(System.Single)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomXY(System.Single,System.Single,System.Single,System.Single)"/>
            <lastupdated>7/13/2004 5:13:41 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Graph.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is a regular input key or a special key that requires
            preprocessing.
            </summary>
            <param name="keyData">
            The <see cref="T:System.Windows.Forms.Keys"/> value to check.
            </param>
            <returns>
            	<see langword="true"/> if the specified key is a regular input key.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)"/>.
            </remarks>
            <seealso cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)"/>
            <seealso cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)"/>
            <seealso cref="T:System.Windows.Forms.Control"/>
            <lastupdated>7/1/2003 3:33:20 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Graph.InteractionModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.OnInteractionModeChanged(System.EventArgs)"/>
            <lastupdated>6/26/2003 12:31:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Graph.InteractionModeDefaultChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionModeDefault"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionModeDefault"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.OnInteractionModeDefaultChanged(System.EventArgs)"/>
            <lastupdated>9/1/2005 10:04:11 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Graph.SelectionStyleChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Graph.SelectionStyle"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.SelectionStyle"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.OnSelectionStyleChanged(System.EventArgs)"/>
            <lastupdated>6/26/2003 12:33:24 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Graph.SelectionColorChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Graph.SelectionColor"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.SelectionColor"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.OnSelectionColorChanged(System.EventArgs)"/>
            <lastupdated>6/26/2003 12:33:18 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Graph.ZoomFactorChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomFactor"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomFactor"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.OnZoomFactorChanged(System.EventArgs)"/>
            <lastupdated>6/26/2003 12:33:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimationChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.OnZoomAnimationChanged(System.EventArgs)"/>
            <lastupdated>11/11/2003 1:01:50 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaColorChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaColor"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaColor"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.OnPlotAreaColorChanged(System.EventArgs)"/>
            <lastupdated>6/26/2003 12:32:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBorderChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBorder"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBorder"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.OnPlotAreaBorderChanged(System.EventArgs)"/>
            <lastupdated>11/11/2003 12:59:46 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImageChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImage"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImage"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.OnPlotAreaImageChanged(System.EventArgs)"/>
            <lastupdated>6/26/2003 12:32:45 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImageAlignmentChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImageAlignment"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImageAlignment"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.OnPlotAreaImageAlignmentChanged(System.EventArgs)"/>
            <lastupdated>6/26/2003 12:32:37 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBoundsChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBounds"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaBounds"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.OnPlotAreaBoundsChanged(System.EventArgs)"/>
            <lastupdated>6/26/2003 12:32:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Graph.PlotsChanged">
            <summary>
            Occurs when the content of the graph's plot collection changes.
            </summary>
            <remarks>
            The content of graph's plot collection changes
            through an add, remove, insert or clear operation on the collection.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <lastupdated>6/26/2003 12:38:38 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown">
            <summary>
            Occurs when the mouse pointer is over the plot area and a mouse button is
            pressed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="E:System.Windows.Forms.Control.MouseDown"/>
            <lastupdated>11/11/2003 12:59:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove">
            <summary>
            Occurs when the mouse pointer is moved over the plot area.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="E:System.Windows.Forms.Control.MouseMove"/>
            <lastupdated>11/11/2003 1:00:50 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseHover">
            <summary>
            Occurs when the mouse hovers over the plot area.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <remarks>
            This event is raised when the mouse becomes inactive inside the plot area. The period of time between when the mouse becomes
            inactive to the time this event is raised is controlled by <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.HoverInterval"/>. 
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.HoverInterval"/>
            <lastupdated>11/11/2003 1:00:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp">
            <summary>
            Occurs when the mouse pointer is over the plot area and a mouse button is
            released.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="E:System.Windows.Forms.Control.MouseUp"/>
            <lastupdated>11/11/2003 1:01:20 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel">
            <summary>
            Occurs when the mouse wheel moves while the mouse pointer is on the plot area.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="E:System.Windows.Forms.Control.MouseWheel"/>
            <lastupdated>11/11/2003 1:01:28 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Graph.BeforeDrawPlotArea">
            <summary>
            Occurs before the plot area is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.Graph.BeforeDrawPlotArea"/> to participate in the drawing of
            the plot area. The event occurs before the graph begins to draw the 
            <see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaImage"/>, but after the 
            <see cref="P:NationalInstruments.UI.WindowsForms.Graph.PlotAreaColor"/> has already drawn. Set the 
            <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property of the event argument to <see langword="true"/> to 
            cancel drawing of the plot area. Cancelling the drawing of the plot area prevents the plot area image, grid lines, 
            and its contents, such as plots and cursors, from being drawn. 
            <see cref="M:NationalInstruments.UI.WindowsForms.Graph.DrawPlotAreaImage(NationalInstruments.UI.ComponentDrawArgs)"/> and 
            <see cref="M:NationalInstruments.UI.WindowsForms.Graph.DrawGridLines(NationalInstruments.UI.ComponentDrawArgs)"/> provide the ability to draw the
            plot area image and grid lines, respectively. <see cref="M:NationalInstruments.UI.WindowsForms.Graph.DrawPlotAreaComponents(NationalInstruments.UI.ComponentDrawArgs)"/>
            draws the contents of the plot area, such as plots and cursors. If you set 
            <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.BeforeDrawPlotArea"/> is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea"/> event is not raised. You must provide all of the
            implementation for drawing the plot area if <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to 
            <see langword="true"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.OnBeforeDrawPlotArea(NationalInstruments.UI.BeforeDrawEventArgs)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.DrawPlotAreaImage(NationalInstruments.UI.ComponentDrawArgs)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.DrawGridLines(NationalInstruments.UI.ComponentDrawArgs)"/>
            <lastupdated>11/11/2003 12:59:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea">
            <summary>
            Occurs after the plot area is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea"/> to participate in the drawing
            of the plot area. The event occurs after the graph has completed drawing the plot area and its contents, such as plots 
            and cursors. Use this event in conjunction with custom drawing to annotate the plot area. If you set the 
            <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property to <see langword="true"/> in the event arguments 
            of the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.BeforeDrawPlotArea"/> event, this event is not raised.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.OnAfterDrawPlotArea(NationalInstruments.UI.AfterDrawEventArgs)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.BeforeDrawPlotArea"/>
            <lastupdated>11/11/2003 12:57:15 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Graph.Zoom">
            <summary>
            Occurs when the plot area is zoomed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.OnZoom(NationalInstruments.UI.ActionEventArgs)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomAroundPoint(System.Single)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomXY(System.Single,System.Single,System.Single,System.Single)"/>
            <lastupdated>6/26/2003 12:33:30 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Graph.Pan">
            <summary>
            Occurs when the plot area is panned.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.OnPan(NationalInstruments.UI.ActionEventArgs)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.PanXY(System.Single,System.Single)"/>
            <lastupdated>6/26/2003 12:32:13 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Graph.ZoomPanUndone">
            <summary>
            Occurs when the last zoom or pan operation is reverted.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.UndoZoomPan"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.OnZoomPanUndone(NationalInstruments.UI.ActionEventArgs)"/>
            <lastupdated>6/26/2003 12:34:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Graph.ZoomPanReset">
            <summary>
            Occurs when all zoom and pan operations are reset.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ResetZoomPan"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.OnZoomPanReset(NationalInstruments.UI.ActionEventArgs)"/>
            <lastupdated>6/26/2003 12:33:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Graph.InteractionHistoryCountChanged">
            <summary>
            Occurs when the interaction history count changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <lastupdated>3/26/2008 12:06:52 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.InstrumentControlStrip">
            <summary>
            Represents the class for a Measurement Studio .NET Windows Forms control that provides
            a container for <see cref="T:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor"/>
            and other tool strip items.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            The <see cref="T:NationalInstruments.UI.WindowsForms.InstrumentControlStrip"/> control
            is a container for <see cref="T:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor"/>
            and other items derived from <see cref="T:System.Windows.Forms.ToolStripItem"/>. The control
            can be used to display a set of <see cref="T:NationalInstruments.UI.WindowsForms.PropertyEditor"/>
            controls through the <see cref="T:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor"/>.
            </remarks>
            <lastupdated>12/16/2014 2:09:18 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.InstrumentControlStrip.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.InstrumentControlStrip"/> class.
            </summary>
            <lastupdated>10/5/2006 4:47:57 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.InstrumentControlStrip.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.InstrumentControlStrip"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.InstrumentControlStrip"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            </remarks>
            <seealso cref="M:System.IDisposable.Dispose"/>
            <seealso cref="T:System.IDisposable"/>
            <lastupdated>10/5/2006 4:47:46 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.InstrumentControlStrip.GetService(System.Type)">
            <exclude/>
            <lastupdated>10/5/2006 4:47:51 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.InstrumentControlStrip.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/5/2006 4:48:09 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.InstrumentControlStrip.ThrowExceptionIfDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if the object has been disposed.
            </summary>
            <remarks>
            The <see cref="T:System.ObjectDisposedException"/> is thrown if the value of <see cref="P:System.Windows.Forms.Control.IsDisposed"/>
            is <see langword="true"/>. 
            </remarks>
            <seealso cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)"/>
            <seealso cref="P:System.Windows.Forms.Control.IsDisposed"/>
            <seealso cref="T:System.GC"/>
            <lastupdated>8/12/2005 4:57:00 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.IntensityGraph">
            <summary>
                Represents the class for Measurement Studio Windows Forms graphs that plot three-dimensional data on a two-dimensional plot with color representing the third dimension.
            </summary>
            <remarks>
            	<para>
                    You can use the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/> collection to include
                    multiple <see cref="T:NationalInstruments.UI.IntensityPlot"/> instances on a single graph. With multiple plots, 
                    you can plot multiple sets of data in the same plot area.
                 </para>
            	<para>
                    Use <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.Plot(System.Double[0:,0:])"/> to plot a two-dimensional rectangular array of <see cref="T:System.Double"/> values.
                    Use <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.PlotXAppend(System.Double[0:,0:])"/> or <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.PlotYAppend(System.Double[0:,0:])"/>
                    to append data to already plotted data.
            	</para>
            	<para>
            		<see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales"/> collection allow multiple <see cref="T:NationalInstruments.UI.ColorScale"/>
                    instance to coexist on a single graph. You can use multiple colorscales to plot multiple sets of 
                    data representing different colors. The <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScalesChanged"/> event 
                    occurs when the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales"/> collection is modified through an add, 
                    remove, insert, or clear operation. 
                    The <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScaleRangeChanged"/> is raised when the
                    <see cref="P:NationalInstruments.UI.Scale.Range"/> on an <see cref="T:NationalInstruments.UI.ColorScale"/>,
                    contained in its <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales"/> collection, changes.
                </para>
            	<para>
            		<see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes"/> and <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxes"/>
                    collections allow multiple <see cref="T:NationalInstruments.UI.IntensityXAxis"/> and <see cref="T:NationalInstruments.UI.IntensityYAxis"/>
                    instances to coexist on a single graph. You can use multiple axes to plot multiple sets of 
                    data that are scaled differently from each other. The
                    <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxesChanged"/> event occurs when the 
                    <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes"/> collection is modified through an add, remove, insert,
                    or clear operation. The <see cref="E:NationalInstruments.UI.IXYGraph.YAxesChanged"/> event
                    occurs when the <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/> collection
                    is similarly modified.
                </para>
            	<para>
            		<see cref="T:NationalInstruments.UI.WindowsForms.IntensityGraph"/> raises <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxisRangeChanged"/> when the
                    <see cref="P:NationalInstruments.UI.Scale.Range"/> on an <see cref="T:NationalInstruments.UI.IntensityXAxis"/>,
                    contained in its <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes"/> collection, changes. Similarly,
                    <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxisRangeChanged"/> occurs when the 
                    <see cref="P:NationalInstruments.UI.Scale.Range"/> on a <see cref="T:NationalInstruments.UI.IntensityYAxis"/>, contained in 
                    its <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxes"/> collection, changes.
                </para>
            	<para>
                    Custom drawn plots are supported through the <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawPlot"/>
                    and <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawPlot"/> events. 
                    <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawPlot"/> occurs before the plot is drawn.
                    <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawPlot"/> occurs after the plot is drawn.
                    Use these events to participate in the drawing of a plot that is contained in the 
                    plot collection.
                    <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.PlotDataChanged"/> occurs when a new set of data is plotted.
                </para>
            	<para>
                    Plot area cursors are supported. You can use cursors to annotate plots and the plot area. <see cref="T:NationalInstruments.UI.WindowsForms.IntensityGraph"/>
                    accepts multiple cursors through the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Cursors"/> collection. The
                    <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.CursorsChanged"/> event occurs when the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Cursors"/>
                    collection is modified through an add, remove, insert or clear operation. <see cref="T:NationalInstruments.UI.WindowsForms.IntensityGraph"/>
                    raises <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeMoveCursor"/> before an <see cref="T:NationalInstruments.UI.IntensityCursor"/>
                    is moved and <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterMoveCursor"/> after the <see cref="T:NationalInstruments.UI.IntensityCursor"/>
                    has completed moving.
                </para>
            </remarks>
            <lastupdated>9/28/2011 1:46:31 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.IntensityGraph"/> class.
            </summary>
            <lastupdated>7/14/2010 4:03:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Annotations">
            <summary>
            Gets the collection of annotations on the graph.
            </summary>
            <value>
            An <see cref="T:NationalInstruments.UI.IntensityAnnotationCollection"/> that contains the
            <see cref="T:NationalInstruments.UI.IntensityAnnotation"/> objects on the graph.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:NationalInstruments.UI.IntensityAnnotation"/>
            <lastupdated>9/28/2011 1:51:03 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots">
            <summary>
            Gets the collection of plots on the graph.
            </summary>
            <value>
            An <see cref="T:NationalInstruments.UI.IntensityPlotCollection"/> that contains the
            <see cref="T:NationalInstruments.UI.IntensityPlot"/> objects on the graph.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:NationalInstruments.UI.IntensityPlot"/>
            <lastupdated>9/28/2011 1:50:09 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes">
            <summary>
            Gets the collection of x axes on the graph.
            </summary>
            <value>
            An <see cref="T:NationalInstruments.UI.IntensityXAxisCollection"/> that contains the
            <see cref="T:NationalInstruments.UI.IntensityXAxis"/> objects on the graph.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:NationalInstruments.UI.IntensityXAxis"/>
            <lastupdated>9/28/2011 1:50:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxes">
            <summary>
            Gets the collection of y axes on the graph.
            </summary>
            <value>
            An <see cref="T:NationalInstruments.UI.IntensityYAxisCollection"/> that contains the
            <see cref="T:NationalInstruments.UI.IntensityYAxis"/> objects on the graph.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:NationalInstruments.UI.IntensityYAxis"/>
            <lastupdated>9/28/2011 1:50:34 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales">
            <summary>
            Gets the collection of color scales on the graph.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.ColorScaleCollection"/> that contains the
            <see cref="T:NationalInstruments.UI.ColorScale"/> objects on the graph.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:NationalInstruments.UI.ColorScale"/>
            <lastupdated>9/28/2011 1:50:47 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Cursors">
            <summary>
            Gets the collection of plot area cursors on the graph.
            </summary>
            <value>
            An <see cref="T:NationalInstruments.UI.IntensityCursorCollection"/> that contains the
            <see cref="T:NationalInstruments.UI.IntensityCursor"/> objects on the graph.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:NationalInstruments.UI.IntensityCursor"/>
            <lastupdated>9/28/2011 1:50:58 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.IntensityGraph.InteractionMode">
            <summary>
            Gets or sets the user interactions that are supported by the intensity graph.
            </summary>
            <value>
            An <see cref="T:NationalInstruments.UI.IntensityGraphInteractionModes"/> that indicates which user interactions are
            supported by the graph. 
            The default value is a bitwise combination of <see cref="F:NationalInstruments.UI.IntensityGraphInteractionModes.ZoomX"/>,
            <see cref="F:NationalInstruments.UI.IntensityGraphInteractionModes.ZoomY"/>, 
            <see cref="F:NationalInstruments.UI.IntensityGraphInteractionModes.ZoomAroundPoint"/>,
            <see cref="F:NationalInstruments.UI.IntensityGraphInteractionModes.PanX"/>,
            <see cref="F:NationalInstruments.UI.IntensityGraphInteractionModes.PanY"/>, and <see cref="F:NationalInstruments.UI.IntensityGraphInteractionModes.EditRange"/>. 
            </value>
            <remarks>
            For detailed information about graph interactions, refer to 
            <see keyword="InteractingNETGraphsWinForms" keywordType="mstudio">Interacting with Measurement Studio Windows Forms .NET Graph Controls</see>.
            <para>
            Set <see cref="P:System.Windows.Forms.Control.Enabled"/> to <see langword="true"/> to enable 
            interaction. If <see cref="P:System.Windows.Forms.Control.Enabled"/> is <see langword="false"/>,
            the <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/> property has no
            effect regardless of its value. The control must have focus to enable interaction with the use of modifier keys.
            </para>
            	<para>
            Use <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionModeDefault"/> to enable user
            interactions without the use of modifier keys.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:System.Windows.Forms.Control.Enabled"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomFactor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionModeDefault"/>
            <lastupdated>7/14/2010 3:51:27 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.DrawOriginLines(NationalInstruments.UI.ComponentDrawArgs)">
            <summary>
            Draws the origin lines in the plot area of the graph.
            </summary>
            <param name="args">
            A <see cref="T:NationalInstruments.UI.ComponentDrawArgs"/> that contains the drawing data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="args"/> is <see langword="null"/>.
            </exception>
            <remarks>
            	<see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.DrawOriginLines(NationalInstruments.UI.ComponentDrawArgs)"/>
            provides an easy way to draw the origin lines while custom
            drawing the plot area. To custom draw the plot area, attach an event handler
            to <see cref="E:NationalInstruments.UI.WindowsForms.Graph.BeforeDrawPlotArea"/> or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea"/>.
            </remarks>
            <example>The following example demonstrates drawing the  origin lines of an <see cref="T:NationalInstruments.UI.WindowsForms.IntensityGraph" crefType="Unqualified"/> object to a .png image file in response to the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea" crefType="Unqualified"/> event. 
            <code lang="VB.NET">
            Public Sub IntensityGraph_AfterDrawPlotArea(ByVal sender As Object, ByVal e As AfterDrawEventArgs)
                Dim imageFileName As String = "IntensityGraphOriginLinesImage.png"
                Using bmp As New Bitmap(intensityGraph.PlotAreaBounds.Width, intensityGraph.PlotAreaBounds.Height)
                    Dim g As Graphics = Graphics.FromImage(bmp)
                    Dim args As New ComponentDrawArgs(g, New Rectangle(0, 0, bmp.Width, bmp.Height))
             
                    intensityGraph.DrawOriginLines(args)
                    bmp.Save(imageFileName, ImageFormat.Png)
                End Using
                Debug.WriteLine(String.Format("file {0} has been saved", imageFileName))
            End Sub
            </code>
            </example>
            <example>
            	<code lang="C#">
            public void IntensityGraph_AfterDrawPlotArea(object sender, AfterDrawEventArgs e)
            {
                string imageFileName = "IntensityGraphOriginLinesImage.png";
                using (Bitmap bmp = new Bitmap(intensityGraph.PlotAreaBounds.Width, intensityGraph.PlotAreaBounds.Height))
                {
                    Graphics g = Graphics.FromImage(bmp);
                    ComponentDrawArgs args = new ComponentDrawArgs(g, new Rectangle(0, 0, bmp.Width, bmp.Height));
             
                    intensityGraph.DrawOriginLines(args);
                    bmp.Save(imageFileName, ImageFormat.Png);
                }
                Debug.WriteLine(string.Format("file {0} has been saved", imageFileName));
            }
            </code>
            </example>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.BeforeDrawPlotArea"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea"/>
            <lastupdated>10/5/2010 10:19:20 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.Plot(System.Double[0:,0:])">
            <summary>
            Plots a 2D rectangular array of values.
            </summary>
            <param name="zData">
            The array of values to plot.
            </param>
            <remarks>
            This method calls 
            <see cref="M:NationalInstruments.UI.IntensityPlot.Plot(System.Double[0:,0:])"/> on the 
            first <see cref="T:NationalInstruments.UI.IntensityPlot"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/>. 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.IntensityPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.IntensityPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.IntensityXAxis"/>, 
            the first <see cref="T:NationalInstruments.UI.IntensityYAxis"/>, and the first <see cref="T:NationalInstruments.UI.ColorScale"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes"/>, <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxes"/>, and
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales"/>,  respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes"/>, <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxes"/>, 
            or <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.IntensityXAxis"/>, <see cref="T:NationalInstruments.UI.IntensityYAxis"/>, 
            or <see cref="T:NationalInstruments.UI.ColorScale"/> is created and added to the
            collection.
            <para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.Plot(System.Double[0:,0:])"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.IntensityPlot.Plot(System.Double[0:,0:])"/>
            on the plot reference.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="zData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.IntensityPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.IntensityPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.IntensityPlot.ColorScale"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.IntensityPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.IntensityPlot.YAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.IntensityPlot.ColorScale"/>.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.IntensityPlot.Plot(System.Double[0:,0:])"/>
            <example> The following example demnostrates plotting intensity data onto the intensity graph.
            	<code lang="VB.NET">
                Dim myData As Double(,) = New Double(,) {
                    {1, 2, 3, 4, 5},
                    {2, 3, 8, 5, 2.6},
                    {3, 4, 3, 8, 1},
                    {4, 9, 6, 5, 7.2}
                }
                intensityGraph1.Plot(myData)
            </code>
            	<code lang="C#">
                double[,] myData = new double[,] {  
                    {1, 2, 3, 4, 5},
                    {2, 3, 8, 5, 2.6},
                    {3, 4, 3, 8, 1},
                    {4, 9, 6, 5, 7.2}
                };
                intensityGraph1.Plot(myData);
            </code>
            </example>
            <lastupdated>9/28/2011 1:47:06 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.Plot(System.Double[0:,0:],System.Boolean)">
            <summary>
            Plots a 2D rectangular array of values, with an option to transpose the input array before plotting.
            </summary>
            <param name="zData">
            The array of values to plot.
            </param>
            <param name="transposeZData">
            A <see cref="T:System.Boolean"/> value specifying whether to transpose the two-dimensional input array.
            </param>
            <remarks>
            This method calls 
            <see cref="M:NationalInstruments.UI.IntensityPlot.Plot(System.Double[0:,0:])"/> on the 
            first <see cref="T:NationalInstruments.UI.IntensityPlot"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/>. 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.IntensityPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.IntensityPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.IntensityXAxis"/>, 
            the first <see cref="T:NationalInstruments.UI.IntensityYAxis"/>, and the first <see cref="T:NationalInstruments.UI.ColorScale"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes"/>, <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxes"/>, and
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales"/>,  respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes"/>, <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxes"/>, 
            or <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.IntensityXAxis"/>, <see cref="T:NationalInstruments.UI.IntensityYAxis"/>, 
            or <see cref="T:NationalInstruments.UI.ColorScale"/> is created and added to the
            collection.
            <para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.Plot(System.Double[0:,0:])"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.IntensityPlot.Plot(System.Double[0:,0:])"/>
            on the plot reference.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="zData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.IntensityPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.IntensityPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.IntensityPlot.ColorScale"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.IntensityPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.IntensityPlot.YAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.IntensityPlot.ColorScale"/>.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.IntensityPlot.Plot(System.Double[0:,0:])"/>
            <lastupdated>9/28/2011 1:47:12 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.Plot(System.Double[0:,0:],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Plots a 2D rectangular array against the specified start and increment values.
            </summary>
            <param name="zData">
            The array of values to plot.
            </param>
            <param name="xStart">
            The starting x value.
            </param>
            <param name="xIncrement">
            The value to use to increment x values.
            </param>
            <param name="yStart">
            The starting y value.
            </param>
            <param name="yIncrement">
            The value to use to increment y values.
            </param>
            <remarks>
            This method calls 
            <see cref="M:NationalInstruments.UI.IntensityPlot.Plot(System.Double[0:,0:])"/> on the 
            first <see cref="T:NationalInstruments.UI.IntensityPlot"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/>. 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.IntensityPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.IntensityPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.IntensityXAxis"/>, 
            the first <see cref="T:NationalInstruments.UI.IntensityYAxis"/>, and the first <see cref="T:NationalInstruments.UI.ColorScale"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes"/>, <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxes"/>, and
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales"/>,  respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes"/>, <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxes"/>, 
            or <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.IntensityXAxis"/>, <see cref="T:NationalInstruments.UI.IntensityYAxis"/>, 
            or <see cref="T:NationalInstruments.UI.ColorScale"/> is created and added to the
            collection.
            <para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.Plot(System.Double[0:,0:])"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.IntensityPlot.Plot(System.Double[0:,0:])"/>
            on the plot reference.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="zData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="xIncrement"/> is less than or equal to zero. 
            </para>
            	<para>
                    -or-
                  </para>
            	<para>
            		<paramref name="yIncrement"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.IntensityPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.IntensityPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.IntensityPlot.ColorScale"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.IntensityPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.IntensityPlot.YAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.IntensityPlot.ColorScale"/>.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.IntensityPlot.Plot(System.Double[0:,0:])"/>
            <lastupdated>9/28/2011 1:47:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.Plot(System.Double[0:,0:],System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Plots a 2D rectangular array of values against the specified start and increment values, 
            with an option to transpose the input array before plotting.
            </summary>
            <param name="zData">
            The array of values to plot.
            </param>
            <param name="xStart">
            The starting x value.
            </param>
            <param name="xIncrement">
            The value to use to increment x values.
            </param>
            <param name="yStart">
            The starting y value.
            </param>
            <param name="yIncrement">
            The value to use to increment y values.
            </param>
            <param name="transposeZData">
            A <see cref="T:System.Boolean"/> value specifying whether to transpose the two-dimensional input array.
            </param>
            <remarks>
            This method calls 
            <see cref="M:NationalInstruments.UI.IntensityPlot.Plot(System.Double[0:,0:])"/> on the 
            first <see cref="T:NationalInstruments.UI.IntensityPlot"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/>. 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.IntensityPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.IntensityPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.IntensityXAxis"/>, 
            the first <see cref="T:NationalInstruments.UI.IntensityYAxis"/>, and the first <see cref="T:NationalInstruments.UI.ColorScale"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes"/>, <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxes"/>, and
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales"/>,  respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes"/>, <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxes"/>, 
            or <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.IntensityXAxis"/>, <see cref="T:NationalInstruments.UI.IntensityYAxis"/>, 
            or <see cref="T:NationalInstruments.UI.ColorScale"/> is created and added to the
            collection.
            <para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.Plot(System.Double[0:,0:])"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.IntensityPlot.Plot(System.Double[0:,0:])"/>
            on the plot reference.
            </para>
            </remarks>
            <example>The following example demonstrates plotting a 2-D rectangular array at an offset of 0 and an increment of 1 to an <see cref="T:NationalInstruments.UI.WindowsForms.IntensityGraph" crefType="Unqualified"/> object. 
            <code lang="VB.NET">
            Dim zData As Double(,)
             
            zData = GetIntensityData()
            ' Plot data starting at index 0 of both x and y data
            ' sets.  Do not transpose the data being plotted.
            intensityGraph.Plot(zData, 0, 1, 0, 1, False)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[,] zData;
             
            zData = GetIntensityData();
            // Plot data starting at index 0 of both x and y data
            // sets.  Do not transpose the data being plotted.
            intensityGraph.Plot(zData, 0, 1, 0, 1, false);
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="zData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="xIncrement"/> is less than or equal to zero. 
            </para>
            	<para>
                    -or-
                  </para>
            	<para>
            		<paramref name="yIncrement"/> is less than or equal to zero.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.IntensityPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.IntensityPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.IntensityPlot.ColorScale"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.IntensityPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.IntensityPlot.YAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.IntensityPlot.ColorScale"/>.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.IntensityPlot.Plot(System.Double[0:,0:])"/>
            <lastupdated>9/28/2011 1:47:24 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.PlotXAppend(System.Double[0:,0:])">
            <summary>
             Plots a 2D rectangular array of values by appending the array to the existing data in the horizontal direction.
             </summary>
            <param name="zData">
             The array of values to plot.
             </param>
            <remarks>
             This method calls 
             <see cref="M:NationalInstruments.UI.IntensityPlot.PlotXAppend(System.Double[0:,0:])"/> on the 
             first <see cref="T:NationalInstruments.UI.IntensityPlot"/> in 
             <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/>. If there is existing data on the plot, then the vertical length of the input data and
             vertical length of the existing data should match. In other words, the length of the second dimension
             of the input data should be equal to <see cref="P:NationalInstruments.UI.IntensityPlot.HistoryCountY"/>.
             <para> 
             If there are not enough plots available in 
             <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/>, additional 
             <see cref="T:NationalInstruments.UI.IntensityPlot"/> instances are created and added to the 
             collection as required. The implicitly created <see cref="T:NationalInstruments.UI.IntensityPlot"/> 
             instances are associated with the first <see cref="T:NationalInstruments.UI.IntensityXAxis"/>, 
             the first <see cref="T:NationalInstruments.UI.IntensityYAxis"/>, and the first <see cref="T:NationalInstruments.UI.ColorScale"/> in 
             <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes"/>, <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxes"/>, and
             <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales"/>,  respectively. If 
             <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes"/>, <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxes"/>, 
             or <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales"/> are empty, an additional 
             <see cref="T:NationalInstruments.UI.IntensityXAxis"/>, <see cref="T:NationalInstruments.UI.IntensityYAxis"/>, 
             or <see cref="T:NationalInstruments.UI.ColorScale"/> is created and added to the
             collection.
             </para>
            	<para>
             To call <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.PlotXAppend(System.Double[0:,0:])"/> on another plot in the
             <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/> collection, use the indexer
             provided by <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/> to obtain a 
             reference to the plot, and then call <see cref="M:NationalInstruments.UI.IntensityPlot.PlotXAppend(System.Double[0:,0:])"/>
             on the plot reference.
             </para>
            </remarks>
            <example>The following example demonstrates appending a 2-D array of data to and existing IntensityGraph plot. 
             <code lang="VB.NET">
             Dim zData As Double(,)
              
             zData = GetIntensityData()
              
             ' ensure we can append the data in the horizontal direction
             If intensityGraph.Plots(0).HistoryCountY &lt;&gt; zData.GetLength(0) Then
                 intensityGraph.ClearData()
             End If
              
             ' Append data horizontally, but do not transpose the data
             intensityGraph.PlotXAppend(zData, False)
             </code>
            </example>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="zData"/> is <see langword="null"/>.
             </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
             		The size of <paramref name="zData"/> does not match the size of existing data.
             </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
             		The <see cref="P:NationalInstruments.UI.IntensityPlot.XAxis"/> of the plot is <see langword="null"/>.
             </para>
            	<para>
             -or-
             </para>
            	<para>
             		The <see cref="P:NationalInstruments.UI.IntensityPlot.YAxis"/> of the plot is <see langword="null"/>.
             </para>
            	<para>
             -or-
             </para>
            	<para>
             		The <see cref="P:NationalInstruments.UI.IntensityPlot.ColorScale"/> of the plot is <see langword="null"/>.
             </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
             The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
             and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
             different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.IntensityPlot.XAxis"/>.
             </para>
            	<para>
             -or-
             </para>
            	<para>
             The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
             and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
             different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.IntensityPlot.YAxis"/>.
             </para>
            	<para>
             -or-
             </para>
            	<para>
             The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
             and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
             different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.IntensityPlot.ColorScale"/>.
             </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
             The object has been disposed.
             </exception>
            <seealso cref="M:NationalInstruments.UI.IntensityPlot.PlotXAppend(System.Double[0:,0:])"/>
            <example>
             The following example demonstrates plotting and 
             appending intensity data in an intensity graph.
             For appending data horizontally, 
             the number of columns in the appended data 
             should be equal to the number of columns in the data of the plot.
             	<code lang="VB.NET">
                 Dim myData As Double(,) = New Double(,) {
                     {1, 2, 3, 4, 5},
                     {2, 3, 8, 5, 2.6},
                     {3, 4, 3, 8, 1},
                     {4, 9, 6, 5, 7.2}
                 }
                 intensityGraph1.Plot(myData)
              
                 Dim myAppendData As Double(,) = New Double(,) {
                     {1, 2, 3, 4, 5},
                     {1, 2, 3, 4, 5}
                 }
             
                 intensityGraph1.PlotXAppend(myAppendData)
             </code>
            	<code lang="C#">    
                 double[,] myData = new double[,] {  
                     { 1, 2, 3, 4, 5 },
                     { 2, 3, 8, 5, 2.6 },
                     { 3, 4, 3, 8, 1 },
                     { 4, 9, 6, 5, 7.2 },
                 };
                 intensityGraph1.Plot(myData);
              
                 double[,] myAppendData = new double[,] { 
                     { 1, 2, 3, 4, 5 },
                     { 1, 2, 3, 4, 5 } 
                 };
             
                 intensityGraph1.PlotXAppend(myAppendData);
             </code>
            </example>
            <lastupdated>9/28/2011 1:47:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.PlotXAppend(System.Double[0:,0:],System.Boolean)">
            <summary>
            Plots a 2D rectangular array of values by appending the array to the existing data in the horizontal direction, with an option to transpose the input array before plotting.
            </summary>
            <param name="zData">
            The array of values to plot.
            </param>
            <param name="transposeZData">
            A <see cref="T:System.Boolean"/> value specifying whether to transpose the two-dimensional input array.
            </param>
            <remarks>
            This method calls 
            <see cref="M:NationalInstruments.UI.IntensityPlot.PlotXAppend(System.Double[0:,0:])"/> on the 
            first <see cref="T:NationalInstruments.UI.IntensityPlot"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/>. If there is existing data on the plot, then the vertical length of the input data and
            vertical length of the existing data should match. In other words, the length of the second dimension
            of the input data should be equal to <see cref="P:NationalInstruments.UI.IntensityPlot.HistoryCountY"/>.
            <para> 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.IntensityPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.IntensityPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.IntensityXAxis"/>, 
            the first <see cref="T:NationalInstruments.UI.IntensityYAxis"/>, and the first <see cref="T:NationalInstruments.UI.ColorScale"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes"/>, <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxes"/>, and
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales"/>,  respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes"/>, <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxes"/>, 
            or <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.IntensityXAxis"/>, <see cref="T:NationalInstruments.UI.IntensityYAxis"/>, 
            or <see cref="T:NationalInstruments.UI.ColorScale"/> is created and added to the
            collection.
            </para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.PlotXAppend(System.Double[0:,0:])"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.IntensityPlot.PlotXAppend(System.Double[0:,0:])"/>
            on the plot reference.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="zData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		The size of <paramref name="zData"/> does not match the size of existing data.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.IntensityPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.IntensityPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.IntensityPlot.ColorScale"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.IntensityPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.IntensityPlot.YAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.IntensityPlot.ColorScale"/>.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.IntensityPlot.PlotXAppend(System.Double[0:,0:])"/>
            <example>
            The following example demonstrates plotting and 
            appending intensity data in an intensity graph.
            To use this overload, for appending data horizontally, 
            the number of rows in the appended data 
            should be equal to the number of columns in the data of the plot.
            	<code lang="VB.NET">
                Dim myData As Double(,) = New Double(,) {
                    {1, 2, 3, 4, 5},
                    {2, 3, 8, 5, 2.6},
                    {3, 4, 3, 8, 1},
                    {4, 9, 6, 5, 7.2}
                }
                intensityGraph1.Plot(myData)
             
                Dim myAppendData As Double(,) = New Double(,) {
                    {1, 1},
                    {2, 2},
                    {3, 3},
                    {4, 4},
                    {5, 5}
                }
             
                intensityGraph1.PlotXAppend(myAppendData, True)
            </code>
            	<code lang="C#">    
                double[,] myData = new double[,] {  
                    {1, 2, 3, 4, 5},
                    {2, 3, 8, 5, 2.6},
                    {3, 4, 3, 8, 1},
                    {4, 9, 6, 5, 7.2},
                };
                intensityGraph1.Plot(myData);
             
                double[,] myAppendData = new double[,] { 
                    {1, 1}, 
                    {2, 2},
                    {3, 3},
                    {4, 4},
                    {5, 5} 
                };
             
                intensityGraph1.PlotXAppend(myAppendData, true);
            </code>
            </example>
            <lastupdated>9/28/2011 1:47:41 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.PlotYAppend(System.Double[0:,0:])">
            <summary>
            Plots a 2D rectangular array of values by appending the array to the existing data in the vertical direction.
            </summary>
            <param name="zData">
            The array of values to plot.
            </param>
            <remarks>
            This method calls 
            <see cref="M:NationalInstruments.UI.IntensityPlot.PlotYAppend(System.Double[0:,0:])"/> on the 
            first <see cref="T:NationalInstruments.UI.IntensityPlot"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/>. If there is existing data on the plot, then the horizontal length of the input data and
            horizontal length of the existing data should match. In other words, the length of the first dimension
            of the input data should be equal to <see cref="P:NationalInstruments.UI.IntensityPlot.HistoryCountX"/>.
            <para> 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.IntensityPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.IntensityPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.IntensityXAxis"/>, 
            the first <see cref="T:NationalInstruments.UI.IntensityYAxis"/>, and the first <see cref="T:NationalInstruments.UI.ColorScale"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes"/>, <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxes"/>, and
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales"/>,  respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes"/>, <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxes"/>, 
            or <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.IntensityXAxis"/>, <see cref="T:NationalInstruments.UI.IntensityYAxis"/>, 
            or <see cref="T:NationalInstruments.UI.ColorScale"/> is created and added to the
            collection.
            </para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.PlotYAppend(System.Double[0:,0:])"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.IntensityPlot.PlotYAppend(System.Double[0:,0:])"/>
            on the plot reference.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="zData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		The size of <paramref name="zData"/> does not match the size of existing data.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.IntensityPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.IntensityPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.IntensityPlot.ColorScale"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.IntensityPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.IntensityPlot.YAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.IntensityPlot.ColorScale"/>.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.IntensityPlot.PlotYAppend(System.Double[0:,0:])"/>
            <example>
            The following example demonstrates plotting and 
            appending intensity data in an intensity graph.
            For appending data vertically, 
            the number of rows in the appended data 
            should be equal to the number of rows in the data of the plot.
            	<code lang="VB.NET">    
                Dim myData As Double(,) = New Double(,) {
                    {1, 2, 3, 4, 5},
                    {2, 3, 8, 5, 2.6},
                    {3, 4, 3, 8, 1},
                    {4, 9, 6, 5, 7.2}
                }
                intensityGraph1.Plot(myData)
             
                Dim myAppendData As Double(,) = New Double(,) {
                    {1, 1},
                    {2, 2},
                    {3, 3},
                    {4, 4}
                }
             
                intensityGraph1.PlotYAppend(myAppendData)
            </code>
            	<code lang="C#">    
                double[,] myData = new double[,] {  
                    {1, 2, 3, 4, 5},
                    {2, 3, 8, 5, 2.6},
                    {3, 4, 3, 8, 1},
                    {4, 9, 6, 5, 7.2},
                };
                intensityGraph1.Plot(myData);
             
                double[,] myAppendData = new double[,] { 
                    {1, 1}, 
                    {2, 2},
                    {3, 3},
                    {4, 4},
                };
             
                intensityGraph1.PlotYAppend(myAppendData);
            </code>
            </example>
            <lastupdated>9/28/2011 1:47:47 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.PlotYAppend(System.Double[0:,0:],System.Boolean)">
            <summary>
            Plots a 2D rectangular array of values by appending the array to the existing data in the vertical direction, with an option to transpose the input array before plotting.
            </summary>
            <param name="zData">
            The array of values to plot.
            </param>
            <param name="transposeZData">
            A <see cref="T:System.Boolean"/> value specifying whether to transpose the two-dimensional input array.
            </param>
            <remarks>
            This method calls 
            <see cref="M:NationalInstruments.UI.IntensityPlot.PlotYAppend(System.Double[0:,0:])"/> on the 
            first <see cref="T:NationalInstruments.UI.IntensityPlot"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/>. If there is existing data on the plot, then the horizontal length of the input data and
            horizontal length of the existing data should match. In other words, the length of the first dimension
            of the input data should be equal to <see cref="P:NationalInstruments.UI.IntensityPlot.HistoryCountX"/>.
            <para> 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.IntensityPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.IntensityPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.IntensityXAxis"/>, 
            the first <see cref="T:NationalInstruments.UI.IntensityYAxis"/>, and the first <see cref="T:NationalInstruments.UI.ColorScale"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes"/>, <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxes"/>, and
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales"/>,  respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes"/>, <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxes"/>, 
            or <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.IntensityXAxis"/>, <see cref="T:NationalInstruments.UI.IntensityYAxis"/>, 
            or <see cref="T:NationalInstruments.UI.ColorScale"/> is created and added to the
            collection.
            </para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.PlotYAppend(System.Double[0:,0:])"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.IntensityPlot.PlotYAppend(System.Double[0:,0:])"/>
            on the plot reference.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="zData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		The size of <paramref name="zData"/> does not match the size of existing data.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.IntensityPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.IntensityPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.IntensityPlot.ColorScale"/> of the plot is <see langword="null"/>.
            	</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.IntensityPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.IntensityPlot.YAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.IntensityPlot.ColorScale"/>.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.IntensityPlot.PlotYAppend(System.Double[0:,0:])"/>
            <example>
            The following example demonstrates plotting and 
            appending intensity data in an intensity graph.
            To use this overload, for appending data vertically, 
            the number of columns in the appended data 
            should be equal to the number of rows in the data of the plot.
            	<code lang="VB.NET">    
                Dim myData As Double(,) = New Double(,) {
                    {1, 2, 3, 4, 5},
                    {2, 3, 8, 5, 2.6},
                    {3, 4, 3, 8, 1},
                    {4, 9, 6, 5, 7.2}
                }
                intensityGraph1.Plot(myData)
             
                Dim myAppendData As Double(,) = New Double(,) {
                    {1, 2, 3, 4},
                    {1, 2, 3, 4}
                }
             
                intensityGraph1.PlotYAppend(myAppendData, True)
             
            </code>
            	<code lang="C#">    
                double[,] myData = new double[,] {  
                    {1, 2, 3, 4, 5},
                    {2, 3, 8, 5, 2.6},
                    {3, 4, 3, 8, 1},
                    {4, 9, 6, 5, 7.2},
                };
                intensityGraph1.Plot(myData);
             
                double[,] myAppendData = new double[,] { 
                    {1, 2, 3, 4}, 
                    {1, 2, 3, 4},
                };
             
                intensityGraph1.PlotYAppend(myAppendData, true);
            </code>
            </example>
            <lastupdated>9/28/2011 1:47:53 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.ZoomAroundPoint(System.Single,NationalInstruments.UI.IntensityPlot,System.Double,System.Double)">
            <summary>
            Zooms around the specified data point with the specified zoom factor and reference plot.
            </summary>
            <param name="zoomFactor">
            The percentage to zoom by.
            </param>
            <param name="referencePlot">
            An <see cref="T:NationalInstruments.UI.IntensityPlot"/> to use as the context for <paramref name="xData"/>
            and <paramref name="yData"/>.
            </param>
            <param name="xData">
            The x data value to zoom around.
            </param>
            <param name="yData">
            The y data value to zoom around.
            </param>
            <remarks>
            A <paramref name="zoomFactor"/>
            value less than 1.0 indicates a zoom out, and a value greater than 1.0 indicates a zoom in. For example, a <paramref name="zoomFactor"/>
            value of 0.8 zooms out by 80% and a value of 1.5 zooms in by 150%. If <paramref name="zoomFactor"/> is set to 1.0, the plot
            area is not zoomed because a value of 1.0 zooms by 100% of the view.
            	<para>
            The <paramref name="xData"/> and <paramref name="yData"/> values are 
            mapped to client coordinates using the <see cref="P:NationalInstruments.UI.IntensityPlot.XAxis"/> and 
            <see cref="P:NationalInstruments.UI.IntensityPlot.YAxis"/> properties, respectively, of <paramref name="referencePlot"/>.
            <see cref="P:NationalInstruments.UI.IntensityPlot.XAxis"/> and <see cref="P:NationalInstruments.UI.IntensityPlot.YAxis"/> act 
            as the scale for mapping. The client coordinates are mapped to virtual coordinates using 
            <see cref="M:NationalInstruments.UI.WindowsForms.Graph.PointToVirtual(System.Drawing.Point)"/>. The virtual coordinates are used to call 
            <see cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomAroundPoint(System.Single)"/>.
            </para>
            </remarks>
            <example>The following example demonstrates zooming around a point on an <see cref="T:NationalInstruments.UI.WindowsForms.IntensityGraph" crefType="Unqualified"/> obtained from handling the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown" crefType="Unqualified"/> event. 
            <code lang="VB.NET">
            Public Sub IntensityGraph_PlotAreaMouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
                Dim virtualPoint As PointF
                Dim xPos As Double, yPos As Double
                Dim rangeMin As Double, rangeMax As Double
                Dim zoomFactor As Single = 1.25F
             
                ' Only zoom in when the left mouse button is clicked.
                If e.Button = MouseButtons.Left Then
                    ' Get the virtual position of the mouse click so that we can 
                    ' map to data coordinates on the graph.
                    virtualPoint = intensityGraph.PointToVirtual(e.Location)
             
                    rangeMin = intensityGraph.XAxes(0).Range.Minimum
                    rangeMax = intensityGraph.XAxes(0).Range.Maximum
                    xPos = (rangeMax - rangeMin) * virtualPoint.X + rangeMin
             
                    rangeMin = intensityGraph.YAxes(0).Range.Minimum
                    rangeMax = intensityGraph.YAxes(0).Range.Maximum
                    yPos = (rangeMax - rangeMin) * virtualPoint.Y + rangeMin
             
                    intensityGraph.ZoomAroundPoint(zoomFactor, intensityGraph.Plots(0), xPos, yPos)
                End If
            End Sub
            </code>
            </example>
            <example>
            	<code lang="C#">
            public void IntensityGraph_PlotAreaMouseDown(object sender, MouseEventArgs e)
            {
                PointF virtualPoint;
                double xPos, yPos;
                double rangeMin, rangeMax;
                float zoomFactor = 1.25f;
             
                // Only zoom in when the left mouse button is clicked.
                if (e.Button == MouseButtons.Left)
                {
                    // Get the virtual position of the mouse click so that we can 
                    // map to data coordinates on the graph.
                    virtualPoint = intensityGraph.PointToVirtual(e.Location);
             
                    rangeMin = intensityGraph.XAxes[0].Range.Minimum;
                    rangeMax = intensityGraph.XAxes[0].Range.Maximum;
                    xPos = (rangeMax - rangeMin) * virtualPoint.X + rangeMin;
             
                    rangeMin = intensityGraph.YAxes[0].Range.Minimum;
                    rangeMax = intensityGraph.YAxes[0].Range.Maximum;
                    yPos = (rangeMax - rangeMin) * virtualPoint.Y + rangeMin;
             
                    intensityGraph.ZoomAroundPoint(zoomFactor, intensityGraph.Plots[0], xPos, yPos);
                }
            }
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            The <paramref name="zoomFactor"/> is less than or equal to 0.0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="zoomFactor"/> is <see cref="F:System.Single.NaN"/>,
            <see cref="F:System.Single.NegativeInfinity"/>, or
            <see cref="F:System.Single.PositiveInfinity"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="referencePlot"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:NationalInstruments.UI.WindowsForms.IntensityGraph"/> is not the
            <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <paramref name="referencePlot"/>.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomXY(System.Single,System.Single,System.Single,System.Single)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.UndoZoomPan"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ResetZoomPan"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.PointToVirtual(System.Drawing.Point)"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/>
            <lastupdated>10/5/2010 10:11:46 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.ZoomXY(NationalInstruments.UI.IntensityPlot,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Zooms to the region of the plot area specified by the x location, y location, region width, region height, and
            reference plot.
            </summary>
            <param name="referencePlot">
            An <see cref="T:NationalInstruments.UI.IntensityPlot"/> to use as the context for <paramref name="xData"/>,
            <paramref name="yData"/>, <paramref name="width"/> and <paramref name="height"/>.
            </param>
            <param name="xData">
            The x data value of the corner of the plot area region to zoom.
            </param>
            <param name="yData">
            The y data value of the corner of the plot area region to zoom.
            </param>
            <param name="width">
            The width, in data units, of the plot area region to zoom.
            </param>
            <param name="height">
            The height, in data units, of the plot area region to zoom.
            </param>
            <remarks>
            	<para>
            The <paramref name="xData"/> is the left edge
            of the selection if the x-axis associated with <paramref name="referencePlot"/> is not
            inverted; otherwise, <paramref name="xData"/> is the right edge of the selection. Similarly,
            <paramref name="yData"/> is the bottom edge of the selection if the y-axis associated with
            <paramref name="referencePlot"/> is not inverted; otherwise, <paramref name="yData"/> is the 
            top edge of the selection.
            </para>
            	<para>
            The <paramref name="xData"/> and <paramref name="yData"/> values are 
            mapped to client coordinates using the <see cref="P:NationalInstruments.UI.IntensityPlot.XAxis"/> and 
            <see cref="P:NationalInstruments.UI.IntensityPlot.YAxis"/> properties, respectively, of <paramref name="referencePlot"/>.
            <see cref="P:NationalInstruments.UI.IntensityPlot.XAxis"/> and <see cref="P:NationalInstruments.UI.IntensityPlot.YAxis"/> act 
            as the scale for mapping. The client coordinates are mapped to virtual coordinates using 
            <see cref="M:NationalInstruments.UI.WindowsForms.Graph.RectangleToVirtual(System.Drawing.Rectangle)"/>. The virtual coordinates are used to call 
            <see cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomXY(System.Single,System.Single,System.Single,System.Single)"/>.
            </para>
            </remarks>
            <example>The following example demonstrates zooming to a region defined by  a rectangle. 
            <code lang="VB.NET">
            Dim leftXPoint As Double = 10.0
            Dim bottomYPoint As Double = 20.0
            Dim height As Double = 15.0
            Dim width As Double = 25.0
             
            intensityGraph.ZoomXY(intensityGraph.Plots(0), leftXPoint, bottomYPoint, width, height)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double leftXPoint = 10d;
            double bottomYPoint = 20d;
            double height = 15d;
            double width = 25d;
             
            intensityGraph.ZoomXY(intensityGraph.Plots[0], leftXPoint, bottomYPoint, width, height);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="referencePlot"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:NationalInstruments.UI.WindowsForms.IntensityGraph"/> is not the
            <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <paramref name="referencePlot"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="width"/> or <paramref name="height"/> is
            <see cref="F:System.Single.NaN"/>,
            <see cref="F:System.Single.NegativeInfinity"/>, or
            <see cref="F:System.Single.PositiveInfinity"/>.
            </para>
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/>
            <lastupdated>10/5/2010 10:12:24 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:NationalInstruments.UI.IntensityGraphHitTestInfo"/> that specifies
            where on the control the specified point is located.
            </summary>
            <param name="x">
            The horizontal location of the point to hit test, in client coordinates.
            </param>
            <param name="y">
            The vertical location of the point to hit test, in client coordinates.
            </param>
            <returns>
            An <see cref="T:NationalInstruments.UI.IntensityGraphHitTestInfo"/> that specifies where on
            the control the <paramref name="x"/> and <paramref name="y"/> coordinate is located.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            When hit testing a coordinate inside the plot area of the graph, 
            <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)"/> respects the
            z-order of objects within the plot area. If two plots
            overlap at a particular coordinate, <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)"/>
            tests for the upper plot, and then tests for the lower plot.
            <para>
            		If <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)"/> indicates an object exists, you can use
            <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.GetPlotAt(System.Int32,System.Int32)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.GetXAxisAt(System.Int32,System.Int32)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.GetYAxisAt(System.Int32,System.Int32)"/>,
            and <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.GetColorScaleAt(System.Int32,System.Int32)"/> to obtain
            a reference to the object.
            </para>
            </remarks>
            <example>The following example demonstrates using the <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/> method to determine where a user clicked on a <see cref="T:NationalInstruments.UI.WindowsForms.IntensityGraph" crefType="Unqualified"/> object. 
            <code lang="VB.NET">
            Public Sub IntensityGraph_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
                Dim hitTestRegion As IntensityGraphHitTestInfo
                Dim plot As IntensityPlot
                Dim scale As ColorScale
                Dim index As Integer
                Dim randomColor As Color = Color.FromArgb(RandNumberGenerator.[Next](255), RandNumberGenerator.[Next](255), RandNumberGenerator.[Next](255))
             
                hitTestRegion = intensityGraph.HitTest(e.X, e.Y)
                Select Case hitTestRegion
                    Case IntensityGraphHitTestInfo.ColorScale
                        index = 0
                        scale = intensityGraph.GetColorScaleAt(e.X, e.Y)
                        scale.CaptionBackColor = randomColor
                        For Each entry As ColorMapEntry In scale.ColorMap
                            Debug.WriteLine(String.Format("Color map entry {0} has value {1} and color {2}", index, entry.Value, entry.Color.Name))
                            index = index + 1
                        Next
                        Exit Select
                    Case IntensityGraphHitTestInfo.Plot
                        plot = intensityGraph.GetPlotAt(e.X, e.Y)
                        Debug.WriteLine(string.Format("tooltips enabled: {0}", plot.ToolTipsEnabled))
                        Debug.WriteLine(string.Format("interpolation enabled: {0}", plot.PixelInterpolation))
                        Debug.WriteLine(string.Format("{0} x values", plot.HistoryCountX))
                        Debug.WriteLine(string.Format("{0} y values", plot.HistoryCountY))
                        Exit Select
                    Case IntensityGraphHitTestInfo.PlotArea
                        Debug.WriteLine("Plot area was clicked")
                        Exit Select
                    Case IntensityGraphHitTestInfo.XAxis
                        Dim xAxis As IntensityXAxis = intensityGraph.GetXAxisAt(e.X, e.Y)
                        xAxis.CaptionBackColor = randomColor
                        Debug.WriteLine("X-Axis was clicked")
                        Debug.WriteLine(String.Format("X-Axis range minimum: {0}, X-Axis range maximum: {1}", xAxis.Range.Minimum, xAxis.Range.Maximum))
                        Exit Select
                    Case IntensityGraphHitTestInfo.YAxis
                        Dim yAxis As IntensityYAxis = intensityGraph.GetYAxisAt(e.X, e.Y)
                        yAxis.CaptionBackColor = randomColor
                        Debug.WriteLine("Y-Axis was clicked")
                        Debug.WriteLine(String.Format("Y-Axis range minimum: {0}, Y-Axis range maximum: {1}", yAxis.Range.Minimum, yAxis.Range.Maximum))
                        Exit Select
                    Case IntensityGraphHitTestInfo.None
                        Debug.WriteLine("Unknown graph area was clicked")
                        Exit Select
                End Select
            End Sub
            </code>
            </example>
            <example>
            	<code lang="C#">
            public void IntensityGraph_MouseDown(object sender, MouseEventArgs e)
            {
                IntensityGraphHitTestInfo hitTestRegion;
                IntensityPlot plot;
                ColorScale scale;
                int index;
                Color randomColor = Color.FromArgb(RandNumberGenerator.Next(255),
                                                    RandNumberGenerator.Next(255),
                                                    RandNumberGenerator.Next(255));
             
                hitTestRegion = intensityGraph.HitTest(e.X, e.Y);
                switch (hitTestRegion)
                {
                    case IntensityGraphHitTestInfo.ColorScale:
                        index = 0;
                        scale = intensityGraph.GetColorScaleAt(e.X, e.Y);
                        scale.CaptionBackColor = randomColor;
                        foreach (ColorMapEntry entry in scale.ColorMap)
                        {
                            Debug.WriteLine(string.Format("Color map entry {0} has value {1} and color {2}",
                                index++, entry.Value, entry.Color.Name));
                        }
                        break;
                    case IntensityGraphHitTestInfo.Plot:
                        plot = intensityGraph.GetPlotAt(e.X, e.Y);
                        Debug.WriteLine(string.Format("tooltips enabled: {0}", plot.ToolTipsEnabled));
                        Debug.WriteLine(string.Format("interpolation enabled: {0}", plot.PixelInterpolation));
                        Debug.WriteLine(string.Format("{0} x values", plot.HistoryCountX));
                        Debug.WriteLine(string.Format("{0} y values", plot.HistoryCountY));
                        break;
                    case IntensityGraphHitTestInfo.PlotArea:
                        Debug.WriteLine("Plot area was clicked");
                        break;
                    case IntensityGraphHitTestInfo.XAxis:
                        IntensityXAxis xAxis = intensityGraph.GetXAxisAt(e.X, e.Y);
                        xAxis.CaptionBackColor = randomColor;
                        Debug.WriteLine("X-Axis was clicked");
                        Debug.WriteLine(string.Format("X-Axis range minimum: {0}, X-Axis range maximum: {1}",
                            xAxis.Range.Minimum, xAxis.Range.Maximum));
                        break;
                    case IntensityGraphHitTestInfo.YAxis:
                        IntensityYAxis yAxis = intensityGraph.GetYAxisAt(e.X, e.Y);
                        yAxis.CaptionBackColor = randomColor;
                        Debug.WriteLine("Y-Axis was clicked");
                        Debug.WriteLine(string.Format("Y-Axis range minimum: {0}, Y-Axis range maximum: {1}",
                            yAxis.Range.Minimum, yAxis.Range.Maximum));
                        break;
                    case IntensityGraphHitTestInfo.None:
                        Debug.WriteLine("Unknown graph area was clicked");
                        break;
                }
            }
            </code>
            </example>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.GetPlotAt(System.Int32,System.Int32)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.GetXAxisAt(System.Int32,System.Int32)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.GetYAxisAt(System.Int32,System.Int32)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.GetColorScaleAt(System.Int32,System.Int32)"/>
            <lastupdated>10/27/2010 1:21:25 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.GetPlotAt(System.Int32,System.Int32)">
            <summary>
            Gets the plot at the specified location.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for a plot.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for a plot.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.IntensityPlot"/> at the specified location. If 
            there is no plot at the specified location, the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            <para>
            You can use <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/> to determine if there is an <see cref="T:NationalInstruments.UI.IntensityPlot"/> at the specified location.
            </para>
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>7/14/2010 4:04:52 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.GetPlotAt(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the plot at the specified location along with the indices to the corresponding 
            x and y data value.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for a plot.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for a plot.
            </param>
            <param name="xIndex">
            Upon return, contains the index to the x data value at the specified location, which is also the 
            first index to the z data value at the specified location.
            </param>
            <param name="yIndex">
            Upon return, contains the index to the y data value at the specified location, which is also the 
            second index to the z data value at the specified location.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.IntensityPlot"/> at the specified location. If 
            there is no plot at the specified location, <paramref name="xIndex"/> and <paramref name="yIndex"/> are set to 
            -1, and the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            <para>
            You can use <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/> to determine if there is an <see cref="T:NationalInstruments.UI.IntensityPlot"/> at the specified location.
            </para>
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>7/14/2010 3:55:47 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.GetPlotAt(System.Int32,System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the plot at the specified location along with the corresponding x, y, and z data values.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for a plot.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for a plot.
            </param>
            <param name="xData">
            Upon return, contains the x data value at the specified location.
            </param>
            <param name="yData">
            Upon return, contains the y data value at the specified location.
            </param>
            <param name="zData">
            Upon return, contains the z data value at the specified location.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.IntensityPlot"/> at the specified location. If 
            there is no plot at the specified location, <paramref name="xData"/>, <paramref name="yData"/>, and
            <paramref name="zData"/> are set to <see cref="F:System.Double.NaN"/>, and the method 
            returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            <para>
            You can use <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/> to determine if there is an <see cref="T:NationalInstruments.UI.IntensityPlot"/> at the specified location.
            </para>
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>7/14/2010 3:54:24 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.GetPlotAt(System.Int32,System.Int32,System.Double@,System.Double@,System.Double@,System.Int32@,System.Int32@)">
            <summary>
            Gets the plot at the specified location along with the corresponding x, y, and z
            data values and the index to the x and y data values.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for a plot.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for a plot.
            </param>
            <param name="xData">
            Upon return, contains the x data value at the specified location.
            </param>
            <param name="yData">
            Upon return, contains the y data value at the specified location.
            </param>
            <param name="zData">
            Upon return, contains the z data value at the specified location.
            </param>
            <param name="xIndex">
            Upon return, contains the index to the x data value at the specified location, which is also the 
            first index to the z data value at the specified location.
            </param>
            <param name="yIndex">
            Upon return, contains the index to the y data value at the specified location, which is also the 
            second index to the z data value at the specified location.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.IntensityPlot"/> at the specified location. If 
            there is no plot at the specified location, <paramref name="xData"/>, <paramref name="yData"/>, and
            <paramref name="zData"/> are set to <see cref="F:System.Double.NaN"/>, 
            <paramref name="xIndex"/> and <paramref name="yIndex"/> are set to -1, and the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            <para>
            You can use <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/> to determine if there is an <see cref="T:NationalInstruments.UI.IntensityPlot"/> at the specified location. Refer to <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/> for an example.
            </para>
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>10/3/2010 10:33:22 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.GetXAxisAt(System.Int32,System.Int32)">
            <summary>
            Gets the x axis at the specified location.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for an axis.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for an axis.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.IntensityXAxis"/> at the specified location. If 
            there is no axis at the specified location, the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)"/>
            <remarks>
            You can use <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/> to determine if there is an <see cref="T:NationalInstruments.UI.IntensityXAxis"/> at the specified location. Refer to 
            <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/>  for an example.
            </remarks>
            <lastupdated>10/3/2010 10:33:55 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.GetYAxisAt(System.Int32,System.Int32)">
            <summary>
            Gets the y axis at the specified location.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for an axis.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for an axis.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.IntensityYAxis"/> at the specified location. If 
            there is no axis at the specified location, the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)"/>
            <remarks>
            You can use <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/> to determine if there is an <see cref="T:NationalInstruments.UI.IntensityYAxis"/> at the specified location. Refer to 
            <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/>  for an example.
            </remarks>
            <lastupdated>10/3/2010 10:34:39 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.GetColorScaleAt(System.Int32,System.Int32)">
            <summary>
            Gets the color scale at the specified location.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for an axis.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for an axis.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.ColorScale"/> at the specified location. If 
            there is no axis at the specified location, the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)"/>
            <remarks>
            You can use <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/> to determine if there is a <see cref="T:NationalInstruments.UI.ColorScale"/> at the specified location. Refer to <see cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/> for an example.
            </remarks>
            <lastupdated>10/3/2010 10:35:13 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.GetCursorAt(System.Int32,System.Int32)">
            <summary>
            Gets the cursor at the specified location.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for a cursor.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for a cursor.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.IntensityCursor"/> at the specified location. If 
            there is no cursor at the specified location, the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>10/5/2010 1:57:11 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.GetAnnotationAt(System.Int32,System.Int32)">
            <summary>
            Gets the annotation at the specified location.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for an annotation.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for an annotation.
            </param>
            <returns> 
            The <see cref="T:NationalInstruments.UI.IntensityAnnotation"/> at the specified location. If 
            there is no annotation at the specified location, the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            <note type="note">
            The arrow of the annotation is not used to determine if an annotation is located at the specified coordinates.
            </note>
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>10/5/2010 1:57:11 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawPlot">
            <summary>
            Occurs after a plot is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawPlot"/> to participate in the drawing of the plot.
            Only plots contained in the graph plot collection raise
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawPlot"/> after the plot has
            completed drawing. You can use <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawPlot"/> in conjunction with custom drawing 
            to further annotate the plot. If you set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property
            to <see langword="true"/> in the event arguments of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawPlot"/> event, this event is not raised for that plot.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawPlot"/>
            <lastupdated>7/14/2010 4:05:01 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawPlot">
            <summary>
            Occurs before a plot is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawPlot"/> 
            to participate in the drawing of the plot. Only plots contained in the graph plot collection
            raise <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawPlot"/> before the plot begins
            drawing. Set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
             property of the event argument to <see langword="true"/> to cancel drawing of the
            plot. If you set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawPlot"/> event is not raised for that plot. You must provide all of the
            implementation for drawing the plot if <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <see langword="true"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawPlot"/>
            <lastupdated>7/14/2010 4:05:04 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.IntensityGraph.PlotDataChanged">
            <summary>
            Occurs when a new set of data is plotted on a plot that is contained in the graph plot collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>7/14/2010 4:05:16 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AnnotationsChanged">
            <summary>
            Occurs when the content of the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Annotations"/> collection
            changes.
            </summary>
            <remarks> 
            The content of the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Annotations"/> collection changes
            through an add, remove, insert, or clear operation on the collection.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Annotations"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnAnnotationsChanged(System.ComponentModel.CollectionChangeEventArgs)"/>
            <lastupdated>10/5/2010 1:57:19 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawPointAnnotation">
            <summary>
            Occurs before a point annotation is drawn.
            </summary>
            <remarks> 
            Use <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawPointAnnotation"/> 
            to participate in the drawing of the point annotation. Only point annotations contained in the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Annotations"/> collection
            raise <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawPointAnnotation"/> before the point annotation begins
            drawing. Set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            property of the event argument to <see langword="true"/> to cancel drawing of the
            point annotation. If you set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawPointAnnotation"/> is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawPointAnnotation"/> event is not raised for that point annotation. You must provide all of the
            implementation for drawing the point annotation if <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <see langword="true"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>10/5/2010 1:57:20 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawPointAnnotation">
            <summary>
            Occurs after a point annotation is drawn.
            </summary>
            <remarks> 
            Use <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawPointAnnotation"/> to participate in the drawing of the point annotation.
            Only point annotations contained in the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Annotations"/> collection raise
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawPointAnnotation"/> after the annotation has
            completed drawing. Use <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawPointAnnotation"/> in conjunction with custom drawing 
            to further annotate the point annotation. If you set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property
            to <see langword="true"/> in the event arguments of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawPointAnnotation"/> event, this event is not raised for that annotation.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnAfterDrawPointAnnotation(NationalInstruments.UI.AfterDrawIntensityPointAnnotationEventArgs)"/>
            <lastupdated>10/5/2010 1:57:18 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawRangeAnnotation">
            <summary>
            Occurs before a range annotation is drawn.
            </summary>
            <remarks> 
            Use <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawRangeAnnotation"/> 
            to participate in the drawing of the range annotation. Only range annotations contained in the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Annotations"/> collection
            raise <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawRangeAnnotation"/> before the range annotation begins
            drawing. Set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            property of the event argument to <see langword="true"/> to cancel drawing of the
            range annotation. If you set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawRangeAnnotation"/> is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawRangeAnnotation"/> event is not raised for that range annotation. You must provide all of the
            implementation for drawing the range annotation if <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <see langword="true"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>10/5/2010 1:57:21 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawRangeAnnotation">
            <summary>
            Occurs after a range annotation is drawn.
            </summary>
            <remarks> 
            Use <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawRangeAnnotation"/> to participate in the drawing of the range annotation.
            Only range annotations contained in the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Annotations"/> collection raise
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawRangeAnnotation"/> after the annotation has
            completed drawing. Use <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawRangeAnnotation"/> in conjunction with custom drawing 
            to further annotate the range annotation. If you set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property
            to <see langword="true"/> in the event arguments of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawRangeAnnotation"/> event, this event is not raised for that annotation.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnAfterDrawRangeAnnotation(NationalInstruments.UI.AfterDrawIntensityRangeAnnotationEventArgs)"/>
            <lastupdated>10/5/2010 1:57:19 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDragAnnotationCaption">
            <summary>
            Occurs before an annotation caption is dragged.
            </summary>
            <remarks> 
            Use <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDragAnnotationCaption"/> to prevent the annotation caption from being dragged to
            specific values or a range of values. Only annotations contained in the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Annotations"/> collection raise 
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDragAnnotationCaption"/> before the annotation caption begins moving. Set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
             property of the event argument to <see langword="true"/> to prevent the annotation caption from being dragged.
            If you set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDragAnnotationCaption"/> is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDragAnnotationCaption"/> event is not raised for that annotation.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnBeforeDragAnnotationCaption(NationalInstruments.UI.BeforeDragIntensityAnnotationCaptionEventArgs)"/>
            <lastupdated>10/5/2010 1:57:20 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDragAnnotationCaption">
            <summary>
            Occurs after an annotation caption has been dragged.
            </summary>
            <remarks>
            Only annotations contained in the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Annotations"/> collection 
            raise the <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDragAnnotationCaption"/> event after 
            the annotation caption has been dragged. If you set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property
            to <see langword="true"/> in the event arguments of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDragAnnotationCaption"/> event, this event is not raised for that annotation.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnAfterDragAnnotationCaption(NationalInstruments.UI.AfterDragIntensityAnnotationCaptionEventArgs)"/>
            <lastupdated>10/5/2010 1:57:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxesChanged">
            <summary>
            Occurs when the content of the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes"/> collection
            changes.
            </summary>
            <remarks>
            The content of the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes"/> collection changes
            through an add, remove, insert, or clear operation on the collection.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes"/>
            <lastupdated>7/14/2010 4:05:20 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxisRangeChanged">
            <summary>
            Occurs when the range of an <see cref="T:NationalInstruments.UI.IntensityXAxis"/> in the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes"/> collection
            of the graph changes.
            </summary>
            <remarks>
            Only <see cref="T:NationalInstruments.UI.IntensityXAxis"/> objects contained in the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxes"/> collection raise the 
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxisRangeChanged"/> event.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.Scale.Range"/>
            <lastupdated>7/14/2010 4:05:24 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxesChanged">
            <summary>
            Occurs when the content of the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxes"/> collection
            changes.
            </summary>
            <remarks>
            The content of the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxes"/> collection changes
            through an add, remove, insert, or clear operation on the collection.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxes"/>
            <lastupdated>7/14/2010 4:05:27 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxisRangeChanged">
            <summary>
            Occurs when the range of an <see cref="T:NationalInstruments.UI.IntensityYAxis"/> in the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxes"/> collection
            of the graph changes.
            </summary>
            <remarks>
            Only <see cref="T:NationalInstruments.UI.IntensityYAxis"/> objects contained in the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxes"/> collection raise the 
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxisRangeChanged"/> event.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.Scale.Range"/>
            <lastupdated>7/14/2010 4:05:31 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScalesChanged">
            <summary>
            Occurs when the content of the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales"/> collection
            changes.
            </summary>
            <remarks>
            The content of the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales"/> collection changes
            through an add, remove, insert, or clear operation on the collection.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales"/>
            <lastupdated>7/14/2010 4:05:13 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScaleRangeChanged">
            <summary>
            Occurs when the range of a <see cref="T:NationalInstruments.UI.ColorScale"/> in the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales"/> collection
            of the graph changes.
            </summary>
            <remarks>
            Only <see cref="T:NationalInstruments.UI.ColorScale"/> objects contained in the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScales"/> collection raise the 
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScaleRangeChanged"/> event.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.Scale.Range"/>
            <lastupdated>7/14/2010 4:05:08 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterMoveCursor">
            <summary>
            Occurs after a cursor has been moved.
            </summary>
            <remarks>
            Only cursors contained in the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Cursors"/> collection 
            raise the <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterMoveCursor"/> event after 
            the the cursor has completed moving. If you set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property
            to <see langword="true"/> in the event arguments of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeMoveCursor"/> event, this event is not raised for that cursor.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnAfterMoveCursor(NationalInstruments.UI.AfterMoveIntensityCursorEventArgs)"/>
            <lastupdated>10/5/2010 1:57:19 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawCursor">
            <summary>
            Occurs after a cursor is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawCursor"/> to participate in the drawing of the cursor.
            Only cursors contained in the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Cursors"/> collection raise
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawCursor"/> after the cursor has
            completed drawing. Use <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawCursor"/> in conjunction with custom drawing 
            to further annotate the cursor. If you set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property
            to <see langword="true"/> in the event arguments of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawCursor"/> event, this event is not raised for that cursor.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>10/5/2010 1:57:18 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeMoveCursor">
            <summary>
            Occurs before a cursor is moved.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeMoveCursor"/> to prevent the cursor from moving to
            specific values or range of values. Only cursors contained in the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Cursors"/> collection raise 
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeMoveCursor"/> before the cursor begins moving. Set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
             property of the event argument to <see langword="true"/> to prevent the cursor from moving.
            If you set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeMoveCursor"/> is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterMoveCursor"/> event is not raised for that cursor. You must provide all of the
            implementation for drawing the cursor if <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <see langword="true"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnBeforeMoveCursor(NationalInstruments.UI.BeforeMoveIntensityCursorEventArgs)"/>
            <lastupdated>10/5/2010 1:57:21 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawCursor">
            <summary>
            Occurs before a cursor is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawCursor"/> 
            to participate in the drawing of the cursor. Only cursors contained in the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Cursors"/> collection
            raise <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawCursor"/> before the cursor begins
            drawing. Set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            property of the event argument to <see langword="true"/> to cancel drawing of the
            cursor. If you set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawCursor"/> is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawCursor"/> event is not raised for that cursor. You must provide all of the
            implementation for drawing the cursor if <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <see langword="true"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>10/5/2010 1:57:20 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.IntensityGraph.CursorsChanged">
            <summary>
            Occurs when the content of the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Cursors"/> collection
            changes.
            </summary>
            <remarks>
            The content of the <see cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Cursors"/> collection changes
            through an add, remove, insert, or clear operation on the collection.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.IntensityGraph.Cursors"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnCursorsChanged(System.ComponentModel.CollectionChangeEventArgs)"/>
            <lastupdated>10/5/2010 1:57:22 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnAnnotationsChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AnnotationsChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.ComponentModel.CollectionChangeEventArgs"/> that contains the
            event data. 
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AnnotationsChanged"/>
            <lastupdated>10/5/2010 1:57:14 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnAfterDrawPointAnnotation(NationalInstruments.UI.AfterDrawIntensityPointAnnotationEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawPointAnnotation"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterDrawIntensityPointAnnotationEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/5/2010 1:57:13 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnBeforeDrawPointAnnotation(NationalInstruments.UI.BeforeDrawIntensityPointAnnotationEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawPointAnnotation"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.BeforeDrawIntensityPointAnnotationEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/5/2010 1:57:16 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnAfterDrawRangeAnnotation(NationalInstruments.UI.AfterDrawIntensityRangeAnnotationEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawRangeAnnotation"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterDrawIntensityRangeAnnotationEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/5/2010 1:57:14 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnBeforeDrawRangeAnnotation(NationalInstruments.UI.BeforeDrawIntensityRangeAnnotationEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawRangeAnnotation"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.BeforeDrawIntensityRangeAnnotationEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/5/2010 1:57:16 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnAfterDragAnnotationCaption(NationalInstruments.UI.AfterDragIntensityAnnotationCaptionEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDragAnnotationCaption"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterDragIntensityAnnotationCaptionEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/5/2010 1:57:12 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnBeforeDragAnnotationCaption(NationalInstruments.UI.BeforeDragIntensityAnnotationCaptionEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDragAnnotationCaption"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.BeforeDragIntensityAnnotationCaptionEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/5/2010 1:57:15 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.IntensityGraph"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.IntensityGraph"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            </remarks>
            <seealso cref="M:System.IDisposable.Dispose"/>
            <seealso cref="T:System.IDisposable"/>
            <lastupdated>7/14/2010 3:51:45 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnBeforeDrawPlot(NationalInstruments.UI.BeforeDrawIntensityPlotEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawPlot"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.BeforeDrawIntensityPlotEventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawPlot"/>
            <lastupdated>7/14/2010 4:03:44 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnAfterDrawPlot(NationalInstruments.UI.AfterDrawIntensityPlotEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawPlot"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterDrawIntensityPlotEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawPlot"/>
            <lastupdated>7/14/2010 4:03:40 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnPlotDataChanged(NationalInstruments.UI.IntensityPlotDataChangedEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.PlotDataChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.IntensityPlotDataChangedEventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.PlotDataChanged"/>
            <lastupdated>7/14/2010 4:03:59 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnXAxisRangeChanged(NationalInstruments.UI.IntensityXAxisEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxisRangeChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.IntensityXAxisEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxisRangeChanged"/>
            <seealso cref="P:NationalInstruments.UI.Scale.Range"/>
            <lastupdated>7/14/2010 4:04:06 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnXAxesChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxesChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.ComponentModel.CollectionChangeEventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.XAxesChanged"/>
            <lastupdated>7/14/2010 4:04:03 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnYAxisRangeChanged(NationalInstruments.UI.IntensityYAxisEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxisRangeChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.IntensityYAxisEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxisRangeChanged"/>
            <seealso cref="P:NationalInstruments.UI.Scale.Range"/>
            <lastupdated>7/14/2010 4:04:13 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnYAxesChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxesChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.ComponentModel.CollectionChangeEventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.YAxesChanged"/>
            <lastupdated>7/14/2010 4:04:10 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnColorScaleRangeChanged(NationalInstruments.UI.ColorScaleEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScaleRangeChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.ColorScaleEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScaleRangeChanged"/>
            <seealso cref="P:NationalInstruments.UI.Scale.Range"/>
            <lastupdated>7/14/2010 4:03:47 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnColorScalesChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScalesChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.ComponentModel.CollectionChangeEventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.ColorScalesChanged"/>
            <lastupdated>7/14/2010 4:03:51 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnBeforeDrawCursor(NationalInstruments.UI.BeforeDrawIntensityCursorEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeDrawCursor"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.BeforeDrawIntensityCursorEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/5/2010 1:57:15 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnAfterDrawCursor(NationalInstruments.UI.AfterDrawIntensityCursorEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterDrawCursor"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterDrawIntensityCursorEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/5/2010 1:57:12 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnBeforeMoveCursor(NationalInstruments.UI.BeforeMoveIntensityCursorEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeMoveCursor"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.BeforeMoveIntensityCursorEventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.BeforeMoveCursor"/>
            <lastupdated>10/5/2010 1:57:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnAfterMoveCursor(NationalInstruments.UI.AfterMoveIntensityCursorEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterMoveCursor"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterMoveIntensityCursorEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.AfterMoveCursor"/>
            <lastupdated>10/5/2010 1:57:14 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.IntensityGraph.OnCursorsChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.CursorsChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.ComponentModel.CollectionChangeEventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.IntensityGraph.CursorsChanged"/>
            <lastupdated>10/5/2010 1:57:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.Knob">
            <summary>
            Represents a Measurement Studio Windows Forms knob control to display numeric
            values.
            </summary>
            <threadsafety safety="control"/>
            <remarks>
            	Typically, you use <see cref="T:NationalInstruments.UI.WindowsForms.Knob"/> as an input control. As a result, the default value of <see cref="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.InteractionMode"/>
            is a bitwise combination of <see cref="F:NationalInstruments.UI.RadialNumericPointerInteractionModes.DragPointer"/>
            and <see cref="F:NationalInstruments.UI.RadialNumericPointerInteractionModes.SnapPointer"/>. You can use <see cref="P:NationalInstruments.UI.WindowsForms.Knob.KnobStyle"/> to change the appearance
            of the <see cref="T:NationalInstruments.UI.WindowsForms.Knob"/>.  
            <para>
            The default value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.PointerColor"/> has been
            changed to give the control a more knob-like appearance. The default value of 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.PointerColor"/> is 
            <see cref="P:System.Drawing.SystemColors.Control"/>.
            	</para>
            	<note type="note">
            For more information about the knob control, refer to <see keyword="UsingNINETNumericPointerControlsWinForms" keywordType="mstudio">Using the Measurement Studio Windows Forms Numeric Pointer .NET Controls</see>.
            </note>
            </remarks>
            <lastupdated>9/28/2011 12:18:04 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Knob.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.Knob"/> class.
            </summary>
            <lastupdated>4/28/2004 4:30:10 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Knob.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.Knob"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.Knob"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            </remarks>
            <lastupdated>4/28/2004 4:30:07 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Knob.DefaultSize">
            <summary>
            Gets the default size of the control.
            </summary>
            <value>
            The default value is a <see cref="T:System.Drawing.Size"/> with a width of 160 and a height of 152.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.DefaultSize"/>.
            </remarks>
            <seealso cref="P:System.Windows.Forms.Control.DefaultSize"/>
            <seealso cref="T:System.Windows.Forms.Control"/>
            <lastupdated>4/28/2004 4:30:02 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Knob.KnobStyle">
            <summary>
            Gets or sets the style that determines the appearance of the knob.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.KnobStyle"/> that determines the appearance of
            the knob. The default value is <see cref="P:NationalInstruments.UI.KnobStyle.RaisedWithThumb3D"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <lastupdated>4/28/2004 4:30:05 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Knob.OnKnobStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Knob.KnobStyleChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Knob.KnobStyleChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Knob.KnobStyle"/>
            <lastupdated>7/13/2004 5:14:37 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Knob.KnobStyleChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Knob.KnobStyle"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Knob.KnobStyle"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Knob.OnKnobStyleChanged(System.EventArgs)"/>
            <lastupdated>4/28/2004 4:30:17 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.Led">
            <summary>
            Represents a Measurement Studio Windows Forms LED control to display Boolean states.
            </summary>
            <threadsafety safety="control"/>
            <remarks>
            	<para>
            Typically, you use an LED to display Boolean data. As a result, the default value of
             <see cref="P:NationalInstruments.UI.WindowsForms.Boolean.InteractionMode"/> is 
            <see cref="F:NationalInstruments.UI.BooleanInteractionMode.Indicator"/>. 
            You can use <see cref="P:NationalInstruments.UI.WindowsForms.Led.BlinkMode"/> and <see cref="P:NationalInstruments.UI.WindowsForms.Led.BlinkInterval"/>
            to configure the LED to blink at a specified time and rate. You can use <see cref="P:NationalInstruments.UI.WindowsForms.Led.LedStyle"/>
            to change the appearance of the LED.
                </para>
            	<note type="note">
            For more information about the LED control, refer to <see keyword="UsingNINETSwitchLEDWinForms" keywordType="mstudio">Using the Measurement Studio Windows Forms Switch and LED .NET Controls</see> or <see keyword="KeyNETSwitchLEDFeaturesWinForms" keywordType="mstudio">Key Measurement Studio Windows Forms Switch and LED .NET Control Features</see>.
            </note>
            </remarks>
            <lastupdated>9/17/2008 3:19:39 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Led.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.Led"/> class.
            </summary>
            <lastupdated>7/1/2003 12:09:24 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Led.DefaultSize">
            <summary>
            Gets the default size of the control.
            </summary>
            <value>The default value is <see cref="T:System.Drawing.Size"/> with a width of 64 and height of 64.</value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.DefaultSize"/>.
            </remarks>
            <lastupdated>7/1/2003 3:45:54 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Led.LedStyle">
            <summary>
            Gets or sets the visual style of the LED.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.LedStyle"/> of the LED control.
            The default value is <see cref="P:NationalInstruments.UI.LedStyle.Round"/>.
            </value>
            <remarks>
            You can set this property to any instance of <see cref="T:NationalInstruments.UI.LedStyle"/>, including
            the <see cref="T:NationalInstruments.UI.LedStyle"/> properties and any custom class that
            implements the <see cref="T:NationalInstruments.UI.LedStyle"/> base class.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <seealso cref="T:NationalInstruments.UI.LedStyle"/>
            <lastupdated>7/1/2003 12:14:23 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Led.BlinkInterval">
            <summary>
            Gets or sets the blink interval of the LED.
            </summary>
            <value>
            A <see cref="T:System.TimeSpan"/> that represents the time interval that the LED
            stays on and off when blinking.  The default value is 500 ms.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            The specified value is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="P:System.TimeSpan.TotalMilliseconds"/> is greater than <see cref="F:System.Int32.MaxValue"/>.
            </para>
            </exception>
            <remarks>
            	<see cref="P:NationalInstruments.UI.WindowsForms.Led.BlinkInterval"/> uses 
            <see cref="P:System.Windows.Forms.Timer.Interval"/> to set the time between states. <see cref="P:System.Windows.Forms.Timer.Interval"/>
            is an <see cref="T:System.Int32"/>, so if <see cref="P:System.TimeSpan.TotalMilliseconds"/> is greater than <see cref="F:System.Int32.MaxValue"/>,
            an <see cref="T:System.ArgumentOutOfRangeException"/> is thrown.
            <note type="note"><see cref="T:System.TimeSpan"/> will always
            be represented in the culture invariant string format because of limitations in the .NET Framework.
            </note>
            </remarks>
            <seealso cref="T:System.Windows.Forms.Timer"/>
            <lastupdated>3/26/2008 12:07:07 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Led.BlinkMode">
            <summary>
            Gets or sets when the LED control blinks.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.LedBlinkMode"/> that indicates when the LED blinks.  
            The default value is <see cref="F:NationalInstruments.UI.LedBlinkMode.None"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not an <see cref="T:NationalInstruments.UI.LedBlinkMode"/> value.
            </exception>
            <lastupdated>7/8/2003 10:52:02 AM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Led.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by <see cref="T:NationalInstruments.UI.WindowsForms.Led"/>.
            </summary>
            <param name="disposing">
            If <see langword="true"/>, this method releases managed and unmanaged resources. If <see langword="false"/>, this method releases
            only unmanaged resources.
            </param>
            <remarks>
            	<para>
            The public <see cref="M:System.IDisposable.Dispose"/> method and the finalizer call this method.The public <see cref="M:System.IDisposable.Dispose"/>
            invokes the protected Dispose(Boolean) method with <paramref name="disposing"/>
            set to <see langword="true"/>. The finalizer invokes the protected Dispose(Boolean) method with <paramref name="disposing"/> set to <see langword="false"/>.
            </para>
            	<para>
            When you set the <paramref name="disposing"/> parameter to <see langword="true"/>, this method releases all
            resources held by managed objects that this <see cref="T:NationalInstruments.UI.WindowsForms.Led"/>
            references. This method invokes the <see cref="M:System.IDisposable.Dispose"/> method of each referenced object.
            </para>
            </remarks>
            <lastupdated>7/1/2003 12:02:30 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Led.OnLedStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Led.LedStyleChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Led.LedStyleChanged"/>
            <lastupdated>7/13/2004 5:16:40 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Led.OnBlinkModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Led.BlinkModeChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Led.BlinkModeChanged"/>
            <lastupdated>7/13/2004 5:16:26 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Led.OnBlinkIntervalChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Led.BlinkIntervalChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Led.BlinkIntervalChanged"/>
            <lastupdated>7/13/2004 5:16:00 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Led.OnCursorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.CursorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:System.Windows.Forms.Control.CursorChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.Cursor"/>
            <lastupdated>3/15/2006 1:21:57 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Led.BlinkModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Led.BlinkMode"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Led.BlinkMode"/>
            <lastupdated>6/26/2003 12:35:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Led.BlinkIntervalChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Led.BlinkInterval"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Led.BlinkInterval"/>
            <lastupdated>6/26/2003 12:35:37 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Led.LedStyleChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Led.LedStyle"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Led.LedStyle"/>
            <lastupdated>6/26/2003 12:35:52 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Led.Clone">
            <summary>
            Creates a new object that is a copy of this instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <remarks>
            	<see cref="M:NationalInstruments.UI.WindowsForms.Led.Clone"/> creates a new object that is a deep copy
            of <see cref="T:NationalInstruments.UI.WindowsForms.Led"/>.
            <para>
            A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the 
            original object. If the field is a value type, a bit-by-bit copy of the field is performed. If the field is a reference type, the 
            reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the 
            clone point to the same object. In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by 
            the fields in the object.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:System.ICloneable"/>
            <lastupdated>3/15/2006 1:21:49 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Led.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Led.PropertyChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Led.PropertyChanged"/>
            <lastupdated>3/15/2006 1:22:03 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Led.PropertyChanged">
            <summary>
            Occurs when a property on the control changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>3/15/2006 1:22:14 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Led.EnableBasePropertyChangedEvents">
            <summary>
            Enables <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event 
            from being raised when the properties defined in the <see cref="T:System.Windows.Forms.Control"/> base class
            are changed.
            </summary>
            <remarks>
            	<para>
            You must call <see cref="M:NationalInstruments.UI.WindowsForms.Led.DisableBasePropertyChangedEvents"/>
            after you have finished using the <see cref="T:NationalInstruments.UI.WindowsForms.Led"/> to reclaim memory and perform cleanup.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            <lastupdated>9/11/2007 10:21:07 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Led.DisableBasePropertyChangedEvents">
            <summary>
            Disables <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event 
            from being raised when the properties defined in the <see cref="T:System.Windows.Forms.Control"/> base class
            are changed.
            </summary>
            <remarks>
            	<para>
            If you have called <see cref="M:NationalInstruments.UI.WindowsForms.Led.EnableBasePropertyChangedEvents"/>, then
            you must call <see cref="M:NationalInstruments.UI.WindowsForms.Led.DisableBasePropertyChangedEvents"/>
            after you have finished using the <see cref="T:NationalInstruments.UI.WindowsForms.Led"/> to reclaim memory and perform cleanup.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            <lastupdated>9/11/2007 10:20:50 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.LedArray">
            <summary>
            Represents the array of Measurement Studio Windows Forms <see cref="T:NationalInstruments.UI.WindowsForms.Led"/>
            controls.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValues(System.Boolean[])"/> provides
            the ability to set the data values displayed by the items of the array. Setting the data
            values raises the <see cref="E:NationalInstruments.UI.WindowsForms.BooleanArray`1.ValuesChanged"/>
            event. You can obtain the data values of the control by calling 
            <see cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.GetValues"/>.
            </para>
            	<para>
            You can configure the scaling behavior of the array by specifying a fixed number of items
            in the array or by allowing the array to automatically adjust the number of items in the
            array based on the number of specified data values using <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ScaleMode"/>.
            Use <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.Count"/> to obtain the 
            number of items in the array.
            </para>
            </remarks>
            <lastupdated>8/23/2006 10:20:44 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.LedArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.LedArray"/> class.
            </summary>
            <lastupdated>3/15/2006 1:23:17 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.LedArray.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.LedArray"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.LedArray"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            	<note type="note">
            If you create 2D arrays of controls, then you must call <see cref="M:System.IDisposable.Dispose"/> on the control 
            array after you have finished using it to reclaim memory and perform cleanup.
            </note>
            </remarks>
            <seealso cref="M:System.IDisposable.Dispose"/>
            <seealso cref="T:System.IDisposable"/>
            <lastupdated>9/11/2007 11:21:36 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.LedArray.Clone">
            <summary>
            Creates a new object that is a copy of this instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <remarks>
            Overrides <see cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.Clone"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:System.ICloneable"/>
            <lastupdated>3/15/2006 1:23:28 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.Legend">
            <summary>
            Represents a Measurement Studio Windows Forms legend control to display symbols and descriptions of another object, such as the plots or cursors of a graph.
            </summary>
            <threadsafety safety="control"/>
            <remarks>
            	<para>
            A legend
            control displays symbols and descriptions for a specific set of elements of another object, such
            as the plots or cursors of a graph. The size of each symbol in the legend control is determined by
            <see cref="P:NationalInstruments.UI.WindowsForms.Legend.ItemSize"/>.
            <see cref="P:NationalInstruments.UI.WindowsForms.Legend.Items"/> contains a collection of
            <see cref="T:NationalInstruments.UI.LegendItem"/> objects that are displayed in the legend.
            </para>
            	<para>
            Custom-drawn legend items are supported through the
            <see cref="E:NationalInstruments.UI.WindowsForms.Legend.BeforeDrawItem"/> and
            <see cref="E:NationalInstruments.UI.WindowsForms.Legend.AfterDrawItem"/> events.
            <see cref="E:NationalInstruments.UI.WindowsForms.Legend.BeforeDrawItem"/> occurs before the legend
            item is drawn.  <see cref="E:NationalInstruments.UI.WindowsForms.Legend.AfterDrawItem"/> occurs after
            the legend item is drawn.  Use these events to participate in the drawing of a legend
            item that is contained in the <see cref="P:NationalInstruments.UI.WindowsForms.Legend.Items"/> collection.
            </para>
            	<note type="note">
            For more information about the legend control, refer to <see keyword="UsingNINETLegendWinForms" keywordType="mstudio">Using the Measurement Studio Windows Forms Legend .NET Control</see> or <see keyword="KeyNETLegendFeaturesWinForms" keywordType="mstudio">Key Measurement Studio Windows Forms Legend .NET Control Features</see>.
            </note>
            </remarks>
            <lastupdated>9/17/2008 3:19:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Legend.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.Legend"/> class.
            </summary>
            <lastupdated>7/1/2003 12:09:40 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Legend.ItemLayoutMode">
            <summary>
            Gets or sets the layout mode for the legend items.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.LegendItemLayoutMode"/> for the legend items.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:NationalInstruments.UI.LegendItemLayoutMode"/> value.
            </exception>
            <lastupdated>9/27/2011 2:19:22 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Legend.OnItemLayoutModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Legend.ItemLayoutModeChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Legend.OnItemLayoutModeChanged(System.EventArgs)"/>
            <lastupdated>9/10/2007 2:14:42 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Legend.ItemLayoutModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Legend.ItemLayoutMode"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Legend.ItemLayoutMode"/>
            <lastupdated>9/10/2007 2:16:35 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Legend.HorizontalScrollMode">
            <summary>
            Gets or sets whether the horizontal scroll bar is enabled or disabled.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.ScrollMode"/> of the horizontal scroll bar. The default value is
            <see cref="F:NationalInstruments.UI.ScrollMode.Hidden"/>. If <see cref="P:NationalInstruments.UI.WindowsForms.Legend.ItemLayoutMode"/> 
            is set to <see cref="F:NationalInstruments.UI.LegendItemLayoutMode.TopToBottom"/> and there is not 
            enough space inside the legend control to fit all the items, then this property can be used to enable or disable
            the horizontal scroll bar.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:NationalInstruments.UI.ScrollMode"/> value.
            </exception>
            <lastupdated>9/27/2011 2:19:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Legend.OnHorizontalScrollModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Legend.HorizontalScrollModeChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Legend.OnHorizontalScrollModeChanged(System.EventArgs)"/>
            <lastupdated>9/10/2007 2:14:30 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Legend.HorizontalScrollModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Legend.HorizontalScrollMode"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Legend.HorizontalScrollMode"/>
            <lastupdated>9/10/2007 2:16:25 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Legend.VerticalScrollMode">
            <summary>
            Gets or sets whether the vertical scroll bar is enabled or disabled.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.ScrollMode"/> of the vertical scroll bar. The default value is
            <see cref="F:NationalInstruments.UI.ScrollMode.Hidden"/>. If <see cref="P:NationalInstruments.UI.WindowsForms.Legend.ItemLayoutMode"/> 
            is set to <see cref="F:NationalInstruments.UI.LegendItemLayoutMode.LeftToRight"/> and there is not 
            enough space inside the legend control to fit all the items, then this property can be used to enable or disable
            the vertical scroll bar.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:NationalInstruments.UI.ScrollMode"/> value.
            </exception>
            <lastupdated>9/27/2011 2:19:46 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Legend.OnVerticalScrollModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Legend.VerticalScrollModeChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Legend.OnVerticalScrollModeChanged(System.EventArgs)"/>
            <lastupdated>9/10/2007 2:16:12 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Legend.VerticalScrollModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Legend.VerticalScrollMode"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Legend.VerticalScrollMode"/>
            <lastupdated>9/10/2007 2:17:56 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Legend.ScrollBarBackColor">
            <summary>
            Gets or sets the background color of the scroll bar.
            </summary>
            <value>
            The background <see cref="T:System.Drawing.Color"/> of the scroll bar. The default value is
            <see cref="F:System.Drawing.Color.Empty"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarBackColor"/>
             is an ambient property. You can retrieve the property value, if not set, from <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.BackColor"/>. 
            Set <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarBackColor"/> to <see cref="F:System.Drawing.Color.Empty"/>
            to enable ambient behavior.
            </remarks>
            <lastupdated>9/27/2011 2:20:09 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Legend.OnScrollBarBackColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Legend.ScrollBarBackColorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Legend.OnScrollBarBackColorChanged(System.EventArgs)"/>
            <lastupdated>9/10/2007 2:15:19 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Legend.ScrollBarBackColorChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Legend.ScrollBarBackColor"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Legend.ScrollBarBackColor"/>
            <lastupdated>9/10/2007 2:17:15 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Legend.ScrollBarForeColor">
            <summary>
            Gets or sets the foreground color of the scroll bar.
            </summary>
            <value>
            The foreground <see cref="T:System.Drawing.Color"/> of the scroll bar. The default value is
            <see cref="F:System.Drawing.Color.Empty"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarForeColor"/>
             is an ambient property. You can retrieve the property value, if not set, from <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.ForeColor"/>. 
            Set <see cref="P:NationalInstruments.UI.WindowsForms.DigitalWaveformGraph.ScrollBarForeColor"/> to <see cref="F:System.Drawing.Color.Empty"/>
            to enable ambient behavior.
            </remarks>
            <lastupdated>9/27/2011 2:20:04 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Legend.OnScrollBarForeColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Legend.ScrollBarForeColorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Legend.OnScrollBarForeColorChanged(System.EventArgs)"/>
            <lastupdated>9/10/2007 2:15:34 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Legend.ScrollBarForeColorChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Legend.ScrollBarForeColor"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Legend.ScrollBarForeColor"/>
            <lastupdated>9/10/2007 2:17:25 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Legend.ScrollBarStyle">
            <summary>
            Gets or sets the style of the scroll bar.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.ScrollBarStyle"/> for the scroll bars. <see cref="T:NationalInstruments.UI.ScrollBarStyle"/> provides a pre-defined list of available scroll bar styles. 
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <lastupdated>9/27/2011 2:19:55 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Legend.OnScrollBarStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Legend.ScrollBarStyleChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Legend.OnScrollBarStyleChanged(System.EventArgs)"/>
            <lastupdated>9/10/2007 2:15:48 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Legend.ScrollBarStyleChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Legend.ScrollBarStyle"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Legend.ScrollBarStyle"/>
            <lastupdated>9/10/2007 2:17:43 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Legend.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>7/1/2003 12:07:53 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Legend.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.ControlBase"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.ControlBase"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>. For more information
            about how to implement <see cref="M:System.IDisposable.Dispose"/>, 
            refer to <see keyword="eb4e1af0-3b48-4fbc-ad4e-fc2f64138bf9" keywordType="msdn">Implementing a Dispose Method</see>
            </note>
            	<para>
            For more information about <see cref="M:System.IDisposable.Dispose"/>
            and the finalizer, refer to <see keyword="a17b0066-71c2-4ba4-9822-8e19332fc213" keywordType="msdn">Cleaning Up Unmanaged Resources</see>
            and <see keyword="8026cb68-fe93-43fc-96c1-c09ad7d64cd3" keywordType="msdn">Overriding the Finalize Method</see> in the .NET Framework documentation.
            </para>
            </remarks>
            <lastupdated>9/17/2008 3:26:39 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Legend.DefaultSize">
            <summary>
            Gets the default size of the control.
            </summary>
            <value>
            The default value is a <see cref="T:System.Drawing.Size"/> with a width of 92 and height of 108.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.DefaultSize"/>.
            </remarks>
            <seealso cref="P:System.Windows.Forms.Control.DefaultSize"/>
            <seealso cref="T:System.Windows.Forms.Control"/>
            <lastupdated>7/1/2003 3:37:40 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Legend.Items">
            <summary>
            Gets the collection of legend items in the legend.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.LegendItemCollection"/> that contains the
            <see cref="T:NationalInstruments.UI.LegendItem"/> instances in the legend.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:NationalInstruments.UI.LegendItem"/>
            <lastupdated>9/27/2011 2:19:02 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Legend.ItemSize">
            <summary>
            Gets or sets the size of the symbols in the legend control.
            </summary>
            <value>
            The <see cref="T:System.Drawing.Size"/> of the symbols in the legend control.  The default value is
            32 x 24.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            The width of the specified size is less than zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The height of the specified size is less than zero.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>9/27/2011 2:19:15 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Legend.OnItemSizeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Legend.ItemSizeChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Legend.OnItemSizeChanged(System.EventArgs)"/>
            <lastupdated>7/13/2004 5:17:29 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Legend.ItemSizeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Legend.ItemSize"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Legend.ItemSize"/>
            <lastupdated>7/1/2003 3:48:52 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Legend.GetItemAt(System.Int32,System.Int32)">
            <summary>
            Retrieves the <see cref="T:NationalInstruments.UI.LegendItem"/> at the point with the specified
            coordinates.
            </summary>
            <param name="x">
            The <see cref="P:System.Drawing.Point.X"/> position to evaluate and retrieve the item from.
            </param>
            <param name="y">
            The <see cref="P:System.Drawing.Point.Y"/> position to evaluate and retrieve the item from.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.LegendItem"/> at the specified location.
            </returns>
            <remarks>
            You can pass the <see cref="T:System.Windows.Forms.MouseEventArgs"/> X and Y coordinates of the
            <see cref="E:System.Windows.Forms.Control.MouseDown"/> or
            <see cref="E:System.Windows.Forms.Control.MouseUp"/> event as the <paramref name="x"/> and
            <paramref name="y"/> parameters.
            <para>
            For an example of <see cref="M:NationalInstruments.UI.WindowsForms.Legend.GetItemAt(System.Int32,System.Int32)" crefType="Unqualified"/>, refer to <see cref="M:NationalInstruments.UI.WindowsForms.Legend.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/>.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/3/2010 6:23:43 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Legend.HitTest(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:NationalInstruments.UI.LegendHitTestInfo"/> that specifies
            where on the control the specified point is located.
            </summary>
            <param name="x">
            The horizontal location of the point to be hit-tested, in client coordinates.
            </param>
            <param name="y">
            The vertical location of the point to be hit-tested, in client coordinates.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.UI.LegendHitTestInfo"/> that specifies where on
            the control the <paramref name="x"/> and <paramref name="y"/> coordinate is located.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <example>The following example demonstrates using the <see cref="M:NationalInstruments.UI.WindowsForms.Legend.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/> method to determine where a user clicked on a <see cref="T:NationalInstruments.UI.WindowsForms.Legend" crefType="Unqualified"/> object. 
            <code lang="VB.NET">
            Public Sub Legend_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
                Dim hitTestRegion As LegendHitTestInfo
                Dim randomColor As Color = Color.FromArgb(RandNumberGenerator.[Next](255), RandNumberGenerator.[Next](255), RandNumberGenerator.[Next](255))
             
                hitTestRegion = legend.HitTest(e.X, e.Y)
                Select Case hitTestRegion
                    Case LegendHitTestInfo.HorizontalScrollBar
                        Debug.WriteLine("horizontal scrollbar selected")
                        Exit Select
                    Case LegendHitTestInfo.Item
                        Dim item As LegendItem = legend.GetItemAt(e.X, e.Y)
                        If TypeOf item.Source Is Plot Then
                            Dim plot As Plot = DirectCast(item.Source, Plot)
                            plot.LineColor = randomColor
                            Debug.WriteLine("Item selected was a Plot")
                        ElseIf TypeOf item.Source Is DigitalPlot Then
                            Dim plot As DigitalPlot = DirectCast(item.Source, DigitalPlot)
                            plot.LineColor = randomColor
                            Debug.WriteLine("Item selected was a Digital Plot")
                        End If
                        Exit Select
                    Case LegendHitTestInfo.Text
                        Debug.WriteLine("Text area of legend selected")
                        Exit Select
                    Case LegendHitTestInfo.VerticalScrollBar
                        Debug.WriteLine("vertical scrollbar selected")
                        Exit Select
                    Case LegendHitTestInfo.None
                        Debug.WriteLine("Unknown legend area selected")
                        Exit Select
                End Select
            End Sub
            </code>
            </example>
            <example>
            	<code lang="C#">
            public void Legend_MouseDown(object sender, MouseEventArgs e)
            {
                LegendHitTestInfo hitTestRegion;
                Color randomColor = Color.FromArgb(RandNumberGenerator.Next(255),
                                                    RandNumberGenerator.Next(255),
                                                    RandNumberGenerator.Next(255));
             
                hitTestRegion = legend.HitTest(e.X, e.Y);
                switch (hitTestRegion)
                {
                    case LegendHitTestInfo.HorizontalScrollBar:
                        Debug.WriteLine("horizontal scrollbar selected");                    
                        break;
                    case LegendHitTestInfo.Item:
                        LegendItem item = legend.GetItemAt(e.X, e.Y);
                        if (item.Source is Plot)
                        {
                            Plot plot = (Plot)item.Source;
                            plot.LineColor = randomColor;
                            Debug.WriteLine("Item selected was a Plot");
                        }
                        else if (item.Source is DigitalPlot)
                        {
                            DigitalPlot plot = (DigitalPlot)item.Source;
                            plot.LineColor = randomColor;
                            Debug.WriteLine("Item selected was a Digital Plot");
                        }
                        break;
                    case LegendHitTestInfo.Text:
                        Debug.WriteLine("Text area of legend selected");
                        break;
                    case LegendHitTestInfo.VerticalScrollBar:
                        Debug.WriteLine("vertical scrollbar selected");
                        break;
                    case LegendHitTestInfo.None:
                        Debug.WriteLine("Unknown legend area selected");
                        break;
                }
            }
            </code>
            </example>
            <lastupdated>10/5/2010 10:20:22 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Legend.BeforeDrawItem">
            <summary>
            Occurs before a legend item is drawn.
            </summary>
            <remarks>
            You can use <see cref="E:NationalInstruments.UI.WindowsForms.Legend.BeforeDrawItem"/> to
            participate in the drawing of the legend item.  Set the
            <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property of the event argument to
            <see langword="true"/> to cancel drawing of the legend item. If you set
            <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Legend.BeforeDrawItem"/> is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Legend.AfterDrawItem"/> event is not raised for
            that legend item. You must provide all of the implementation for drawing the legend item if
            <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <see langword="true"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Legend.OnBeforeDrawItem(NationalInstruments.UI.BeforeDrawLegendItemEventArgs)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Legend.AfterDrawItem"/>
            <lastupdated>11/11/2003 10:02:41 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Legend.OnBeforeDrawItem(NationalInstruments.UI.BeforeDrawLegendItemEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Legend.BeforeDrawItem"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.BeforeDrawLegendItemEventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Legend.BeforeDrawItem"/>
            <lastupdated>7/13/2004 5:17:21 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Legend.AfterDrawItem">
            <summary>
            Occurs after a legend item is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.Legend.AfterDrawItem"/> to
            participate in the drawing of the legend item.  If you set the
            <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property to <see langword="true"/>
            in the event arguments of the <see cref="E:NationalInstruments.UI.WindowsForms.Legend.BeforeDrawItem"/>
            event, this event is not raised for that legend item.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Legend.OnAfterDrawItem(NationalInstruments.UI.AfterDrawLegendItemEventArgs)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Legend.BeforeDrawItem"/>
            <lastupdated>11/11/2003 10:02:05 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Legend.OnAfterDrawItem(NationalInstruments.UI.AfterDrawLegendItemEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Legend.AfterDrawItem"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterDrawLegendItemEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Legend.AfterDrawItem"/>
            <lastupdated>7/13/2004 5:17:12 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Legend.ItemsChanged">
            <summary>
            Occurs when the content of the <see cref="P:NationalInstruments.UI.WindowsForms.Legend.Items"/> collection
            changes.
            </summary>
            <remarks>
            The content of the <see cref="P:NationalInstruments.UI.WindowsForms.Legend.Items"/> collection changes
            through an add, remove, insert, or clear operation on the collection.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Legend.Items"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Legend.OnItemsChanged(System.ComponentModel.CollectionChangeEventArgs)"/>
            <lastupdated>9/10/2007 2:17:05 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Legend.OnItemsChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Legend.ItemsChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.ComponentModel.CollectionChangeEventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Legend.ItemsChanged"/>
            <lastupdated>9/10/2007 2:14:55 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Legend.GetPreferredSize(System.Drawing.Size)">
            <summary>
            Retrieves the size of a rectangular area into which the control can be fitted. This member overrides <see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" crefType="PartiallyQualified"/>.
            </summary>
            <param name="proposedSize">
            The custom-sized area for a control.
            </param>
            <returns>
            A <see cref="T:System.Drawing.Size"/> that the control fits within, given the <paramref name="proposedSize"/> constraints. 
            </returns>
            <remarks>
            You can pass 0 to either <see cref="P:System.Drawing.Size.Width"/> or <see cref="P:System.Drawing.Size.Height"/> 
            to make the size unconstrained in the horizontal or vertical direction. The control attempts to use the dimensions specified within <paramref name="proposedSize"/> for the control layout. <see cref="M:NationalInstruments.UI.WindowsForms.Legend.GetPreferredSize(System.Drawing.Size)" crefType="Unqualified"/> returns the actual dimensions that can fit the control.
            </remarks>
            <example>The following example demonstrates getting the preferred size of a 
            <see cref="T:NationalInstruments.UI.WindowsForms.Legend" crefType="Unqualified"/> object. 
            <code lang="VB.NET">
            Dim newSize As Size = legend.GetPreferredSize(Size.Empty)
             
            Debug.WriteLine(String.Format("The legend's original size is {0}", legend.Size.ToString()))
            Debug.WriteLine(String.Format("The legend's proposed size is {0}", newSize.ToString()))
            </code>
            </example>
            <example>
            	<code lang="C#">
            Size newSize = legend.GetPreferredSize(Size.Empty);            
             
            Debug.WriteLine(string.Format("The legend's original size is {0}", legend.Size.ToString()));
            Debug.WriteLine(string.Format("The legend's proposed size is {0}", newSize.ToString()));
            </code>
            </example>
            <seealso cref="P:System.Windows.Forms.Control.PreferredSize"/>
            <lastupdated>10/5/2010 10:20:53 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.LinearNumericPointer">
            <summary>
            Provides an <see langword="abstract"/> base class for Measurement Studio Windows Forms
            numeric controls that display a numeric value in a linear scale.
            </summary>
            <threadsafety safety="control"/>
            <remarks>
            	<see cref="T:NationalInstruments.UI.WindowsForms.LinearNumericPointer"/> is the base class
            for numeric pointer controls that display a numeric value in a linear scale.
            	<para>
            The <see cref="T:NationalInstruments.UI.WindowsForms.NumericPointer"/> supports interaction.
            Use <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.InteractionMode"/> to configure the suite of interactions provided by the control. Use
            <see cref="F:NationalInstruments.UI.LinearNumericPointerInteractionModes.DragPointer"/> to allow
            the pointer to be dragged. Use 
            <see cref="F:NationalInstruments.UI.LinearNumericPointerInteractionModes.SnapPointer"/> to snap the
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> property to the mouse cursor.
            You can also change <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> interactively using the up, down, left, and right arrow keys on the keyboard and
            by scrolling the mouse wheel.
            	</para>
            	<para>
            		You can use <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillBackColor"/>,
            <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillColor"/>, and
            <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillStyle"/> to change the appearance of the fill and the fill area. Use <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillMode"/> to customize the direction of the fill, and 
            use <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillBaseValue"/> to set the value at which the fill begins.
            Use <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.InvertedScale"/> to invert the scale, and use <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.ScalePosition"/>
            to specify the horizontal or vertical orientation of the control.</para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.RadialNumericPointer.HitTest(System.Int32,System.Int32)"/> determines the
            portion of the linear numeric pointer at a specified x and y location.</para>
            </remarks>
            <lastupdated>9/28/2011 4:10:27 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.LinearNumericPointer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.LinearNumericPointer"/> class.
            </summary>
            <lastupdated>4/27/2004 1:02:14 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.LinearNumericPointer.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.LinearNumericPointer"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.LinearNumericPointer"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            </remarks>
            <lastupdated>4/27/2004 1:01:17 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillMode">
            <summary>
            Gets or sets the direction for filling the fill area of the control.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.NumericFillMode"/> that represents the direction
            for filling the fill area of the control. The default value is <see cref="F:NationalInstruments.UI.NumericFillMode.ToMinimum"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:NationalInstruments.UI.NumericFillMode"/> value.
            </exception>
            <lastupdated>6/22/2006 9:27:10 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillBaseValue">
            <summary>
            Gets or sets the value at which the fill begins.
            </summary>
            <value>
            The value at which the fill begins.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value is <see cref="F:System.Double.NaN"/>.
            </exception>
            <remarks>
            	When <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillMode"/> is set to <see cref="F:NationalInstruments.UI.NumericFillMode.ToBaseValue"/>,
            the control is filled from <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillBaseValue"/> to <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> with <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillColor"/> and <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillStyle"/>.
            </remarks>
            <lastupdated>5/13/2004 10:28:22 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillColor">
            <summary>
            Gets or sets the color of the fill area of the control.
            </summary>
            <value>
            A <see cref="T:System.Drawing.Color"/> that represents the color of the fill area
            of the control. The default value is <see cref="P:System.Drawing.SystemColors.ActiveCaption"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>9/28/2011 12:25:50 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillStyle">
            <summary>
            Gets or sets the style used to draw the fill color.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.FillStyle"/> used to draw the 
            <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillColor"/>. The default
            value is <see cref="P:NationalInstruments.UI.FillStyle.Solid"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <lastupdated>9/28/2011 12:25:56 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillBackColor">
            <summary>
            Gets or sets the color of the background of the fill area.
            </summary>
            <value>
            A <see cref="T:System.Drawing.Color"/> that represents the color of the background of
            the fill area. The default value is <see cref="P:System.Drawing.SystemColors.InactiveCaption"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>4/27/2004 12:58:56 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.InteractionMode">
            <summary>
            Gets or sets the user interactions that are supported by the control.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.LinearNumericPointerInteractionModes"/> that indicates which user interactions are
            supported by the control. The default value is <see cref="F:NationalInstruments.UI.LinearNumericPointerInteractionModes.Indicator"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            Set <see cref="P:System.Windows.Forms.Control.Enabled"/> to <see langword="true"/> to enable 
            interaction. If <see cref="P:System.Windows.Forms.Control.Enabled"/> is <see langword="false"/>,
            the <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.InteractionMode"/> has no
            effect regardless of its value.
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> is changed according
            to the specified <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/>.
            Changing the <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> interactively
            raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.BeforeChangeValue"/>
            and <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AfterChangeValue"/> events.
            </para>
            	<para>
            The control supports interaction via the mouse and the keyboard. Click the left mouse button and drag the 
            mouse to change the <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> interactively. 
            The mouse wheel can also be used to change the <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>.
            To enable interaction using the mouse wheel, <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.InteractionMode"/> 
            must be set to a value that includes <see cref="F:NationalInstruments.UI.LinearNumericPointerInteractionModes.DragPointer"/>. 
            Scroll the mouse wheel up to move the pointer to the next value and down to move the pointer to the 
            previous value. If the value is changed by clicking and dragging the mouse or using the mouse wheel, 
            the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.BeforeChangeValue"/>
            and <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AfterChangeValue"/> events are
            raised with the <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> set to
            <see cref="F:NationalInstruments.UI.Action.ByMouse"/>.
            </para>
            	<para>
            To enable interaction using the keyboard, <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.InteractionMode"/>
            must be set to a value that includes <see cref="F:NationalInstruments.UI.LinearNumericPointerInteractionModes.DragPointer"/>.
            To change the value using the keyboard, use the up or right arrow key to move the pointer to the 
            next value and the down or left arrow key to move the pointer to the previous value. Changing 
            the value using the keyboard raises the 
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.BeforeChangeValue"/>
            and <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AfterChangeValue"/> events
            with the <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> set to
            <see cref="F:NationalInstruments.UI.Action.ByKeyboard"/>. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/> is set to
            <see cref="P:NationalInstruments.UI.NumericCoercionMode.None"/>, the 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/> is used to determine
            the next and previous values.
            </para>
            	<para>
            If you set <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.InteractionMode"/> to allow keyboard or mouse interactions and <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/>
            is a negative value, then pressing the down or left arrow
            key or moving the scroll wheel down increases <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>. Pressing the
            up or right arrow key or moving the scroll wheel up decreases 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>.
            </para>
            </remarks>
            <seealso cref="P:System.Windows.Forms.Control.Enabled"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/>
            <lastupdated>9/28/2005 2:37:52 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.ScalePosition">
            <summary>
            Gets or sets the horizontal or vertical orientation of the scale.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.NumericScalePosition"/> that represents
            the position of the scale. The default value is <see cref="F:NationalInstruments.UI.NumericScalePosition.Left"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:NationalInstruments.UI.NumericScalePosition"/> value.
            </exception>
            <remarks>
            	<see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.ScalePosition"/> determines the orientation
            of the linear control. Setting <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.ScalePosition"/>
            to <see cref="F:NationalInstruments.UI.NumericScalePosition.Left"/>, <see cref="F:NationalInstruments.UI.NumericScalePosition.Right"/>,
            or <see cref="F:NationalInstruments.UI.NumericScalePosition.LeftRight"/> draws the linear control with a vertical
            orientation. Setting <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.ScalePosition"/>
            to <see cref="F:NationalInstruments.UI.NumericScalePosition.Top"/>, <see cref="F:NationalInstruments.UI.NumericScalePosition.Bottom"/>,
            or <see cref="F:NationalInstruments.UI.NumericScalePosition.TopBottom"/> draws the linear control with a horizontal 
            orientation.
            </remarks>
            <lastupdated>9/28/2011 12:22:52 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.InvertedScale">
            <summary>
            Gets or sets a value indicating if the scale is inverted.
            </summary>
            <value>
            	<see langword="true"/> if the scale is inverted. The default value is <see langword="false"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>9/28/2011 12:22:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.LinearNumericPointer.OnFillModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillModeChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillModeChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillMode"/>
            <lastupdated>7/13/2004 5:18:15 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.LinearNumericPointer.OnFillBaseValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillBaseValueChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillBaseValueChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillBaseValue"/>
            <lastupdated>7/13/2004 5:17:59 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.LinearNumericPointer.OnFillColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillColorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillColorChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillColor"/>
            <lastupdated>7/13/2004 5:18:07 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.LinearNumericPointer.OnFillStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillStyleChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillStyleChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillStyle"/>
            <lastupdated>7/13/2004 5:18:23 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.LinearNumericPointer.OnFillBackColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillBackColorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillBackColorChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillBackColor"/>
            <lastupdated>7/13/2004 5:17:52 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.LinearNumericPointer.OnInteractionModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.LinearNumericPointer.InteractionModeChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.LinearNumericPointer.InteractionModeChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.InteractionMode"/>
            <lastupdated>7/13/2004 5:18:31 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.LinearNumericPointer.OnScalePositionChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.LinearNumericPointer.ScalePositionChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.LinearNumericPointer.ScalePositionChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.ScalePosition"/>
            <lastupdated>7/13/2004 5:18:50 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.LinearNumericPointer.OnInvertedScaleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.LinearNumericPointer.InvertedScaleChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.LinearNumericPointer.InvertedScaleChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.InvertedScale"/>
            <lastupdated>7/13/2004 5:18:40 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillMode"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.LinearNumericPointer.OnFillModeChanged(System.EventArgs)"/>
            <lastupdated>7/8/2004 1:31:40 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillBaseValueChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillBaseValue"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillBaseValue"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.LinearNumericPointer.OnFillBaseValueChanged(System.EventArgs)"/>
            <lastupdated>7/8/2004 1:31:36 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillColorChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillColor"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillColor"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.LinearNumericPointer.OnFillColorChanged(System.EventArgs)"/>
            <lastupdated>4/27/2004 1:04:02 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillStyleChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillStyle"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillStyle"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.LinearNumericPointer.OnFillStyleChanged(System.EventArgs)"/>
            <lastupdated>4/27/2004 1:04:13 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillBackColorChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillBackColor"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillBackColor"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.LinearNumericPointer.OnFillBackColorChanged(System.EventArgs)"/>
            <lastupdated>4/27/2004 1:03:51 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.LinearNumericPointer.InteractionModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.InteractionMode"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.InteractionMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.LinearNumericPointer.OnInteractionModeChanged(System.EventArgs)"/>
            <lastupdated>4/27/2004 10:41:55 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.LinearNumericPointer.ScalePositionChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.ScalePosition"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.ScalePosition"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.LinearNumericPointer.OnScalePositionChanged(System.EventArgs)"/>
            <lastupdated>4/27/2004 1:04:35 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.LinearNumericPointer.InvertedScaleChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.InvertedScale"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.InvertedScale"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.LinearNumericPointer.OnInvertedScaleChanged(System.EventArgs)"/>
            <lastupdated>4/27/2004 1:04:25 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.LinearNumericPointer.GetService(System.Type)">
            <summary>
            Returns an object that represents a service provided by the control or by its container.
            </summary>
            <param name="service">
            A service provided by the control.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents a service provided by the control.  This value is
            <see langword="null"/> if the control does not provide the specified service.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>4/27/2004 1:01:21 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.LinearNumericPointer.HitTest(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:NationalInstruments.UI.LinearNumericPointerHitTestInfo"/> that specifies
            where on the control the specified point is located.
            </summary>
            <param name="x">
            The horizontal location of the point to be hit-tested, in client coordinates.
            </param>
            <param name="y">
            The vertical location of the point to be hit-tested, in client coordinates.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.UI.LinearNumericPointerHitTestInfo"/> that specifies where on
            control the specified <paramref name="x"/> and <paramref name="y"/> coordinate is located.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <example>The following example demonstrates using the <see cref="M:NationalInstruments.UI.WindowsForms.LinearNumericPointer.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/> method to determine where a user clicked on a <see cref="T:NationalInstruments.UI.WindowsForms.LinearNumericPointer" crefType="Unqualified"/> object. 
            <code lang="VB.NET">
            Public Sub LinearNumericPointer_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
                Dim hitTestRegion As LinearNumericPointerHitTestInfo
                Dim randomColor As Color = Color.FromArgb(RandNumberGenerator.[Next](255), RandNumberGenerator.[Next](255), RandNumberGenerator.[Next](255))
             
                hitTestRegion = linearNumeric.HitTest(e.X, e.Y)
             
                Select Case hitTestRegion
                    Case LinearNumericPointerHitTestInfo.Fill
                        linearNumeric.FillColor = randomColor
                        Debug.WriteLine("Filled area clicked")
                        Exit Select
                    Case LinearNumericPointerHitTestInfo.FillBackground
                        linearNumeric.FillBackColor = randomColor
                        Debug.WriteLine("Fill background area clicked")
                        Exit Select
                    Case LinearNumericPointerHitTestInfo.Pointer
                        linearNumeric.PointerColor = randomColor
                        Debug.WriteLine("Pointer clicked")
                        Exit Select
                    Case LinearNumericPointerHitTestInfo.ScaleArea
                        linearNumeric.ScaleBaseLineColor = randomColor
                        Debug.WriteLine("The scale area was clicked")
                        Exit Select
                    Case LinearNumericPointerHitTestInfo.None
                        Debug.WriteLine("Unknown area clicked")
                        Exit Select
                End Select
            End Sub
            </code>
            </example>
            <example>
            	<code lang="C#">
            public void LinearNumericPointer_MouseDown(object sender, MouseEventArgs e)
            {
                LinearNumericPointerHitTestInfo hitTestRegion;
                Color randomColor = Color.FromArgb(RandNumberGenerator.Next(255),
                                                    RandNumberGenerator.Next(255),
                                                    RandNumberGenerator.Next(255));
             
                hitTestRegion = linearNumeric.HitTest(e.X, e.Y);
                
                switch (hitTestRegion)
                {
                    case LinearNumericPointerHitTestInfo.Fill:
                        linearNumeric.FillColor = randomColor;
                        Debug.WriteLine("Filled area clicked");
                        break;
                    case LinearNumericPointerHitTestInfo.FillBackground:
                        linearNumeric.FillBackColor = randomColor;
                        Debug.WriteLine("Fill background area clicked");
                        break;
                    case LinearNumericPointerHitTestInfo.Pointer:
                        linearNumeric.PointerColor = randomColor;
                        Debug.WriteLine("Pointer clicked");
                        break;
                    case LinearNumericPointerHitTestInfo.ScaleArea:
                        linearNumeric.ScaleBaseLineColor = randomColor;
                        Debug.WriteLine("The scale area was clicked");
                        break;
                    case LinearNumericPointerHitTestInfo.None:
                        Debug.WriteLine("Unknown area clicked");
                        break;
                }
            }
            </code>
            </example>
            <lastupdated>10/5/2010 10:21:42 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.Meter">
            <summary>
            Represents a Measurement Studio Windows Forms meter control to display numeric
            values.</summary>
            <threadsafety safety="control"/>
            <remarks>
            	Typically, you use <see cref="T:NationalInstruments.UI.WindowsForms.Meter"/> as an indicator. 
            You can use <see cref="P:NationalInstruments.UI.WindowsForms.Meter.SpindleColor"/>, <see cref="P:NationalInstruments.UI.WindowsForms.Meter.SpindleVisible"/>, and <see cref="P:NationalInstruments.UI.WindowsForms.Meter.MeterStyle"/> to change the appearance
            of the <see cref="T:NationalInstruments.UI.WindowsForms.Meter"/>.
            <para>
            The default values of <see cref="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.ScaleArc"/> 
            and <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineVisible"/> have been changed to give the control a more meter-like appearance. The
            default value of <see cref="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.ScaleArc"/> is
            an arc with a start angle of 150.0 and a sweep angle of -120.0. The default value of
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineVisible"/> is
            <see langword="true"/>.
            </para>
            	<note type="note">
            For more information about the meter control, refer to <see keyword="UsingNINETNumericPointerControlsWinForms" keywordType="mstudio">Using the Measurement Studio Windows Forms Numeric Pointer .NET Controls</see>.
            </note>
            </remarks>
            <lastupdated>9/28/2011 12:18:19 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Meter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.Meter"/> class.
            </summary>
            <lastupdated>4/28/2004 4:25:45 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Meter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.Meter"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.Meter"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            </remarks>
            <lastupdated>4/28/2004 4:25:42 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Meter.DefaultSize">
            <summary>
            Gets the default size of the control.
            </summary>
            <value>
            The default value is a <see cref="T:System.Drawing.Size"/> with a width of 214 and a height of 98.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.DefaultSize"/>.
            </remarks>
            <seealso cref="P:System.Windows.Forms.Control.DefaultSize"/>
            <seealso cref="T:System.Windows.Forms.Control"/>
            <lastupdated>4/28/2004 4:25:30 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Meter.SpindleColor">
            <summary>
            Gets or sets the color of the base that connects the pointer to the meter.
            </summary>
            <value>
            A <see cref="T:System.Drawing.Color"/> that represents the color of the base
            that connects the pointer to the meter. The default value is <see cref="P:System.Drawing.SystemColors.Control"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>4/28/2004 4:25:36 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Meter.SpindleVisible">
            <summary>
            Gets or sets a value indicating if the base that connects the pointer to the meter is visible.
            </summary>
            <value>
            	<see langword="true"/> if the base that connects the pointer to the meter is visible.
            The default value is <see langword="true"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>7/8/2004 1:37:45 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Meter.MeterStyle">
            <summary>
            Gets or sets the style that determines the appearance of the meter.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.MeterStyle"/> that determines the appearance of
            the meter. The default value is <see cref="P:NationalInstruments.UI.MeterStyle.RaisedWithThickNeedle"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <lastupdated>4/28/2004 4:25:33 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Meter.PointerLengthMode">
            <summary>
            Gets or sets the mode that determines the length of the pointer.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.PointerLengthMode"/> that determines the length of the pointer. 
            The default value is <see cref="F:NationalInstruments.UI.PointerLengthMode.Near"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:NationalInstruments.UI.PointerLengthMode"/> value.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineVisible"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineColor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineWidth"/>
            <lastupdated>3/6/2012 2:18:04 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Meter.OnSpindleColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Meter.SpindleColorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Meter.SpindleColorChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Meter.SpindleColor"/>
            <lastupdated>7/13/2004 5:19:13 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Meter.OnSpindleVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Meter.SpindleVisibleChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Meter.SpindleVisibleChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Meter.SpindleVisible"/>
            <lastupdated>7/13/2004 5:19:21 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Meter.OnMeterStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Meter.MeterStyleChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Meter.MeterStyleChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Meter.MeterStyle"/>
            <lastupdated>7/13/2004 5:19:06 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Meter.OnPointerLengthModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Meter.PointerLengthModeChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineWidth"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineColor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineVisible"/>
            <lastupdated>7/13/2004 5:27:54 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Meter.SpindleColorChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Meter.SpindleColor"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Meter.SpindleColor"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Meter.OnSpindleColorChanged(System.EventArgs)"/>
            <lastupdated>4/28/2004 4:26:03 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Meter.SpindleVisibleChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Meter.SpindleVisible"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Meter.SpindleVisible"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Meter.OnSpindleVisibleChanged(System.EventArgs)"/>
            <lastupdated>4/28/2004 4:26:06 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Meter.MeterStyleChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Meter.MeterStyle"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Meter.MeterStyle"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Meter.OnMeterStyleChanged(System.EventArgs)"/>
            <lastupdated>4/28/2004 4:25:59 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Meter.PointerLengthModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Meter.PointerLengthMode"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineWidth"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineVisible"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineColor"/>
            <lastupdated>9/20/2011 12:47:11 PM</lastupdated>
            <updatedby>NI</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.NumericEdit">
            <summary>
            Represents a Measurement Studio Windows Forms numeric edit control to display and edit numeric values.
            </summary>
            <threadsafety safety="control"/>
            <remarks>
            	<para>
            A numeric edit control stores and displays a double value. You can change the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/> 
            of the control using increment and decrement buttons, a text box, a mouse wheel, or up and down arrow keys.
            </para>
            	<para>Use the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.InteractionMode"/> property to 
            change how the user interacts with the control. Set <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.InteractionMode"/>
            to <see cref="F:NationalInstruments.UI.NumericEditInteractionModes.Indicator"/> to disable user interaction. Set <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.InteractionMode"/>
            to a value that includes <see cref="F:NationalInstruments.UI.NumericEditInteractionModes.Text"/>, 
            <see cref="F:NationalInstruments.UI.NumericEditInteractionModes.Buttons"/>, or <see cref="F:NationalInstruments.UI.NumericEditInteractionModes.ArrowKeys"/> 
            to allow user interaction through text entry, the increment and decrement buttons, or the up and down arrow keys, respectively. 
            If <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.InteractionMode"/> is set to a value 
            that includes <see cref="F:NationalInstruments.UI.NumericEditInteractionModes.Buttons"/>, the increment and decrement buttons are visible and you can use the mouse wheel to increment and
            decrement the value of the control.  If <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.InteractionMode"/>
            is set to a value that does not include <see cref="F:NationalInstruments.UI.NumericEditInteractionModes.Buttons"/>, the increment and decrement buttons are not visible and 
            the mouse wheel does not affect the value of the control.
            </para>
            	<para>
            		<see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.FormatMode"/> determines the format of the 
            displayed value when viewing and editing the value of the control. 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.FormatMode"/> provides a number of static 
            methods that you can use to choose a common formatting mode. You can also create custom format modes 
            for the numeric edit control by inheriting 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.FormatMode"/>.  For more information on creating a 
            custom format mode, refer to <see keyword="CreateCustomFormatModeWinForms" keywordType="mstudio">Creating a Custom Format Mode for the Measurement Studio Windows Forms Numeric Edit .NET Control</see>.
            </para>
            	<para>
            		<see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Range"/> defines the range of valid values 
            for the control. You can set the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/> 
            property to allow either continuous or discrete values.
            </para>
            	<para>
            The numeric edit control raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.BeforeChangeValue"/>
            event before the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/> property changes and 
            raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.AfterChangeValue"/>
            event after the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/> property 
            changes. You can cancel the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.BeforeChangeValue"/>
            event to prevent the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/> property 
            from changing. The <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> property of the event 
            argument is set based on how the change was affected.
            </para>
            	<para>	
            You can connect a numeric edit control to a knob, gauge, meter, slide, tank, or thermometer control 
            such that changing the value of one control changes the value of the other control. To connect a 
            numeric edit control to another control, set the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Source"/> 
            property on <see cref="T:NationalInstruments.UI.WindowsForms.NumericEdit"/> to an implementation of the 
            <see cref="T:NationalInstruments.UI.INumericValueSource"/> interface, such as a <see cref="T:NationalInstruments.UI.WindowsForms.NumericPointer"/>.
            <note type="note">
            For more information about the numeric edit control, refer to <see keyword="UsingNINETNumEditWinForms" keywordType="mstudio">Using the Measurement Studio Windows Forms Numeric Edit .NET Control</see> or <see keyword="KeyNETNumericEditFeaturesWinForms" keywordType="mstudio">Key Measurement Studio Windows Forms Numeric Edit .NET Control Features</see>.</note>
            	</para>
            </remarks>
            <lastupdated>9/28/2011 12:31:14 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.NumericEdit"/> class.
            </summary>
            <lastupdated>5/12/2004 2:55:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.EnableBasePropertyChangedEvents">
            <summary>
            Enables <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event 
            from being raised when the properties defined in the <see cref="T:System.Windows.Forms.NumericUpDown"/> base class
            are changed.
            </summary>
            <remarks>
            	<para>
            You must call <see cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.DisableBasePropertyChangedEvents"/>
            after you have finished using the <see cref="T:NationalInstruments.UI.WindowsForms.NumericEdit"/> to reclaim memory and perform cleanup.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            <lastupdated>9/11/2007 10:21:31 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.DisableBasePropertyChangedEvents">
            <summary>
            Disables <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event 
            from being raised when the properties defined in the <see cref="T:System.Windows.Forms.NumericUpDown"/> base class
            are changed.
            </summary>
            <remarks>
            	<para>
            If you have called <see cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.EnableBasePropertyChangedEvents"/>, then
            you must call <see cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.DisableBasePropertyChangedEvents"/>
            after you have finished using the <see cref="T:NationalInstruments.UI.WindowsForms.NumericEdit"/> to reclaim memory and perform cleanup.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            <lastupdated>9/11/2007 10:21:20 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by <see cref="T:NationalInstruments.UI.WindowsForms.NumericEdit"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.NumericEdit"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            </remarks>
            <lastupdated>5/12/2004 2:55:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.ThrowExceptionIfDisposed">
            <summary>
            Raises an <see cref="T:System.ObjectDisposedException"/> if the object has been disposed.
            </summary>
            <remarks>
            The <see cref="T:System.ObjectDisposedException"/> is thrown if the value of <see cref="P:System.Windows.Forms.Control.IsDisposed"/> is <see langword="true"/>.
            </remarks>
            <seealso cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)"/>
            <seealso cref="P:System.Windows.Forms.Control.IsDisposed"/>
            <seealso cref="T:System.GC"/>
            <lastupdated>5/12/2004 3:43:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericEdit.BackColor">
            <summary>
            Gets or sets the background color of the control.
            </summary>
            <value>
            A <see cref="T:System.Drawing.Color"/> that represents the background color of the control.
            The default value is <see cref="P:System.Drawing.SystemColors.Window"/>.
            </value>
            <remarks>
            	<para>
            Overrides <see cref="P:System.Windows.Forms.UpDownBase.BackColor"/>.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:System.Windows.Forms.UpDownBase.BackColor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.ForeColor"/>
            <lastupdated>3/15/2006 1:23:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.ResetBackColor">
            <exclude/>
            <lastupdated>3/15/2006 1:25:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnBackColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.BackColorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:System.Windows.Forms.Control.BackColorChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.BackColor"/>
            <lastupdated>3/15/2006 1:24:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericEdit.ForeColor">
            <summary>
            Gets or sets the foreground color of the control.
            </summary>
            <value>
            A <see cref="T:System.Drawing.Color"/> that represents the foreground color of the control.
            The default value is <see cref="P:System.Drawing.SystemColors.WindowText"/>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="P:System.Windows.Forms.UpDownBase.ForeColor"/>.
            </remarks>
            <seealso cref="P:System.Windows.Forms.UpDownBase.ForeColor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.BackColor"/>
            <lastupdated>6/26/2003 1:08:55 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.ResetForeColor">
            <exclude/>
            <lastupdated>3/15/2006 1:25:08 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnForeColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.ForeColorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:System.Windows.Forms.Control.ForeColorChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.ForeColor"/>
            <lastupdated>3/15/2006 1:24:44 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericEdit.FormatMode">
            <summary>
            Gets or sets the mode used to format the value of the control.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.NumericFormatMode"/> that is used to format the value of the control. 
            The default value is a <see cref="T:NationalInstruments.UI.NumericFormatMode"/> that formats the value as 
            a double.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <remarks>
            	<para>
            You can set this property to any instance of <see cref="T:NationalInstruments.UI.NumericFormatMode"/>, 
            including the format modes that the <see cref="T:NationalInstruments.UI.NumericFormatMode"/> static methods 
            return and any custom class that implements the <see cref="T:NationalInstruments.UI.NumericFormatMode"/> 
            base class.
            </para>
            	<para>
            The following format modes are available through the <see cref="T:NationalInstruments.UI.NumericFormatMode"/> class:
            	</para>
            	<list type="table">
            		<listheader>
            			<term>Format Type</term>
            			<description>Description</description>
            		</listheader>
            		<item>
            			<term>
            Simple double
            </term>
            			<description>
            Displays the value in a simple double format with a specified precision. Use the <see cref="M:NationalInstruments.UI.NumericFormatMode.CreateSimpleDoubleMode"/> method to create an instance of a simple double format mode.
            </description>
            		</item>
            		<item>
            			<term>
            Generic
            </term>
            			<description>
            Displays the value using standard numeric format strings. Refer to <see keyword="580e57eb-ac47-4ffd-bccd-3a1637c2f467" keywordType="msdn">Standard Numeric Format Strings</see> in the <format type="italics">.NET Framework Developer's Guide</format> for more information. Use the <see cref="M:NationalInstruments.UI.NumericFormatMode.CreateGenericMode(System.String)"/> method to create an instance of a generic format mode.
            </description>
            		</item>
            		<item>
            			<term>
            Engineering
            </term>
            			<description>
            Displays the value using <see cref="T:NationalInstruments.EngineeringFormatInfo"/> format strings. Use the <see cref="M:NationalInstruments.UI.NumericFormatMode.CreateEngineeringMode(System.String)"/> method to create an instance of an engineering format mode.
            </description>
            		</item>
            		<item>
            			<term>
            Hexadecimal
            </term>
            			<description>
            Displays the value in hexadecimal format. Use the <see cref="M:NationalInstruments.UI.NumericFormatMode.CreateHexadecimalMode"/> method to create an instance of a hexadecimal format mode.
            </description>
            		</item>
            		<item>
            			<term>
            Binary
            </term>
            			<description>
            Displays the value in binary format. Use the <see cref="M:NationalInstruments.UI.NumericFormatMode.CreateBinaryMode"/> method to create an instance of a binary format mode.
            </description>
            		</item>
            		<item>
            			<term>
            Scientific
            </term>
            			<description>
            Displays the value using scientific notation format. Use the <see cref="M:NationalInstruments.UI.NumericFormatMode.CreateScientificMode"/> method to create an instance of a scientific format mode.
            </description>
            		</item>
            	</list>
            	<para>
            For more information, refer to the <see cref="T:NationalInstruments.UI.NumericFormatMode"/> class.
            </para>
            	<para>
            The numeric edit control does not apply the formatting specified by 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.FormatMode"/> until the control loses focus. 
            For formatting modes such as generic and engineering, the value displayed for editing differs from the 
            formatted value, so the user does not see the formatted value until the control loses focus.
            </para>
            </remarks>
            <example>
            The following example  demonstrates how to use the built-in formatting modes.
            <code lang="VB.NET">
            Private Sub CreateNumEditWithFormatting()
            	' Create a new instance of NumericEdit
            	Dim numericEdit As NumericEdit = new NumericEdit()
            	' Use the CreateSimpleDoubleMode method to create a format mode
            	' that can be used with the NumericEdit
            	numericEdit.FormatMode = NumericFormatMode.CreateSimpleDoubleMode()
            End Sub
            		</code>
            	<code lang="C#">
            private void CreateNumEditWithFormatting()
            {
            	// Create a new instance of NumericEdit
            	NumericEdit numericEdit = new NumericEdit;
            	// Use the CreateSimpleDoubleMode method to create a format mode
            	// that can be used with the NumericEdit
            	numericEdit.FormatMode = NumericFormatMode.CreateSimpleDoubleMode();
            }
            </code>
            </example>
            <seealso cref="T:NationalInstruments.UI.NumericFormatMode"/>
            <lastupdated>9/27/2011 2:40:25 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericEdit.InteractionMode">
            <summary>
            Gets or sets the user interactions that are supported by the control.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.NumericEditInteractionModes"/> that indicates which interaction modes 
            are supported by the control. The default value is a bitwise combination of <see cref="F:NationalInstruments.UI.NumericEditInteractionModes.ArrowKeys"/>, <see cref="F:NationalInstruments.UI.NumericEditInteractionModes.Buttons"/>, and <see cref="F:NationalInstruments.UI.NumericEditInteractionModes.Text"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            Set <see cref="P:System.Windows.Forms.Control.Enabled"/> to <see langword="true"/> to enable 
            interaction. If <see cref="P:System.Windows.Forms.Control.Enabled"/> is <see langword="false"/>,
            the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.InteractionMode"/> property has no
            effect regardless of its value.
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/> property changes according
            to the specified <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/>.
            Changing the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/> interactively
            raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.BeforeChangeValue"/>
            and <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.AfterChangeValue"/> events.
            </para>
            	<para>
            The control supports interaction using the mouse and the keyboard. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.InteractionMode"/> is set to 
            a value that includes <see cref="F:NationalInstruments.UI.NumericEditInteractionModes.Buttons"/>,
            the up and down buttons are visible on the control.
            </para>
            	<para>
            Click the up or down buttons 
            on the control to change the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/> property 
            interactively. You can also use the mouse wheel to change the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/> 
            property.
            To enable interaction using the mouse wheel, you must set <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.InteractionMode"/> 
            to a value that includes <see cref="F:NationalInstruments.UI.NumericEditInteractionModes.Buttons"/>. 
            Scroll the mouse wheel up to increment the value of the control and down to decrement 
            the value of the control. If you change the value by clicking the mouse or 
            using the mouse wheel, the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.BeforeChangeValue"/>
            and <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.AfterChangeValue"/> events are
            raised with the <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> property set to
            <see cref="F:NationalInstruments.UI.Action.ByMouse"/>.
            </para>
            	<para>
            To change the value of the control by entering a new value with the keyboard, set  
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.InteractionMode"/>
            to a value that includes <see cref="F:NationalInstruments.UI.NumericEditInteractionModes.Text"/>.
            To change the value using the up or down arrow keys, you must set 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.InteractionMode"/> 
            to a value that includes <see cref="F:NationalInstruments.UI.NumericEditInteractionModes.ArrowKeys"/>.
            Use the up arrow key to increment the value of the control and the down arrow key to decrement 
            the value of the control. Changing the value using the keyboard raises the 
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.BeforeChangeValue"/>
            and <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.AfterChangeValue"/> events
            with the <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> property set to
            <see cref="F:NationalInstruments.UI.Action.ByKeyboard"/>. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/> is set to
            <see cref="P:NationalInstruments.UI.NumericCoercionMode.None"/>, the 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/> property is used to determine
            the next and previous values when incrementing or decrementing.
            </para>
            	<para>
            If you set <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.InteractionMode"/> to allow keyboard or mouse interactions and <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/>
            is a negative value, then pressing the down or left arrow
            key, moving the scroll wheel down, or clicking the lower button on the
            control increases <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/>. Pressing the
            up or right arrow key, moving the scroll wheel up, or clicking the upper
            button on the control decreases 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/>.
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/>
            <lastupdated>9/27/2011 2:41:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericEdit.UpDownAlign">
            <summary>
            Gets or sets the alignment of the increment and decrement buttons.
            </summary>
            <value>
            A <see cref="T:System.Windows.Forms.LeftRightAlignment"/> that determines the alignment of the increment 
            and decrement buttons.  The default value is <see cref="F:System.Windows.Forms.LeftRightAlignment.Right"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not one of the <see cref="T:System.Windows.Forms.LeftRightAlignment"/> values.
            </exception>
            <remarks>
            Use this property to change the side of the control on which the buttons are drawn.
            </remarks>
            <see cref="T:System.Windows.Forms.LeftRightAlignment"/>
            <lastupdated>5/12/2004 2:55:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericEdit.Source">
            <summary>
            Gets or sets the control that is connected to the numeric edit control.
            </summary>
            <value>
            A Windows Forms control that implements <see cref="T:NationalInstruments.UI.INumericValueSource"/>. 
            The default value is <see langword="null"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            When you set <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Source"/> to a valid control, 
            the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/>, 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/>, 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalBase"/>, and 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Range"/> properties of the 
            <see cref="T:NationalInstruments.UI.WindowsForms.NumericEdit"/> have no effect and the properties of the 
            source control are used instead.
            </para>
            	<para>
            When you set <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Source"/> to  
            <see langword="null"/>, the <see cref="T:NationalInstruments.UI.WindowsForms.NumericEdit"/> is not connected to another control.
            </para>
            	<para>
            If the value of the numeric edit control changes as a result of setting 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Source"/>, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.AfterChangeValue"/> and 
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.ValueChanged"/> events 
            are raised. However, the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.BeforeChangeValue"/> 
            event is not raised because the value change event cannot be cancelled.
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalBase"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Range"/>
            <lastupdated>9/28/2011 12:31:35 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval">
            <summary>
            Gets or sets the interval used for coercing the value.  
            </summary>
            <value>
            The interval used for incrementing, decrementing, and coercing the value of the control. The default value is 1.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            The value is <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.PositiveInfinity"/>, or <see cref="F:System.Double.NegativeInfinity"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The value is 0.
            </para>
            </exception>
            <remarks>
            	<para>
            When you increment or decrement the value of the control using the up and down buttons 
            or the <see cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.MoveNext"/> and 
            <see cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.MovePrevious"/> methods, 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/> determines the 
            magnitude of the change.
            </para>
            Use <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/> when
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/> is set to
            <see cref="P:NationalInstruments.UI.NumericCoercionMode.ToInterval"/>. 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalBase"/> specifies
            the base value and <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/>
            specifies the distance to the next discrete value from the 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalBase"/>.
            <para>
            Set the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/> property to
            <see cref="P:NationalInstruments.UI.NumericCoercionMode.ToInterval"/> and
            set the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalBase"/> and 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/> properties to coerce the value of the control
            to discrete values. For example, set 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalBase"/> to 0 and set 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/> to 2 to coerce 
            the value to even values.
            </para>
            	<para>
            When you set <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Source"/> to a valid control, 
            the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/> property 
            has no effect and the interval of the source control is used instead.
            </para>
            	<para>
            		<see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/> is subtracted from
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/> when
            <see cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.MovePrevious"/> is called. 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/> is added to 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/> when
            <see cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.MoveNext"/> is called. If
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/> is
            set to a negative value, then calling <see cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.MovePrevious"/>
            has the effect of increasing <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/> and
            calling <see cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.MoveNext"/> has the effect of
            decreasing <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/>.
            Also, if you set <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.InteractionMode"/> to allow keyboard or mouse interactions, then pressing the 
            down or left arrow key, moving the scroll wheel down, or clicking the lower button on the control
            increases <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/>. Pressing the
            up or right arrow key, moving the scroll wheel up, or clicking the upper button on the control
            decreases <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/>.
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalBase"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.MovePrevious"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.MoveNext"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.InteractionMode"/>
            <lastupdated>9/27/2011 2:40:45 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalBase">
            <summary>
            Gets or sets the base of the interval used for coercing the value.
            </summary>
            <value>
            The base of the interval used for coercing the value. The default value is 0.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value is <see cref="F:System.Double.PositiveInfinity"/> or <see cref="F:System.Double.NegativeInfinity"/>.
            </exception>
            <remarks>
            Use <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalBase"/> only when
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/> is set to
            <see cref="P:NationalInstruments.UI.NumericCoercionMode.ToInterval"/>. 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalBase"/> specifies
            the base value and <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/>
            specifies the distance to the next discrete value from the 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalBase"/>.
            <para>
            		<see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalBase"/> is an
            ambient property. You can retrieve the property value, if not set, from 
            <see cref="P:NationalInstruments.UI.Range.Minimum"/>. Set 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalBase"/> to
            <see cref="F:System.Double.NaN"/> to enable ambient behavior.
            </para>
            	<para>
            Set the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/> property to
            <see cref="P:NationalInstruments.UI.NumericCoercionMode.ToInterval"/> and set the 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalBase"/> and 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/> properties to coerce the
            value of the control to discrete values. For example, set 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalBase"/> to 0 and set 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/> to 2 to coerce
            the value to even values.
            </para>
            	<para>
            When you set <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Source"/> to a valid control, 
            the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalBase"/> property has no effect and the 
            interval base of the source control is used instead.
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/>
            <lastupdated>9/27/2011 2:40:51 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericEdit.Range">
            <summary>
            Gets or sets the minimum and maximum values of the control.
            </summary>
            <value>
            The minimum and maximum values of the control. The default value is <see cref="F:NationalInstruments.UI.Range.All"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The value is <see cref="F:NationalInstruments.UI.Range.Empty"/>.
            </exception>
            <remarks>
            	<para>
            When you set <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Source"/> to a valid control, 
            the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Range"/> property has no effect and 
            the range of the source control is used instead.
            </para>
            	<para>
            To change the range of values accepted by the control, create a new 
            <see cref="T:NationalInstruments.UI.Range"/> object with the desired values and assign it to the control using 
            the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Range"/> property, as shown in the following example.
            <example>
            			<code lang="VB.NET">
            numericEdit1.Range = New NationalInstruments.UI.Range(0, Double.PositiveInfinity)
            </code>
            		</example>
            		<example>
            			<code lang="C#">
            numericEdit1.Range = new NationalInstruments.UI.Range(0, Double.PositiveInfinity);
            </code>
            		</example>
            	</para>
            </remarks>
            <seealso cref="T:NationalInstruments.UI.Range"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Source"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/>
            <lastupdated>9/27/2011 2:40:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode">
            <summary>
            Gets or sets the mode used to coerce the value of the control.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.NumericCoercionMode"/> used to coerce the value 
            of the control.  The default value is <see cref="P:NationalInstruments.UI.NumericCoercionMode.None"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <remarks>
            	<para>
            You can set this property to any instance of <see cref="T:NationalInstruments.UI.NumericCoercionMode"/>, 
            including the <see cref="T:NationalInstruments.UI.NumericCoercionMode"/> properties and any custom 
            class that implements the <see cref="T:NationalInstruments.UI.NumericCoercionMode"/> base class.
            </para>
            	<para>
            Set <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalBase"/> and 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/> to appropriate values 
            when <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/> is set to 
            <see cref="P:NationalInstruments.UI.NumericCoercionMode.ToInterval"/>. 
            </para>
            	<para>
            When you set <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Source"/> to a valid control, 
            the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/> property has no effect and 
            the coercion mode of the source control is used instead.
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalBase"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Source"/>
            <lastupdated>9/27/2011 2:41:01 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value">
            <summary>
            Gets or sets the value of the control.
            </summary>
            <value>
            The value of the control.  The default value is 0.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            The value is <see cref="F:System.Double.NaN"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.OutOfRangeMode"/> is 
            <see cref="F:NationalInstruments.UI.NumericOutOfRangeMode.ThrowException"/> and the value is less 
            than <see cref="P:NationalInstruments.UI.Range.Minimum"/>,
            or value is greater than <see cref="P:NationalInstruments.UI.Range.Maximum"/>.
            </para>
            </exception>
            <remarks>
            	<para>
            The <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/> property is changed according to 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/> and is formatted according to 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.FormatMode"/>. Changing the value raises the 
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.BeforeChangeValue"/> event before the value  
            changes and raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.AfterChangeValue"/> event 
            after the value changes, with <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> set to
            <see cref="F:NationalInstruments.UI.Action.Programmatic"/>.
            </para>
            	<para>
            Refer to <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.InteractionMode"/> for information 
            about changing the value interactively.
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.FormatMode"/>
            <lastupdated>9/27/2011 2:40:10 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericEdit.OutOfRangeMode">
            <summary>
            Gets or sets the behavior of the control when the value is out of range.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.NumericOutOfRangeMode"/> that specifies the
            behavior of the control when <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/>
            is less than the <see cref="P:NationalInstruments.UI.Range.Minimum"/> of
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Range"/> or greater
            than the <see cref="P:NationalInstruments.UI.Range.Maximum"/> of
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Range"/>. The default value is
            <see cref="F:NationalInstruments.UI.NumericOutOfRangeMode.ThrowException"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:NationalInstruments.UI.NumericOutOfRangeMode"/> value.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Range"/>
            <lastupdated>6/22/2006 9:27:19 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericEdit.ImmediateUpdates">
            <summary>
            Gets or sets a value indicating if the control updates immediately when invalidated.
            </summary>
            <value>
            	<see langword="true"/> if the control updates immediately when invalidated. The default value is <see langword="false"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Setting <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.ImmediateUpdates"/> to <see langword="true"/>
            executes all pending requests for painting every time the control is invalidated. This behavior can substantially degrade
            the performance of the control. If the processing of a paint request is not required, set 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.ImmediateUpdates"/> to <see langword="false"/>
            for optimal performance.
            </remarks>
            <lastupdated>7/1/2004 9:38:36 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericEdit.Text">
            <summary>
            Gets or sets the string displayed in the control.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the value of the control. The default value 
            is 0.0.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <remarks>
            	<para>
            Setting the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Text"/> property has the same 
            effect as entering text into the control. The <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/> 
            of the control changes if the entered text can be validated according to the value of 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.FormatMode"/>.
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.FormatMode"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/>
            <lastupdated>6/22/2006 9:27:24 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericEdit.FormattedValue">
            <summary>
            Gets the value of the control formatted as a string.
            </summary>
            <value>
            A <see cref="T:System.String"/> that is a formatted representation of the 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/> according to the 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.FormatMode"/> of the control.
            </value>
            <remarks>
            Use this property to get the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/> 
            formatted as a string as it appears on the control. The format used is determined by the value of 
            the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.FormatMode"/> property.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.FormatMode"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/>
            <lastupdated>5/12/2004 2:45:51 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericEdit.ValidationMode">
            <summary>
            Gets or sets the mode used to validate data entry into the control.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.NumericEditValidationMode"/> that determines how often edited text 
            is validated. The default value is <see cref="F:NationalInstruments.UI.NumericEditValidationMode.WhenCommitted"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:NationalInstruments.UI.NumericEditValidationMode"/> value.
            </exception>
            <remarks>
            	<para>
            When this property is set to <see cref="F:NationalInstruments.UI.NumericEditValidationMode.WhenCommitted"/>, the <see cref="M:NationalInstruments.UI.NumericFormatMode.IsValidChange(NationalInstruments.UI.NumericEditChangeArgs)"/> method is only called when the user commits the text in the control.
            When this property is set to <see cref="F:NationalInstruments.UI.NumericEditValidationMode.WhenChanged"/>, the <see cref="M:NationalInstruments.UI.NumericFormatMode.IsValidChange(NationalInstruments.UI.NumericEditChangeArgs)"/> method is called every time the user changes the text in the control.</para>
            </remarks>
            <seealso cref="T:NationalInstruments.UI.NumericEditValidationMode"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.FormatMode"/>
            <lastupdated>6/22/2006 9:27:28 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericEdit.InteractionMouseCursors">
            <summary>
            Gets the collection of properties that you can use to customize mouse cursors for different interactions with the numeric edit control.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.NumericEditInteractionMouseCursors"/> that you use to customize mouse cursors for different interactions with the numeric edit control.
            The default value is the collection with all properties within the collection set to default values.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>9/17/2008 4:12:42 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericEdit.ReadOnly">
            <exclude/>
            <lastupdated>5/12/2004 2:54:55 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericEdit.InterceptArrowKeys">
            <exclude/>
            <lastupdated>5/12/2004 2:54:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.MoveNext">
            <summary>
            Moves the value of the control to the next  value as specified by <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/>.
            </summary>
            <returns>
            	<see langword="true"/> if the next value is within <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Range"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            The value is moved to the next  value as long as the next  value is within
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Range"/> and returns 
            <see langword="true"/>. If the next value is out of 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Range"/>,
            then the value does not change and returns <see langword="false"/>. The next value is obtained by calling 
            <see cref="M:NationalInstruments.UI.NumericCoercionMode.GetNextValue(NationalInstruments.UI.INumericControl,NationalInstruments.UI.NumericCoercionModeArgs)"/> on
            the <see cref="T:NationalInstruments.UI.NumericCoercionMode"/> returned
            by <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/>
            property.
            </para>
            	<para>
            If you set <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/> to <see cref="P:NationalInstruments.UI.NumericCoercionMode.ToInterval"/>, then
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/> is used
            to get the next value.
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/> is added to
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/> when
            <see cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.MoveNext"/> is called. If
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/> is
            set to a negative value, then calling <see cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.MoveNext"/>
            has the effect of decreasing <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/>.
            </para>
            	<para>
            If the value is updated, then the 
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.BeforeChangeValue"/> event 
            is raised before the value changes and the
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.AfterChangeValue"/>
            event is raised after the value changes. The <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/>
            property of the event argument is set to <see cref="F:NationalInstruments.UI.Action.Programmatic"/>.
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Range"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/>
            <lastupdated>9/28/2005 2:32:23 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.MovePrevious">
            <summary>
            Moves the value of the control to the previous value as specified by <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/>.
            </summary>
            <returns>
            	<see langword="true"/> if the previous value is within <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Range"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            The value is moved to the previous value as long as the previous value is within
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Range"/> and returns 
            <see langword="true"/>. If the previous value is out of 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Range"/>,
            then the value does not change and returns <see langword="false"/>. The previous value is obtained by calling 
            <see cref="M:NationalInstruments.UI.NumericCoercionMode.GetPreviousValue(NationalInstruments.UI.INumericControl,NationalInstruments.UI.NumericCoercionModeArgs)"/> on
            the <see cref="T:NationalInstruments.UI.NumericCoercionMode"/> returned
            by the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/>
            property.
            </para>
            	<para>
            If you set <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/> to <see cref="P:NationalInstruments.UI.NumericCoercionMode.ToInterval"/>, then
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/> is used
            to get the previous value.
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/> is subtracted from
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/> when
            <see cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.MovePrevious"/> is called. If
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/> is
            set to a negative value, then calling <see cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.MovePrevious"/>
            has the effect of increasing <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/>.
            </para>
            	<para>
            If the value is updated, then the 
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.BeforeChangeValue"/> event 
            is raised before the value changes and the
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.AfterChangeValue"/>
            event is raised after the value changes. The <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/>
            property of the event argument is set to <see cref="F:NationalInstruments.UI.Action.Programmatic"/>.
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Range"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/>
            <lastupdated>9/28/2005 2:31:08 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.UpButton">
            <exclude/>
            <lastupdated>6/29/2004 5:51:30 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.DownButton">
            <exclude/>
            <lastupdated>6/29/2004 5:46:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.UpdateEditText">
            <summary>
            Updates the text displayed in the control.
            </summary>
            <remarks>
            This method overrides <see cref="M:System.Windows.Forms.UpDownBase.UpdateEditText"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:System.Windows.Forms.UpDownBase"/>
            <lastupdated>5/12/2004 3:44:19 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericEdit.Cursor">
            <summary>
            Gets or sets the cursor that is displayed when the mouse pointer is over the control.
            </summary>
            <value>
            A <see cref="T:System.Windows.Forms.Cursor"/> object that represents the cursor that is 
            displayed when the mouse pointer is over the control.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="P:System.Windows.Forms.Control.Cursor"/>. 
            </remarks>
            <seealso cref="P:System.Windows.Forms.Control.Cursor"/>
            <lastupdated>7/12/2004 1:17:58 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnCursorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.CursorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:System.Windows.Forms.Control.CursorChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Cursor"/>
            <lastupdated>3/15/2006 1:24:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.GetService(System.Type)">
            <summary>
            Returns an object that represents a service provided by the control or by its container.
            </summary>
            <param name="service">
            A service provided by the control.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents a service provided by the control.  This value is
            <see langword="null"/> if the control does not provide the specified service.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>3/15/2006 1:26:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.System#IServiceProvider#GetService(System.Type)">
            <exclude/>
            <lastupdated>1/23/2009 5:24:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>5/12/2004 3:43:56 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyDown"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)"/>.
            </remarks>
            <seealso cref="T:System.Windows.Forms.UpDownBase"/>
            <lastupdated>7/14/2004 2:06:29 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyUp"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)"/>.
            </remarks>
            <seealso cref="T:System.Windows.Forms.UpDownBase"/>
            <lastupdated>9/1/2005 10:05:08 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnTextBoxTextChanged(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.TextChanged"/> event.
            </summary>
            <param name="source">
            The source of the event.
            </param>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.UpDownBase.OnTextBoxTextChanged(System.Object,System.EventArgs)"/>.
            </remarks>
            <seealso cref="T:System.Windows.Forms.UpDownBase"/>
            <lastupdated>7/13/2004 5:23:47 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnTextChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.TextChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)"/>.
            </remarks>
            <seealso cref="T:System.Windows.Forms.UpDownBase"/>
            <lastupdated>3/26/2008 12:07:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnEnter(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Enter"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)"/>.
            </remarks>
            <seealso cref="T:System.Windows.Forms.UpDownBase"/>
            <lastupdated>7/13/2004 5:20:50 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Leave"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)"/>.
            </remarks>
            <seealso cref="T:System.Windows.Forms.UpDownBase"/>
            <lastupdated>7/13/2004 5:22:41 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnTextBoxResize(System.Object,System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Resize"/> event.
            </summary>
            <param name="source">
            The source of the event.
            </param>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.UpDownBase.OnTextBoxResize(System.Object,System.EventArgs)"/>.
            </remarks>
            <seealso cref="T:System.Windows.Forms.UpDownBase"/>
            <lastupdated>7/13/2004 5:23:39 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnHandleCreated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.UpDownBase.OnHandleCreated(System.EventArgs)"/>.
            </remarks>
            <seealso cref="T:System.Windows.Forms.UpDownBase"/>
            <lastupdated>7/13/2004 5:21:16 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Layout"/> event.
            </summary>
            <param name="levent">
            A <see cref="T:System.Windows.Forms.LayoutEventArgs"/> that contains the event data.
            </param>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.UpDownBase.OnLayout(System.Windows.Forms.LayoutEventArgs)"/>.
            </remarks>
            <seealso cref="T:System.Windows.Forms.UpDownBase"/>
            <lastupdated>9/10/2007 2:19:42 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnFontChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.FontChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.UpDownBase.OnFontChanged(System.EventArgs)"/>.
            </remarks>
            <seealso cref="T:System.Windows.Forms.UpDownBase"/>
            <lastupdated>7/13/2004 5:20:57 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.UpDownBase.OnMouseWheel(System.Windows.Forms.MouseEventArgs)"/>.
            </remarks>
            <seealso cref="T:System.Windows.Forms.UpDownBase"/>
            <lastupdated>7/13/2004 5:23:07 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)"/>.
            </remarks>
            <seealso cref="T:System.Windows.Forms.Control"/>
            <lastupdated>7/13/2004 5:22:49 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseUp"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)"/>.
            </remarks>
            <seealso cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)"/>
            <lastupdated>7/13/2004 5:22:59 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)"/>.
            </remarks>
            <seealso cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)"/>
            <lastupdated>10/5/2006 4:48:20 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.System#ComponentModel#ISupportInitialize#BeginInit">
            <exclude/>
            <lastupdated>1/23/2009 5:24:33 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.BeginInit">
            <summary>
            Signals to the object that initialization is beginning.
            </summary>
            <lastupdated>3/15/2006 1:23:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.System#ComponentModel#ISupportInitialize#EndInit">
            <exclude/>
            <lastupdated>1/23/2009 5:24:34 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.EndInit">
            <summary>
            Signals to the object that initialization is complete.
            </summary>
            <lastupdated>3/15/2006 1:24:04 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericEdit.FormatModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.FormatMode"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.FormatMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnFormatModeChanged(System.EventArgs)"/>
            <lastupdated>5/12/2004 2:56:39 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericEdit.InteractionModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.InteractionMode"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.InteractionMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnInteractionModeChanged(System.EventArgs)"/>
            <lastupdated>5/12/2004 2:56:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericEdit.SourceChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Source"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Source"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnSourceChanged(System.EventArgs)"/>
            <lastupdated>5/12/2004 2:56:27 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnCoercionIntervalChanged(System.EventArgs)"/>
            <lastupdated>5/12/2004 3:44:33 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalBaseChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalBase"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalBase"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnCoercionIntervalBaseChanged(System.EventArgs)"/>
            <lastupdated>5/12/2004 3:44:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericEdit.RangeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Range"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Range"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnRangeChanged(System.EventArgs)"/>
            <lastupdated>5/12/2004 2:56:30 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnCoercionModeChanged(System.EventArgs)"/>
            <lastupdated>5/12/2004 3:01:51 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericEdit.ValueChanged">
            <summary>
            Occurs when the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/> property changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <remarks>
            	<para>
            		The <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.ValueChanged"/> event follows the Windows Forms
            property change event model for data binding. <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.AfterChangeValue"/>
            provides additional contextual information such as the <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> 
            in the event argument that specifies how the value was changed. 
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.AfterChangeValue"/> is intended for more common
            programming tasks.
            </para>
            	<para>
            Value change events are raised in the following order:
            <list type="number">
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.BeforeChangeValue"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.AfterChangeValue"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.ValueChanged"/>
            				</description>
            			</item>
            		</list>
            	</para>
            	<note type="note">
            If you call the <see cref="M:System.Windows.Forms.Application.DoEvents"/> method inside your handler for this event and an end user presses rapidly on the numeric edit button, the control throws an exception. 
            This error can also occur if the event handler takes a signficant amount of time to return. 
            Microsoft has confirmed that this is an issue with the <see cref="T:System.Windows.Forms.NumericUpDown"/> control in the .NET Framework. You can work around this issue by calling  <see cref="M:System.Windows.Forms.Application.DoEvents"/>  outside of your event handler.
            </note>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnValueChanged(System.EventArgs)"/>
            <lastupdated>3/17/2011 4:35:24 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericEdit.ValidationModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.ValidationMode"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.ValidationMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnValidationModeChanged(System.EventArgs)"/>
            <lastupdated>5/12/2004 2:56:25 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericEdit.OutOfRangeModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.OutOfRangeMode"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.OutOfRangeMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnOutOfRangeModeChanged(System.EventArgs)"/>
            <lastupdated>5/12/2004 2:56:33 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericEdit.UpDownAlignChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.UpDownAlign"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.UpDownAlign"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.UpDownAlignChanged"/>
            <lastupdated>6/29/2004 5:52:41 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericEdit.ImmediateUpdatesChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.ImmediateUpdates"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.ImmediateUpdates"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnImmediateUpdatesChanged(System.EventArgs)"/>
            <lastupdated>6/29/2004 5:54:47 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericEdit.BeforeChangeValue">
            <summary>
            Occurs before the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/> property changes, allowing the change event to be cancelled.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <remarks>
            The event occurs before the value is changed.
            The <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> 
            property of the event argument is set based on how the change was affected. Set the 
            <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property of the event argument to 
            <see langword="true"/> to prevent the value from changing. If you set 
            <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <see langword="true"/>, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.BeforeChangeValue"/> event 
            is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.AfterChangeValue"/> event is not raised.
            <para>
            Value change events are raised in the following order:
            <list type="number">
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.BeforeChangeValue"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.AfterChangeValue"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.ValueChanged"/>
            				</description>
            			</item>
            		</list>
            	</para>
            	<note type="note">
            If you call the <see cref="M:System.Windows.Forms.Application.DoEvents"/> method inside your handler for this event and an end user presses rapidly on the numeric edit button, the control throws an exception. 
            This error can also occur if the event handler takes a signficant amount of time to return. 
            Microsoft has confirmed that this is an issue with the <see cref="T:System.Windows.Forms.NumericUpDown"/> control in the .NET Framework. You can work around this issue by calling  <see cref="M:System.Windows.Forms.Application.DoEvents"/>  outside of your event handler.
            </note>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/>
            <lastupdated>3/17/2011 4:34:35 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericEdit.AfterChangeValue">
            <summary>
            Occurs after the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/> property has changed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <remarks>
            	<para>
            		The <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.ValueChanged"/> event follows the Windows Forms
            property change event model for data binding. <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.AfterChangeValue"/>
            provides additional contextual information such as the <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> 
            in the event argument that specifies how the value was changed. 
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.AfterChangeValue"/> is intended for more common
            programming tasks.
            </para>
            The event occurs after the value has changed.  The <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> 
            property of the event argument is set based on how the change was affected. If you set the 
            <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property to <see langword="true"/> 
            in the event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.BeforeChangeValue"/> event, this event 
            is not raised.
            <para>
            Value change events are raised in the following order:
            <list type="number">
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.BeforeChangeValue"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.AfterChangeValue"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.ValueChanged"/>
            				</description>
            			</item>
            		</list>
            	</para>
            	<note type="note">
            If you call the <see cref="M:System.Windows.Forms.Application.DoEvents"/> method inside your handler for this event and an end user presses rapidly on the numeric edit button, the control throws an exception. 
            This error can also occur if the event handler takes a signficant amount of time to return. 
            Microsoft has confirmed that this is an issue with the <see cref="T:System.Windows.Forms.NumericUpDown"/> control in the .NET Framework. You can work around this issue by calling  <see cref="M:System.Windows.Forms.Application.DoEvents"/>  outside of your event handler.
            </note>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/>
            <lastupdated>3/17/2011 4:14:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericEdit.UpButtonClicked">
            <summary>
            Occurs when the up button is clicked or the mouse wheel is scrolled upward.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <remarks>
            The <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.UpButtonClicked"/> event 
            is not raised if <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.InteractionMode"/> 
            is set to a value that does not include <see cref="F:NationalInstruments.UI.NumericEditInteractionModes.Buttons"/>.
            <note type="note">
            If you call the <see cref="M:System.Windows.Forms.Application.DoEvents"/> method inside your handler for this event and an end user presses rapidly on the numeric edit button, the control throws an exception. 
            This error can also occur if the event handler takes a signficant amount of time to return. 
            Microsoft has confirmed that this is an issue with the <see cref="T:System.Windows.Forms.NumericUpDown"/> control in the .NET Framework. You can work around this issue by calling  <see cref="M:System.Windows.Forms.Application.DoEvents"/>  outside of your event handler.
            </note>
            </remarks>
            <lastupdated>3/17/2011 4:35:07 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericEdit.DownButtonClicked">
            <summary>
            Occurs when the down  button is clicked or the mouse wheel is scrolled downward.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <remarks>
            The <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.DownButtonClicked"/> event 
            is not raised if the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.InteractionMode"/> property 
            is set to a value that does not include <see cref="F:NationalInstruments.UI.NumericEditInteractionModes.Buttons"/>.
            <note type="note">
            If you call the <see cref="M:System.Windows.Forms.Application.DoEvents"/> method inside your handler for this event and an end user presses rapidly on the numeric edit button, the control throws an exception. 
            This error can also occur if the event handler takes a signficant amount of time to return. 
            Microsoft has confirmed that this is an issue with the <see cref="T:System.Windows.Forms.NumericUpDown"/> control in the .NET Framework. You can work around this issue by calling  <see cref="M:System.Windows.Forms.Application.DoEvents"/>  outside of your event handler.
            </note>
            </remarks>
            <lastupdated>3/17/2011 4:34:51 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnFormatModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.FormatModeChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.FormatMode"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.FormatModeChanged"/>
            <lastupdated>7/13/2004 5:21:05 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnInteractionModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.InteractionModeChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.InteractionMode"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.InteractionModeChanged"/>
            <lastupdated>7/13/2004 5:21:46 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnSourceChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.SourceChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Source"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.SourceChanged"/>
            <lastupdated>7/13/2004 5:23:31 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnCoercionIntervalChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionInterval"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalChanged"/>
            <lastupdated>7/13/2004 5:20:24 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnCoercionIntervalBaseChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalBaseChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalBase"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionIntervalBaseChanged"/>
            <lastupdated>7/13/2004 5:20:16 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnRangeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.RangeChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Range"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.RangeChanged"/>
            <lastupdated>7/13/2004 5:23:23 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnCoercionModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionModeChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionModeChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.CoercionMode"/>
            <lastupdated>7/13/2004 5:20:34 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.ValueChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.ValueChanged"/>
            <lastupdated>7/13/2004 5:24:22 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnValidationModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.ValidationModeChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.ValidationMode"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.ValidationModeChanged"/>
            <lastupdated>7/13/2004 5:24:15 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnOutOfRangeModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.OutOfRangeModeChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.OutOfRangeModeChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.OutOfRangeMode"/>
            <lastupdated>7/13/2004 5:23:15 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnUpDownAlignChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.UpDownAlignChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.UpDownAlignChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.UpDownAlign"/>
            <lastupdated>7/13/2004 5:24:07 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnImmediateUpdatesChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.ImmediateUpdatesChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.ImmediateUpdates"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.ImmediateUpdatesChanged"/>
            <lastupdated>7/13/2004 5:21:23 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnBeforeChangeValue(NationalInstruments.UI.BeforeChangeNumericValueEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.BeforeChangeValue"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.BeforeChangeNumericValueEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.BeforeChangeValue"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/>
            <lastupdated>7/13/2004 5:20:08 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnAfterChangeValue(NationalInstruments.UI.AfterChangeNumericValueEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.AfterChangeValue"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterChangeNumericValueEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.AfterChangeValue"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Value"/>
            <lastupdated>7/13/2004 5:20:01 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnUpButtonClicked(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.UpButtonClicked"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.UpButtonClicked"/>
            <lastupdated>7/13/2004 5:24:00 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnDownButtonClicked(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.DownButtonClicked"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.DownButtonClicked"/>
            <lastupdated>7/13/2004 5:20:42 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.Clone">
            <summary>
            Creates a new object that is a copy of this instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <remarks>
            	<see cref="M:NationalInstruments.UI.WindowsForms.NumericEdit.Clone"/> creates a new object that is a deep copy
            of <see cref="T:NationalInstruments.UI.WindowsForms.NumericEdit"/>.
            <para>
            A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the 
            original object. If the field is a value type, a bit-by-bit copy of the field is performed. If the field is a reference type, the 
            reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the 
            clone point to the same object. In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by 
            the fields in the object.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:System.ICloneable"/>
            <lastupdated>3/15/2006 1:23:55 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEdit.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.PropertyChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericEdit.PropertyChanged"/>
            <lastupdated>3/15/2006 1:24:50 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericEdit.PropertyChanged">
            <summary>
            Occurs when a property on the control changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>3/15/2006 1:25:00 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.NumericEditArray">
            <summary>
            Represents the array of Measurement Studio Windows Forms <see cref="T:NationalInstruments.UI.WindowsForms.NumericEdit"/>
            controls for displaying and editing numeric values.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.NumericEditArray.SetValues(System.Double[])"/> provides
            the ability to set the data values displayed by the items of the array. Setting the data
            values raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEditArray.ValuesChanged"/>
            event. You can obtain the data values of the control by calling 
            <see cref="M:NationalInstruments.UI.WindowsForms.NumericEditArray.GetValues"/>.
            </para>
            	<para>
            You can configure the scaling behavior of the array by specifying a fixed number of items
            in the array or by allowing the array to automatically adjust the number of items in the
            array based on the number of specified data values using <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ScaleMode"/>.
            Use <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.Count"/> to obtain the 
            number of items in the array.
            </para>
            </remarks>
            <lastupdated>8/23/2006 10:24:44 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEditArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.NumericEditArray"/> class.
            </summary>
            <lastupdated>3/15/2006 1:28:07 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEditArray.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.NumericEditArray"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed object that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.NumericEditArray"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            	<note type="note">
            If you create 2D arrays of controls, then you must call <see cref="M:System.IDisposable.Dispose"/> on the control 
            array after you have finished using it to reclaim memory and perform cleanup.
            </note>
            </remarks>
            <seealso cref="M:System.IDisposable.Dispose"/>
            <seealso cref="T:System.IDisposable"/>
            <lastupdated>9/11/2007 11:21:53 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEditArray.Clone">
            <summary>
            Creates a new object that is a copy of this instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <remarks>
            Overrides <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.Clone"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:System.ICloneable"/>
            <lastupdated>3/15/2006 1:28:24 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericEditArray.BindingData">
            <summary>
            Gets or sets the data when binding to a data source.
            </summary>
            <value>
            The data when binding to a data source.
            </value>
            <remarks>
            	<para>
            You can  select a data source using   <see cref="P:NationalInstruments.UI.WindowsForms.NumericEditArray.BindingData"/> 
            within the Windows Forms Designer by expanding the <see cref="P:System.Windows.Forms.Control.DataBindings"/> node
            in the Properties window. 
            The data source bound to the <see cref="P:NationalInstruments.UI.WindowsForms.NumericEditArray.BindingData"/>
            must provide an array of data of type <see cref="T:System.Double"/>.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>5/9/2011 4:14:53 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEditArray.GetValues">
            <summary>
            Gets the data values of the control.
            </summary>
            <returns>
            A <see cref="T:System.Double"/> array that represents the data values of the control.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<see cref="M:NationalInstruments.UI.WindowsForms.NumericEditArray.GetValues"/> creates a copy of
            the data values.
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericEditArray.SetValues(System.Double[])"/>
            <lastupdated>3/15/2006 1:28:30 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEditArray.SetValues(System.Double[])">
            <summary>
            Sets the value of the items in the control to the array of specified values.
            </summary>
            <param name="data">
            The array of values.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<see cref="M:NationalInstruments.UI.WindowsForms.NumericEditArray.SetValues(System.Double[])"/> creates
            a copy of <paramref name="data"/>. If the <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ScaleMode"/>
            is created with <see cref="M:NationalInstruments.UI.ControlArrayScaleMode.CreateAutomaticMode"/>, then
            <see cref="M:NationalInstruments.UI.WindowsForms.NumericEditArray.SetValues(System.Double[])"/> updates the number of
            items in the array based on the length of <paramref name="data"/>.
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericEditArray.GetValues"/>
            <lastupdated>3/15/2006 1:29:10 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEditArray.SetValues(System.Double[],System.Int32,System.Int32)">
            <summary>
            Sets the value of the items in the control to the array of specified values using the specified start 
            index and length.
            </summary>
            <param name="data">
            The array of values.
            </param>
            <param name="startIndex">
            The index in <paramref name="data"/> at which the data begins.
            </param>
            <param name="length">
            The number of elements, beginning at <paramref name="startIndex"/>, in <paramref name="data"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="startIndex"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is greater than the number of elements
            from <paramref name="startIndex"/> to the end of <paramref name="data"/>.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<see cref="M:NationalInstruments.UI.WindowsForms.NumericEditArray.SetValues(System.Double[])"/> creates
            a copy of the <paramref name="data"/>. If the <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ScaleMode"/>
            is created with <see cref="M:NationalInstruments.UI.ControlArrayScaleMode.CreateAutomaticMode"/>, then
            <see cref="M:NationalInstruments.UI.WindowsForms.NumericEditArray.SetValues(System.Double[])"/> updates the number of
            items in the array based on the length of <paramref name="data"/>.
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericEditArray.GetValues"/>
            <lastupdated>3/15/2006 1:29:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEditArray.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.ControlAdded"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Forms.ControlEventArgs"/> that contains the event data.
            </param>
            <remarks>
            Overrides <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.OnControlAdded(System.Windows.Forms.ControlEventArgs)"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.OnControlAdded(System.Windows.Forms.ControlEventArgs)"/>
            <seealso cref="E:System.Windows.Forms.Control.ControlAdded"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ScaleMode"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.Count"/>
            <lastupdated>3/15/2006 1:28:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEditArray.OnControlRemoved(System.Windows.Forms.ControlEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.ControlRemoved"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Forms.ControlEventArgs"/> that contains the event data.
            </param>
            <remarks>
            Overrides <see cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.OnControlRemoved(System.Windows.Forms.ControlEventArgs)"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ControlArray`1.OnControlRemoved(System.Windows.Forms.ControlEventArgs)"/>
            <seealso cref="E:System.Windows.Forms.Control.ControlRemoved"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ScaleMode"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.Count"/>
            <lastupdated>3/15/2006 1:28:43 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericEditArray.OnValuesChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericEditArray.ValuesChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericEditArray.ValuesChanged"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericEditArray.SetValues(System.Double[])"/>
            <lastupdated>3/15/2006 1:28:49 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericEditArray.ValuesChanged">
            <summary>
            Occurs when a new set of data values is passed to the control.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericEditArray.SetValues(System.Double[])"/>
            <lastupdated>3/15/2006 1:30:03 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.NumericPointer">
            <summary>
            Provides an <see langword="abstract"/> base class for all Measurement Studio Windows Forms controls 
            that display a numeric value with a pointer and a scale.
            </summary>
            <threadsafety safety="control"/>
            <remarks>
            	<see cref="T:NationalInstruments.UI.WindowsForms.NumericPointer"/> is the base class for all numeric pointer controls 
            that display a numeric value with a pointer and a scale. Numeric pointer controls accept and display a numeric value, and they enable development of applications that represent scientific instruments with respect to 
            appearance.
            <para>
            The numeric pointer controls have a single pointer and single scale. The pointer indicates
            the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>. Customize the appearance of the
            pointer through the <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.PointerColor"/>
            property, and enhance the appearance of the control by setting 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.AntiAliased"/> to <see langword="true"/>.
            </para>
            	<para>
            The scale related properties are exposed by 
            <see cref="T:NationalInstruments.UI.WindowsForms.NumericPointer"/> to facilitate their access. 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Range"/> determines the minimum
            and maximum values of the scale. Use the 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.AutoDivisionSpacing"/> property to automatically calculate the location of tick marks. 
            Customize the appearance of tick marks and labels with the <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.MajorDivisions"/> and 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.MinorDivisions"/> properties. You can also change the format of the labels through these properties.
            Use <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CustomDivisions"/> to place a division at any value with customized text for the label. Change the scale to logarithmic
            by changing <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleType"/> and
            setting <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleLogBase"/>.
            	</para>
            	<para>
            Use the <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/> property to change <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            by discrete intervals or continuously within <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Range"/>.
            </para>
            	<para>
            The control raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.BeforeChangeValue"/> event
            before <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> is changed and 
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AfterChangeValue"/> event
            after <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            has changed. Cancel the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.BeforeChangeValue"/>
            event to prevent <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            from changing. The <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/>
            property of the event argument is set based on how the change was affected.
            </para>
            	<para>
            Use <see cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.MovePrevious"/>
            and <see cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.MoveNext"/> to move
            the pointer to the previous and next values programmatically.
            	</para>
            	<para>
            The <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> property is bindable
            to a data source, such as DataSocket.
            </para>
            	<para>
            You can also connect <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> to the <see cref="T:NationalInstruments.UI.WindowsForms.NumericEdit"/> control
            in such a way that changing the value on one control will automatically update the value
            of the other. Connecting to the <see cref="T:NationalInstruments.UI.WindowsForms.NumericEdit"/>
            control allows more precise control over the value of the numeric pointer control. To
            connect the <see cref="T:NationalInstruments.UI.WindowsForms.NumericEdit"/>, set the
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericEdit.Source"/> property on the
            <see cref="T:NationalInstruments.UI.WindowsForms.NumericEdit"/> to a
            <see cref="T:NationalInstruments.UI.WindowsForms.NumericPointer"/> reference.
            </para>
            	<note type="note">
            For more information about the numeric pointer control, refer to <see keyword="UsingNINETNumericPointerControlsWinForms" keywordType="mstudio">Using the Measurement Studio Windows Forms Numeric Pointer .NET Controls</see> or <see keyword="KeyNETNumericControlFeaturesWinForms" keywordType="mstudio">Key Measurement Studio Windows Forms Numeric Pointer .NET Control Features</see>.
            </note></remarks>
            <lastupdated>9/17/2008 4:12:51 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.NumericPointer"/> class.
            </summary>
            <lastupdated>4/27/2004 10:25:24 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.NumericPointer"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.NumericPointer"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            </remarks>
            <lastupdated>4/27/2004 10:22:33 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>4/27/2004 10:39:30 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.AutoDivisionSpacing">
            <summary>
            Gets or sets a value indicating if the scale automatically calculates the location of tick marks.
            </summary>
            <value>
            	<see langword="true"/> if the location of tick marks on the scale is automatically calculated. 
            The default value is <see langword="true"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>9/28/2011 12:19:54 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.CustomDivisions">
            <summary>
            Gets the collection of custom divisions on the scale.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.ScaleCustomDivisionCollection"/> that contains the
            <see cref="T:NationalInstruments.UI.ScaleCustomDivision"/> objects.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.MajorDivisions"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.MinorDivisions"/>
            <lastupdated>9/28/2011 12:24:58 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.MajorDivisions">
            <summary>
            Gets the major divisions on the scale.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.ScaleLabeledDivisions"/> that represents 
            the major divisions on the scale.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            The <see cref="P:NationalInstruments.UI.ScaleDivisions.Base"/> and 
            <see cref="P:NationalInstruments.UI.ScaleDivisions.Interval"/> properties on 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.MajorDivisions"/> and 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.MinorDivisions"/> have 
            no effect when <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.AutoDivisionSpacing"/> 
            is set to <see langword="true"/>.
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.MinorDivisions"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CustomDivisions"/>
            <lastupdated>9/28/2011 12:24:41 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.MinorDivisions">
            <summary>
            Gets the minor divisions on the scale.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.ScaleDivisions"/> that represents the minor 
            divisions on the scale.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            The <see cref="P:NationalInstruments.UI.ScaleDivisions.Base"/> and 
            <see cref="P:NationalInstruments.UI.ScaleDivisions.Interval"/> properties on 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.MajorDivisions"/> and 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.MinorDivisions"/> have 
            no effect when <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.AutoDivisionSpacing"/> 
            is set to <see langword="true"/>.
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.MajorDivisions"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CustomDivisions"/>
            <lastupdated>9/28/2011 12:24:47 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.RangeFills">
            <summary>
            Gets the collection of fills drawn on the scale.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.ScaleRangeFillCollection"/> that contains the
            <see cref="T:NationalInstruments.UI.ScaleRangeFill"/> objects.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>9/1/2005 10:06:38 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.Range">
            <summary>
            Gets or sets the minimum and maximum value of the scale.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.Range"/> of the scale. The default value
            is a range with a <see cref="P:NationalInstruments.UI.Range.Minimum"/> value of 
            0 and <see cref="P:NationalInstruments.UI.Range.Maximum"/> 
            value of 10.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The value is <see cref="F:NationalInstruments.UI.Range.Empty"/>.
            <para>
            -or-
            </para>
            The <see cref="P:NationalInstruments.UI.Range.Minimum"/> of the specified
            value is <see cref="F:System.Double.NegativeInfinity"/>.
            <para>
            -or-
            </para>
            The <see cref="P:NationalInstruments.UI.Range.Maximum"/> of the specified
            value is <see cref="F:System.Double.PositiveInfinity"/>.
            </exception>
            <remarks>
            If <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Range"/> is
            changed such that <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            is no longer contained within the limits of the range, then 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> is updated to
            the minimum or maximum value of the range. If <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            is less than <see cref="P:NationalInstruments.UI.Range.Minimum"/>, then the value is updated to
            the minimum of the range. If <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            is greater than <see cref="P:NationalInstruments.UI.Range.Maximum"/>, then the value is updated to
            the maximum of the range. <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> 
            is coerced as specified by <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/>.
            The <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.BeforeChangeValue"/>
            event is not raised to prevent the change from being cancelled. The 
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AfterChangeValue"/> is raised after the value
            has been changed.
            <para>
            To change the range of values accepted by the control, create a new 
            <see cref="T:NationalInstruments.UI.Range"/> object with the desired values and assign it to the control using 
            the <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Range"/> property, as shown in the following example.
            <code lang="C#">
            myNumericPointerControl.Range = new NationalInstruments.UI.Range(0, 100);
            </code>
            		<code lang="VB">
            myNumericPointerControl.Range = New NationalInstruments.UI.Range(0, 100)
            </code>
            	</para>
            </remarks>
            <seealso cref="T:NationalInstruments.UI.Range"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            <lastupdated>9/28/2011 12:19:45 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleType">
            <summary>
            Gets or sets the type of the scale.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.ScaleType"/> of the scale. The default
            value is <see cref="F:NationalInstruments.UI.ScaleType.Linear"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:NationalInstruments.UI.ScaleType"/> value.
            </exception>
            <remarks>
            Changing the <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleType"/>
            to <see cref="F:NationalInstruments.UI.ScaleType.Logarithmic"/> will change the
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Range"/> to a
            positive <see cref="P:NationalInstruments.UI.Range.Minimum"/> and 
            <see cref="P:NationalInstruments.UI.Range.Maximum"/> value, if the 
            <see cref="P:NationalInstruments.UI.Range.Minimum"/> or 
            <see cref="P:NationalInstruments.UI.Range.Maximum"/> is a negative
            value.
            <para>
            To set the pointer interaction so that it will move only between logarithmic division values, 
            set the <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/> to
            <see cref="P:NationalInstruments.UI.NumericCoercionMode.ToDivisions"/>.
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleLogBase"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Range"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/>
            <lastupdated>9/28/2011 12:20:08 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleLogBase">
            <summary>
            Gets or sets the base of the logarithm to use for a logarithmic scale.
            </summary>
            <value>
            The base of the logarithm to use for a logarithmic scale. The default value is
            10.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value is less than or equal to 1.
            <para>
            -or-
            </para>
            	<para>
            The value is <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NegativeInfinity"/>, or
            <see cref="F:System.Double.PositiveInfinity"/>.
            </para>
            </exception>
            <remarks>
            	<see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleLogBase"/> has
            an effect only if <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleType"/>
            is set to <see cref="F:NationalInstruments.UI.ScaleType.Logarithmic"/>.
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleType"/>
            <lastupdated>9/28/2011 12:20:16 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineColor">
            <summary>
            Gets or sets the color of the base line connecting the tick marks.
            </summary>
            <value>
            The <see cref="T:System.Drawing.Color"/> of the base line connecting the tick
            marks. The default value is <see cref="F:System.Drawing.Color.Empty"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineColor"/> is an
            ambient property. The property value, if not set, is retrieved from the
            <see cref="P:NationalInstruments.UI.IControlBase.ForeColor"/>. Set 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineColor"/> to
            <see cref="F:System.Drawing.Color.Empty"/> to enable ambient behavior.
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineVisible"/>
            <lastupdated>5/20/2004 5:16:21 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineVisible">
            <summary>
            Gets or sets a value indicating if the base line connecting the tick marks is displayed.
            </summary>
            <value>
            	<see langword="true"/> if the base line connecting the tick marks is displayed.
            The default value is <see langword="false"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineColor"/>
            <lastupdated>7/1/2004 9:39:02 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineWidth">
            <summary>
            Gets or sets the thickness of the base line connecting the tick marks on numeric pointer controls.
            </summary>
            <value>
            The thickness of the base line connecting the tick marks on numeric pointer controls. The default value is 1.
            </value>
            <remarks>
            	The base line is visible on the scale only when 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineVisible"/> is <see langword="true"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The specified value is less than or equal to zero.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineVisible"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineColor"/>
            <lastupdated>2/21/2012 2:02:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleVisible">
            <summary>
            Gets or sets a value indicating if the scale is displayed.
            </summary>
            <value>
            	<see langword="true"/> if the scale is displayed. The default value is <see langword="true"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>7/1/2004 9:39:10 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value">
            <summary>
            Gets or sets the value of the control.
            </summary>
            <value>
            The value of the control. The default value is 0.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value is <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NegativeInfinity"/>,
            or <see cref="F:System.Double.PositiveInfinity"/>.
            <para>
            -or-
            </para>
            	<para>
            		<see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.OutOfRangeMode"/> is 
            <see cref="F:NationalInstruments.UI.NumericOutOfRangeMode.ThrowException"/> and the value is less 
            than <see cref="P:NationalInstruments.UI.Range.Minimum"/>,
            or value is greater than <see cref="P:NationalInstruments.UI.Range.Maximum"/>.
            </para>
            </exception>
            <remarks>
            The <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> is changed according to the
            specified <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/>. Changing the
            value raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.BeforeChangeValue"/> event
            before the value is changed and the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AfterChangeValue"/> event
            after the value has changed with the <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> set to
            <see cref="F:NationalInstruments.UI.Action.Programmatic"/>.
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Range"/>
            <lastupdated>9/28/2011 12:27:25 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.NationalInstruments#UI#INumericValueSource#GetValue">
            <exclude/>
            <lastupdated>5/11/2005 11:00:44 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.GetValue">
            <summary>
            Gets the value of the control.
            </summary>
            <returns>
            The value of the control.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>7/7/2004 1:04:05 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.NationalInstruments#UI#INumericValueSource#SetValue(System.Double,NationalInstruments.UI.Action)">
            <exclude/>
            <lastupdated>5/11/2005 11:00:57 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.SetValue(System.Double,NationalInstruments.UI.Action)">
            <summary>
            Sets the value of the control.
            </summary>
            <param name="value">
            The value of the control.
            </param>
            <param name="action">
            The source of the <see cref="T:NationalInstruments.UI.Action"/> that caused the event.
            </param>
            <lastupdated>7/7/2004 1:03:46 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.OutOfRangeMode">
            <summary>
            Gets or sets a value that specifies the behavior of the control when <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            is set outside the limits of the range.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.NumericOutOfRangeMode"/> that specifies the
            behavior of the control when <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            is set to a value less than the <see cref="P:NationalInstruments.UI.Range.Minimum"/> of
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Range"/> or a value greater
            than the <see cref="P:NationalInstruments.UI.Range.Maximum"/> of
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Range"/>. The default value is
            <see cref="F:NationalInstruments.UI.NumericOutOfRangeMode.ThrowException"/>.
            </value>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:NationalInstruments.UI.NumericOutOfRangeMode"/> value.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Range"/>
            <lastupdated>9/28/2011 12:30:48 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.AntiAliased">
            <summary>
            Gets or sets a value indicating if the control draws anti-aliased.
            </summary>
            <value>
            	<see langword="true"/> if the control draws anti-aliased. The default value is <see langword="true"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Setting <see cref="P:NationalInstruments.UI.INumericPointer.AntiAliased"/>
            to <see langword="true"/> draws the control by applying smoothing to
            the lines and curves for a jagged-free appearance.
            </remarks>
            <lastupdated>9/28/2011 12:24:22 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.PointerColor">
            <summary>
            Gets or sets the color of the pointer on the control.
            </summary>
            <value>
            A <see cref="T:System.Drawing.Color"/> that represents the color of the pointer on
            the control. The default value is <see cref="P:System.Drawing.SystemColors.WindowText"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.PointerColor"/> has no
            effect for <see cref="T:NationalInstruments.UI.WindowsForms.NumericPointer"/> control styles that 
            do not display a pointer.
            </remarks>
            <lastupdated>9/28/2011 12:24:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode">
            <summary>
            Gets or sets the mode used to coerce the value of the control.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.NumericCoercionMode"/> used to coerce the value 
            of the control. The default value is <see cref="P:NationalInstruments.UI.NumericCoercionMode.None"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <remarks>
            	<para>
            You can set this property to any instance of <see cref="T:NationalInstruments.UI.NumericCoercionMode"/>, 
            including the <see cref="T:NationalInstruments.UI.NumericCoercionMode"/> properties 
            and any custom class that implements the <see cref="T:NationalInstruments.UI.NumericCoercionMode"/> 
            base class.
            </para>
            	<para>
            Set <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalBase"/> and 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/> to appropriate values
            when <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/> is set to
            <see cref="P:NationalInstruments.UI.NumericCoercionMode.ToInterval"/>.
            </para>
            	<para>
            		<see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/> can be set to
            a coercion mode derived from <see cref="T:NationalInstruments.UI.NumericCoercionMode"/> such as
            <see cref="P:NationalInstruments.UI.NumericCoercionMode.ToDivisions"/>. The
            <see cref="P:NationalInstruments.UI.NumericCoercionMode.ToDivisions"/> coercion mode is
            useful when <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleType"/> is
            set to <see cref="F:NationalInstruments.UI.ScaleType.Logarithmic"/> because the interval between
            divisions is not linear. <see cref="P:NationalInstruments.UI.NumericCoercionMode.ToDivisions"/>
            is also useful when the scale is configured with one or more custom divisions.
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalBase"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.MajorDivisions"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.MinorDivisions"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CustomDivisions"/>
            <lastupdated>9/28/2011 12:28:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalBase">
            <summary>
            Gets or sets the base of the interval used for coercing the value. <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalBase"/> is used only when
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/> is set to
            <see cref="P:NationalInstruments.UI.NumericCoercionMode.ToInterval"/>. 
            </summary>
            <value>
            The base of the interval used for coercing the value. The default value is 0.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value is <see cref="F:System.Double.NegativeInfinity"/> or
            <see cref="F:System.Double.PositiveInfinity"/>.
            </exception>
            <remarks>
            	<see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalBase"/> is used only when
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/> is set to
            <see cref="P:NationalInstruments.UI.NumericCoercionMode.ToInterval"/>. 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalBase"/> specifies
            the base value and <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/>
            specifies the distance to the next discrete value from the 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalBase"/>.
            <para>
            		<see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalBase"/> is an
            ambient property. The property value, if not set, is retrieved from 
            <see cref="P:NationalInstruments.UI.Range.Minimum"/>. Set 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalBase"/> to
            <see cref="F:System.Double.NaN"/> to enable ambient behavior.
            </para>
            	<para>
            Set the <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/> to
            <see cref="P:NationalInstruments.UI.NumericCoercionMode.ToInterval"/> and set
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalBase"/> and 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/> to move the pointer
            between discrete values. For example, set the 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalBase"/> to 0 and
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/> to 2 to move the
            pointer between even values.
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/>
            <lastupdated>9/28/2011 12:28:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval">
            <summary>
            Gets or sets the interval used for coercing the value. <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/> is used when
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/> is set to
            <see cref="P:NationalInstruments.UI.NumericCoercionMode.ToInterval"/>. 
            </summary>
            <value>
            The interval used for coercing the value. The default value is 1.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value is <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.NegativeInfinity"/>, 
            or <see cref="F:System.Double.PositiveInfinity"/>.
            <para>
            -or-
            </para>
            	<para>
            The value is 0.
            </para>
            </exception>
            <remarks>
            	<see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/> is used when
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/> is set to
            <see cref="P:NationalInstruments.UI.NumericCoercionMode.ToInterval"/>. 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalBase"/> specifies
            the base value and <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/>
            specifies the distance to the next discrete value from the 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalBase"/>.
            <para>
            Set the <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/> to
            <see cref="P:NationalInstruments.UI.NumericCoercionMode.ToInterval"/> and
            set <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalBase"/> and 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/> to move the pointer
            between discrete values. For example, set the 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalBase"/> to 0 and
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/> to 2 to move the
            pointer between even values.
            </para>
            	<para>
            		<see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/> is also used
            to determine the magnitude of the change when <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/>
            is set to <see cref="P:NationalInstruments.UI.NumericCoercionMode.None"/> and the value of the control 
            is changed using the keyboard or the mouse wheel.
            </para>
            	<para>
            		<see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/> is subtracted from
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> when
            <see cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.MovePrevious"/> is called. 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/> is added to 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> when
            <see cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.MoveNext"/> is called. If
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/> is
            set to a negative value, then calling <see cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.MovePrevious"/>
            has the effect of increasing <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> and
            calling <see cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.MoveNext"/> has the effect of
            decreasing <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>.
            Also, if you set the control to allow keyboard or mouse interactions, then pressing the down or left arrow
            key or moving the scroll wheel down increases 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>. Pressing the
            up or right arrow key or moving the scroll wheel up decreases 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>.
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalBase"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.MovePrevious"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.MoveNext"/>
            <lastupdated>9/28/2011 12:28:48 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.EditRangeNumericFormatMode">
            <summary>
            Gets or sets the mode used to format the value that is displayed when you click on an
            editable minimum or maximum value label on the scale.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.NumericFormatMode"/> that is used to format the value that is 
            displayed when you click on an editable minimum or maximum value label on the scale. 
            The default value is a <see cref="T:NationalInstruments.UI.NumericFormatMode"/> that formats the value as 
            a double.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <remarks>
            	<para>
            You can set this property to any instance of <see cref="T:NationalInstruments.UI.NumericFormatMode"/>, 
            including the format modes that the <see cref="T:NationalInstruments.UI.NumericFormatMode"/> static methods 
            return and any custom class that implements the <see cref="T:NationalInstruments.UI.NumericFormatMode"/> 
            base class.
            </para>
            	<para>
            The following format modes are available through the <see cref="T:NationalInstruments.UI.NumericFormatMode"/> class:
            	</para>
            	<list type="table">
            		<listheader>
            			<term>Format Type</term>
            			<description>Description</description>
            		</listheader>
            		<item>
            			<term>
            Simple double
            </term>
            			<description>
            Displays the value in a simple double format with a specified precision. Use the <see cref="M:NationalInstruments.UI.NumericFormatMode.CreateSimpleDoubleMode"/> method to create an instance of a simple double format mode.
            </description>
            		</item>
            		<item>
            			<term>
            Generic
            </term>
            			<description>
            Displays the value using 
            using standard numeric format strings. Refer to <see keyword="580e57eb-ac47-4ffd-bccd-3a1637c2f467" keywordType="msdn">Standard Numeric Format Strings</see>  in the <format type="italics">.NET Framework Developer's Guide</format> for more information. Use the <see cref="M:NationalInstruments.UI.NumericFormatMode.CreateGenericMode(System.String)"/> method to create an instance of a generic format mode.
            </description>
            		</item>
            		<item>
            			<term>
            Engineering
            </term>
            			<description>
            Displays the value using <see cref="T:NationalInstruments.EngineeringFormatInfo"/> format strings. Use the <see cref="M:NationalInstruments.UI.NumericFormatMode.CreateEngineeringMode(System.String)"/> method to create an instance of an engineering format mode.
            </description>
            		</item>
            		<item>
            			<term>
            Hexadecimal
            </term>
            			<description>
            Displays the value in hexadecimal format. Use the <see cref="M:NationalInstruments.UI.NumericFormatMode.CreateHexadecimalMode"/> method to create an instance of a hexadecimal format mode.
            </description>
            		</item>
            		<item>
            			<term>
            Binary
            </term>
            			<description>
            Displays the value in binary format. Use the <see cref="M:NationalInstruments.UI.NumericFormatMode.CreateBinaryMode"/> method to create an instance of a binary format mode.
            </description>
            		</item>
            		<item>
            			<term>
            Scientific
            </term>
            			<description>
            Displays the value using scientific notation format. Use the <see cref="M:NationalInstruments.UI.NumericFormatMode.CreateScientificMode"/> method to create an instance of a scientific format mode.
            </description>
            		</item>
            	</list>
            	<para>
            For more information, refer to the <see cref="T:NationalInstruments.UI.NumericFormatMode"/> class.
            </para>
            	<para> 
            For formatting modes such as generic and engineering, the value displayed for editing differs from the 
            formatted value, so the user does not see the formatted value until the control loses focus.
            </para>
            </remarks>
            <example>
            The following example  demonstrates how to use the built-in formatting modes.
            <code lang="VB.NET">
            Private Sub CreateXAxisWithEditRangeFormatting()
            	' Create a new instance of XAxis
            	Dim xaxis As XAxis = new XAxis
            	' Use the CreateSimpleDoubleMode method to create a format mode
            	' that can be used with the XAxis
            	xaxis.EditRangeNumericFormatMode = NumericFormatMode.CreateSimpleDoubleMode()
            End Sub
            		</code>
            	<code lang="C#">
            private void CreateXAxisWithEditRangeFormatting()
            {
            	// Create a new instance of XAxis
            	XAxis xaxis = new XAxis();
            	// Use the CreateSimpleDoubleMode method to create a format mode
            	// that can be used with the XAxis
            	xaxis.EditRangeNumericFormatMode = NumericFormatMode.CreateSimpleDoubleMode();
            }
            </code>
            </example>
            <seealso cref="T:NationalInstruments.UI.NumericFormatMode"/>
            <lastupdated>9/17/2008 4:10:46 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.EditRangeElapsedTimeFormat">
            <summary>
            Gets or sets the format string that is used to format the value displayed when you click an
            editable minimum or maximum value label on a scale.
            </summary>
            <value>
            A <see cref="T:System.String"/> representing standard or custom elapsed time format that is used to format the value to
            display when you click an editable minimum or maximum value label on a scale. 
            The default value is a format mode created with 
            "G". 
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.FormatException">
            The string is not a valid standard or custom elapsed time format.
            </exception>
            <remarks>
            	<para>
            You can set this property to a standard elapsed time format, such as 'c', 'g', or 'G', or a custom elapsed time format string. Refer to <see keyword="ElapsedTimeWinForms" keywordType="mstudio">Using Elapsed Time Formats with Measurement Studio Windows Forms Controls</see> or 
            <see keyword="ElapsedTimeWebForms" keywordType="mstudio">Using Elapsed Time Formats with Measurement Studio Web Forms Controls</see> for 
            information about valid standard and custom elapsed time formats.
            <note>
            When you use <see cref="F:NationalInstruments.UI.FormatStringMode.ElapsedTime"/> to update the minimum and maximum label values, 
            you must input the value in the following format: [ws][-]{ d | d.hh:mm[:ss[.ff]]}[ws].
            </note>
            	</para>
            </remarks>
            <example>
            The following example  demonstrates how to use the edit range formats.
            <code lang="VB.NET">
            // Assign a valid elapsed time format
            numericPointer.EditRangeElapsedTimeFormat = "E:hh\\h\\ mm\\m"
            </code>
            	<code lang="C#">
            // Assign a valid elapsed time format
            numericPointer.EditRangeElapsedTimeFormat = "E:hh\\h\\ mm\\m";
             
            </code>
            </example>
            <lastupdated>7/27/2012 5:39:13 PM</lastupdated>
            <updatedby>National Instruments</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.EditRangeDateTimeFormatMode">
            <summary>
            Gets or sets the mode used to format the value displayed when you click on an
            editable minimum or maximum value label on the scale.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.DateTimeFormatMode"/> used to format the value displayed when you click on an editable minimum or maximum value label on the scale. 
            The default value is a date time mode created by using
            <see cref="M:NationalInstruments.UI.DateTimeFormatMode.CreateShortTimeMode"/>. 
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <remarks>
            	<para>
            You set this property to any instance of <see cref="T:NationalInstruments.UI.DateTimeFormatMode"/>,
            including the format modes that the <see cref="T:NationalInstruments.UI.DateTimeFormatMode"/> static methods 
            return and any custom class that implements the <see cref="T:NationalInstruments.UI.DateTimeFormatMode"/> 
            base class.
            </para>
            	<para>
            The following format modes are available through the <see cref="T:NationalInstruments.UI.DateTimeFormatMode"/> class:
            	</para>
            	<list type="table">
            		<listheader>
            			<term>Format Type</term>
            			<description>Description</description>
            		</listheader>
            		<item>
            			<term>
            ShortTimeMode
            </term>
            			<description>
            Displays a combination of the short date and short time patterns, separated by a space. It uses
            the standard DateTime format specifier g. Refer to <see keyword="bb79761a-ca08-44ee-b142-b06b3e2fc22b" keywordType="msdn">Standard DateTime Format Strings</see> in the <format type="italics">.NET Framework Developer's Guide</format> for more information.  
            </description>
            		</item>
            		<item>
            			<term>
            LongTimeMode
            </term>
            			<description>
            Displays a combination of the short date and long time patterns, separated by a space. It uses
            the standard DateTime format specifier G. Refer to <see keyword="bb79761a-ca08-44ee-b142-b06b3e2fc22b" keywordType="msdn">Standard DateTime Format Strings</see> in the <format type="italics">.NET Framework Developer's Guide</format> for more information. 
            </description>
            		</item>
            	</list>
            	<para>
            For more information, refer to the <see cref="T:NationalInstruments.UI.DateTimeFormatMode"/> class.
            </para>
            </remarks>
            <example>
            The following example  demonstrates how to use the built-in formatting modes.
            <code lang="VB.NET">
            Private Sub CreateXAxisWithEditRangeFormatting()
            	' Create a new instance of XAxis
            	Dim xaxis As XAxis = new XAxis
            	' Use the CreateLongTimeMode method to get a format mode
            	' that can be used with the XAxis
            	xaxis.EditRangeDateTimeFormatMode = DateTimeFormatMode.CreateLongTimeMode()
            End Sub
            		</code>
            	<code lang="C#">
            private void CreateXAxisWithEditRangeFormatting()
            {
            	// Create a new instance of XAxis
            	XAxis xaxis = new XAxis();
            	// Use the CreateLongTimeMode method to get a format mode
            	// that can be used with the XAxis
            	xaxis.EditRangeDateTimeFormatMode = DateTimeFormatMode.CreateLongTimeMode();
            }
            </code>
            </example>
            <seealso cref="T:NationalInstruments.UI.DateTimeFormatMode"/>
            <lastupdated>9/17/2008 4:10:41 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.ToolTipsEnabled">
            <summary>
            Gets or sets a value indicating if the value of the control is shown in a tooltip 
            when the mouse hovers over the pointer.
            </summary>
            <value>
            	<see langword="true"/> if <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            is shown in a tooltip when the mouse hovers over the pointer. The default value is
            <see langword="true"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ToolTipFormat"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            <lastupdated>7/1/2004 9:39:18 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.ToolTipFormat">
            <summary>
            Gets or sets the format string used to format the value displayed in the tooltip.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.FormatString"/> used to format the value 
            displayed in the tooltip. The default value is <see langword="null"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ToolTipFormat"/> is an
            ambient property. If <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ToolTipFormat"/>
            is set to the default value, then the <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ToolTipFormat"/>
            value is the <see cref="P:NationalInstruments.UI.ScaleLabeledDivisions.LabelFormat"/> of
            the <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.MajorDivisions"/>. Set
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ToolTipFormat"/> to
            <see langword="null"/> to enable ambient behavior.
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ToolTipsEnabled"/>
            <lastupdated>5/20/2004 3:11:45 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.NumericPointer.InteractionMouseCursors">
            <summary>
            Gets the collection of properties that you can use to customize mouse cursors for different interactions with the numeric pointer controls.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.NumericPointerInteractionMouseCursors"/> that you use to customize mouse cursors for different interactions with the numeric pointer controls.
            The default value is the collection with all properties within the collection set to default values.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>9/17/2008 4:13:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnBeforeChangeValue(NationalInstruments.UI.BeforeChangeNumericValueEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.BeforeChangeValue"/>
            event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.BeforeChangeNumericValueEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.BeforeChangeValue"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            <lastupdated>7/13/2004 5:25:07 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnAfterChangeValue(NationalInstruments.UI.AfterChangeNumericValueEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AfterChangeValue"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterChangeNumericValueEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AfterChangeValue"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            <lastupdated>7/13/2004 5:24:47 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnRangeFillsChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.RangeFillsChanged"/>
            event.
            </summary>
            <param name="e">
            A <see cref="T:System.ComponentModel.CollectionChangeEventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.RangeFillsChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.RangeFills"/>
            <lastupdated>9/1/2005 10:07:48 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnCustomDivisionsChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.CustomDivisionsChanged"/>
            event.
            </summary>
            <param name="e">
            A <see cref="T:System.ComponentModel.CollectionChangeEventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.CustomDivisionsChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CustomDivisions"/>
            <lastupdated>7/13/2004 5:25:43 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnValueEnterRange(NationalInstruments.UI.ScaleRangeFillEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueEnterRange"/>
            event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.ScaleRangeFillEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueEnterRange"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.RangeFills"/>
            <lastupdated>9/1/2005 10:08:36 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnValueLeaveRange(NationalInstruments.UI.ScaleRangeFillEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueLeaveRange"/>
            event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.ScaleRangeFillEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueLeaveRange"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.RangeFills"/>
            <lastupdated>9/1/2005 10:10:01 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnAutoDivisionSpacingChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AutoDivisionSpacingChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AutoDivisionSpacingChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.AutoDivisionSpacing"/>
            <lastupdated>7/13/2004 5:24:58 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnRangeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.RangeChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.RangeChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Range"/>
            <lastupdated>7/13/2004 5:26:08 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnScaleTypeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleTypeChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleTypeChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleType"/>
            <lastupdated>7/13/2004 5:26:42 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnScaleLogBaseChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleLogBaseChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleLogBaseChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleLogBase"/>
            <lastupdated>7/13/2004 5:26:35 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnScaleBaseLineColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineColorChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineColorChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineColor"/>
            <lastupdated>7/13/2004 5:26:18 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnScaleBaseLineVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineVisibleChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineVisibleChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineVisible"/>
            <lastupdated>7/13/2004 5:26:27 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnScaleVisibleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleVisibleChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleVisibleChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleVisible"/>
            <lastupdated>7/13/2004 5:26:49 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnScaleBaseLineWidthChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineWidthChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineColor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineVisible"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineWidth"/>
            <lastupdated>9/19/2011 4:22:52 PM</lastupdated>
            <updatedby>NI</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            <lastupdated>7/13/2004 5:27:14 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnOutOfRangeModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.OutOfRangeModeChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.OutOfRangeModeChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.OutOfRangeMode"/>
            <lastupdated>7/13/2004 5:25:51 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnAntiAliasedChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AntiAliasedChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AntiAliasedChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.AntiAliased"/>
            <lastupdated>4/27/2004 11:05:17 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnPointerColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.PointerColorChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.PointerColorChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.PointerColor"/>
            <lastupdated>7/13/2004 5:25:59 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnCoercionModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionModeChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionModeChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/>
            <lastupdated>7/13/2004 5:25:33 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnCoercionIntervalBaseChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalBaseChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalBaseChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalBase"/>
            <lastupdated>7/13/2004 5:25:14 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnCoercionIntervalChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/>
            <lastupdated>7/13/2004 5:25:25 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnToolTipsEnabledChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ToolTipsEnabledChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ToolTipsEnabledChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ToolTipsEnabled"/>
            <lastupdated>7/13/2004 5:27:06 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnToolTipFormatChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ToolTipFormatChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ToolTipFormatChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ToolTipFormat"/>
            <lastupdated>7/13/2004 5:26:57 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnEditRangeNumericFormatModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.EditRangeNumericFormatModeChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.EditRangeNumericFormatModeChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.EditRangeNumericFormatMode"/>
            <lastupdated>3/15/2006 1:31:18 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnEditRangeDateTimeFormatModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.EditRangeDateTimeFormatModeChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.EditRangeDateTimeFormatModeChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.EditRangeDateTimeFormatMode"/>
            <lastupdated>3/15/2006 1:31:10 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnEditRangeElapsedTimeFormatChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.EditRangeElapsedTimeFormatChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.EditRangeElapsedTimeFormat"/>
            <lastupdated>11/1/2011 2:14:33 PM</lastupdated>
            <updatedby>NI</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.MovePrevious">
            <summary>
            Moves the pointer to the previous value as specified by the 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/>.
            </summary>
            <returns>
            	<see langword="true"/> if the pointer moved to the previous value.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            The pointer is moved to the previous value as long as the previous value is within
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Range"/> and
            <see langword="true"/> is returned. If the previous value is out of 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Range"/>,
            then the pointer is not moved and <see langword="false"/> is returned.
            The previous value is obtained by calling 
            <see cref="M:NationalInstruments.UI.NumericCoercionMode.GetPreviousValue(NationalInstruments.UI.INumericControl,NationalInstruments.UI.NumericCoercionModeArgs)"/> on
            the <see cref="T:NationalInstruments.UI.NumericCoercionMode"/> returned
            by the <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/>
            property.
            <para>
            If you set <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/> 
            to <see cref="P:NationalInstruments.UI.NumericCoercionMode.ToInterval"/>, then
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/> is used
            to get the previous value.
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/> is subtracted from
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> when
            <see cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.MovePrevious"/> is called. If
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/> is
            set to a negative value, then calling <see cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.MovePrevious"/>
            has the effect of increasing <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>.
            </para>
            	<para>
            If the value is updated, then the 
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.BeforeChangeValue"/> event
            is raised before the value is changed and the
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AfterChangeValue"/>
            event is raised after the value has changed. The <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/>
            property of the event argument is set to <see cref="F:NationalInstruments.UI.Action.Programmatic"/>.
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Range"/>
            <lastupdated>9/28/2011 12:30:13 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.NationalInstruments#UI#INumericValueSource#MovePrevious(NationalInstruments.UI.Action)">
            <exclude/>
            <lastupdated>5/11/2005 11:00:52 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.MoveNext">
            <summary>
            Moves the pointer to the next value as specified by the 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/>.
            </summary>
            <returns>
            	<see langword="true"/> if the pointer moved to the next value.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            The pointer is moved to the next value as long as the next value is within
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Range"/> and
            <see langword="true"/> is returned. If the next value is out of 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Range"/>,
            then the pointer is not moved and <see langword="false"/> is returned.
            The next value is obtained by calling 
            <see cref="M:NationalInstruments.UI.NumericCoercionMode.GetNextValue(NationalInstruments.UI.INumericControl,NationalInstruments.UI.NumericCoercionModeArgs)"/> on
            the <see cref="T:NationalInstruments.UI.NumericCoercionMode"/> returned
            by the <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/>
            property.
            <para>
            If you set <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/> 
            to <see cref="P:NationalInstruments.UI.NumericCoercionMode.ToInterval"/>, then
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/> is used
            to get the next value.
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/> is added to
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> when
            <see cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.MoveNext"/> is called. If
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/> is
            set to a negative value, then calling <see cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.MoveNext"/>
            has the effect of decreasing <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>.
            </para>
            	<para>
            If the value is updated, then the 
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.BeforeChangeValue"/> event
            is raised before the value is changed and the
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AfterChangeValue"/>
            event is raised after the value has changed. The <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/>
            property of the event argument is set to <see cref="F:NationalInstruments.UI.Action.Programmatic"/>.
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Range"/>
            <lastupdated>9/28/2011 12:30:34 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.NationalInstruments#UI#INumericValueSource#MoveNext(NationalInstruments.UI.Action)">
            <exclude/>
            <lastupdated>5/11/2005 11:00:48 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.NationalInstruments#UI#INumericPointer#GetStyle">
            <exclude/>
            <lastupdated>1/23/2009 5:24:35 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.GetStyle">
            <summary>
            Gets the style that determines the appearance of the control.
            </summary>
            <returns>
            A <see cref="T:NationalInstruments.UI.NumericPointerStyle"/> that determines
            the appearance of the control.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>6/30/2004 4:01:27 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.GetService(System.Type)">
            <summary>
            Returns an object that represents a service provided by the control or by its container.
            </summary>
            <param name="service">
            A service provided by the control.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents a service provided by the control.  This value is
            <see langword="null"/> if the control does not provide the specified service.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>4/27/2004 10:22:41 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.NumericPointer.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is a regular input key or a special key that requires
            preprocessing.
            </summary>
            <param name="keyData">
            The <see cref="T:System.Windows.Forms.Keys"/> value to check.
            </param>
            <returns>
            	<see langword="true"/> if the specified key is a regular input key.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)"/>.
            </remarks>
            <seealso cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)"/>
            <seealso cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)"/>
            <seealso cref="T:System.Windows.Forms.Control"/>
            <lastupdated>7/1/2003 3:33:20 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.BeforeChangeValue">
            <summary>
            Occurs before the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> 
            changes, allowing for the change event to be cancelled.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <remarks>
            The event occurs before the value is changed. The <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> 
            property of the event argument is set based on how the change was affected. Set the 
            <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property of the event argument to 
            <see langword="true"/> to prevent the value from changing. If you set 
            <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> to <see langword="true"/>, 
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.BeforeChangeValue"/> 
            is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AfterChangeValue"/> event is not raised.
            <para>
            Value change events are raised in the following order:
            <list type="number">
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.BeforeChangeValue"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueLeaveRange"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueEnterRange"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AfterChangeValue"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueChanged"/>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            <lastupdated>9/28/2011 12:27:09 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.NationalInstruments#UI#INumericValueSource#BeforeChangeValue">
            <exclude/>
            <lastupdated>6/24/2004 5:40:15 PM</lastupdated>
            <updatedby>Abhishek Ghuwalewala</updatedby>
            <approved>False</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.AfterChangeValue">
            <summary>
            Occurs after the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> 
            has changed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <remarks>
            	<para>
            		<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueChanged"/> follows the Windows Forms
            property change event model for data binding. <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AfterChangeValue"/>
            provides additional contextual information, such as the <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> 
            in the event argument that specifies how the value was changed. 
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AfterChangeValue"/> is intended for more common
            programming tasks.
            </para>
            The event occurs after the value has changed. The <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> 
            property of the event argument is set based on how the change was affected. If you set the 
            <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property to <see langword="true"/> 
            in the event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.BeforeChangeValue"/> event, this event 
            is not raised.
            <para>
            Value change events are raised in the following order:
            <list type="number">
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.BeforeChangeValue"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueLeaveRange"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueEnterRange"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AfterChangeValue"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueChanged"/>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            <lastupdated>9/28/2011 12:28:01 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.NationalInstruments#UI#INumericValueSource#AfterChangeValue">
            <exclude/>
            <lastupdated>9/17/2009 2:37:38 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.RangeFillsChanged">
            <summary>
            Occurs when the content of the <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.RangeFills"/> 
            collection changes.
            </summary>
            <remarks>
            The content of the <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.RangeFills"/> collection 
            changes through an add, remove, insert, or clear operation on the collection.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.RangeFills"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnRangeFillsChanged(System.ComponentModel.CollectionChangeEventArgs)"/>
            <lastupdated>9/1/2005 10:40:24 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.CustomDivisionsChanged">
            <summary>
            Occurs when the content of the <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CustomDivisions"/> 
            collection changes.
            </summary>
            <remarks>
            The content of the <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CustomDivisions"/> collection 
            changes through an add, remove, insert, or clear operation on the collection.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CustomDivisions"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnCustomDivisionsChanged(System.ComponentModel.CollectionChangeEventArgs)"/>
            <lastupdated>4/27/2004 10:41:49 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueEnterRange">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> 
            changes such that the value enters the range of a <see cref="T:NationalInstruments.UI.ScaleRangeFill"/>
            in <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.RangeFills"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <remarks>
            	<para>
            Value change events are raised in the following order:
            <list type="number">
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.BeforeChangeValue"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueLeaveRange"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueEnterRange"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AfterChangeValue"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueChanged"/>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.RangeFills"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnValueEnterRange(NationalInstruments.UI.ScaleRangeFillEventArgs)"/>
            <lastupdated>9/1/2005 10:42:11 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueLeaveRange">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> 
            changes such that the value leaves the range of a <see cref="T:NationalInstruments.UI.ScaleRangeFill"/>
            in <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.RangeFills"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <remarks>
            	<para>
            Value change events are raised in the following order:
            <list type="number">
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.BeforeChangeValue"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueLeaveRange"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueEnterRange"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AfterChangeValue"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueChanged"/>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.RangeFills"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnValueLeaveRange(NationalInstruments.UI.ScaleRangeFillEventArgs)"/>
            <lastupdated>9/1/2005 10:42:42 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.AutoDivisionSpacingChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.AutoDivisionSpacing"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.AutoDivisionSpacing"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnAutoDivisionSpacingChanged(System.EventArgs)"/>
            <lastupdated>4/27/2004 10:40:23 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.RangeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Range"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Range"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnRangeChanged(System.EventArgs)"/>
            <lastupdated>4/27/2004 10:42:36 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleTypeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleType"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleType"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnScaleTypeChanged(System.EventArgs)"/>
            <lastupdated>4/27/2004 10:44:14 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleLogBaseChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleLogBase"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleLogBase"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnScaleLogBaseChanged(System.EventArgs)"/>
            <lastupdated>4/27/2004 10:44:06 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineColorChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineColor"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineColor"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnScaleBaseLineColorChanged(System.EventArgs)"/>
            <lastupdated>4/27/2004 10:43:51 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineVisibleChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineVisible"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineVisible"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnScaleBaseLineVisibleChanged(System.EventArgs)"/>
            <lastupdated>4/27/2004 10:44:01 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineWidthChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineWidth"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineColor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineVisible"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleBaseLineWidth"/>
            <lastupdated>7/8/2004 1:41:03 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleVisibleChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleVisible"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ScaleVisible"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnScaleVisibleChanged(System.EventArgs)"/>
            <lastupdated>4/27/2004 10:44:23 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <remarks>
            	<para>
            		<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueChanged"/> follows the Windows Forms
            property change event model for data binding. <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AfterChangeValue"/>
            provides additional contextual information, such as the <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> 
            in the event argument that specifies how the value was changed. 
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AfterChangeValue"/> is intended for more common
            programming tasks.
            </para>
            	<para>
            Value change events are raised in the following order:
            <list type="number">
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.BeforeChangeValue"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueLeaveRange"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueEnterRange"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AfterChangeValue"/>
            				</description>
            			</item>
            			<item>
            				<description>
            					<see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.ValueChanged"/>
            				</description>
            			</item>
            		</list>
            	</para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnValueChanged(System.EventArgs)"/>
            <lastupdated>9/1/2005 10:41:14 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.OutOfRangeModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.OutOfRangeMode"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.OutOfRangeMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnOutOfRangeModeChanged(System.EventArgs)"/>
            <lastupdated>4/27/2004 10:42:17 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.AntiAliasedChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.AntiAliased"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.AntiAliased"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnAntiAliasedChanged(System.EventArgs)"/>
            <lastupdated>4/27/2004 10:40:09 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.PointerColorChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.PointerColor"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.PointerColor"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnPointerColorChanged(System.EventArgs)"/>
            <lastupdated>4/27/2004 10:42:26 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnCoercionModeChanged(System.EventArgs)"/>
            <lastupdated>4/27/2004 10:41:43 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalBaseChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalBase"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalBase"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnCoercionIntervalBaseChanged(System.EventArgs)"/>
            <lastupdated>4/27/2004 10:42:04 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionIntervalChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnCoercionIntervalChanged(System.EventArgs)"/>
            <lastupdated>4/27/2004 10:42:11 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.ToolTipsEnabledChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ToolTipsEnabled"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ToolTipsEnabled"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnToolTipsEnabledChanged(System.EventArgs)"/>
            <lastupdated>7/8/2004 1:41:07 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.ToolTipFormatChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ToolTipFormat"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.ToolTipFormat"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnToolTipFormatChanged(System.EventArgs)"/>
            <lastupdated>7/8/2004 1:41:03 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.EditRangeNumericFormatModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.EditRangeNumericFormatMode"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.EditRangeNumericFormatMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnEditRangeNumericFormatModeChanged(System.EventArgs)"/>
            <lastupdated>7/8/2004 1:41:03 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.EditRangeDateTimeFormatModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.EditRangeDateTimeFormatMode"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.EditRangeDateTimeFormatMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnEditRangeDateTimeFormatModeChanged(System.EventArgs)"/>
            <lastupdated>7/8/2004 1:41:03 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.NumericPointer.EditRangeElapsedTimeFormatChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.EditRangeElapsedTimeFormat"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.NumericPointer.OnEditRangeElapsedTimeFormatChanged(System.EventArgs)"/>
            <lastupdated>11/1/2011 2:15:19 PM</lastupdated>
            <updatedby>NI</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.PropertyEditor">
            <summary>
            Represents the class for a Measurement Studio .NET Windows Forms control that edits property values at run time.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            	Use the <see cref="T:NationalInstruments.UI.WindowsForms.PropertyEditor"/> control to edit property values at 
            run time using their associated editors. The editor displayed by the <see cref="T:NationalInstruments.UI.WindowsForms.PropertyEditor"/> control 
            is the same editor that is displayed when you edit the property at design time.
            <para>
            		<see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.Source"/> represents the property to edit.
            To edit a property of an object, you must set the source property with an object reference and property name on that object. 
            Use <see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValue"/> to specify the value of the property
            being edited. Call <see cref="M:NationalInstruments.UI.WindowsForms.PropertyEditor.EditValue"/> to 
            launch the associated editor programmatically. If the <see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValue"/>
            cannot be converted to a valid string representation, the <see cref="E:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValueWarning"/>
            event is raised. Use the <see cref="E:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValueWarning"/> event
            to set the <see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValue"/> to a valid value.
            	</para>
            	<note type="note">Calling <see cref="M:System.Windows.Forms.Form.ShowDialog"/> on a Windows Form containing a <see cref="T:NationalInstruments.UI.WindowsForms.PropertyEditor"/> 
            control which points to a Measurement Studio graph, such as a <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/>  
            or <see cref="T:NationalInstruments.UI.WindowsForms.WaveformGraph"/>, 
            from a non-UI thread, results in an <format type="monospace">InvalidCastException</format> at the <see cref="M:System.Windows.Forms.Form.ShowDialog"/> 
             statement. 
            This exception occurs because the non-UI thread is making underlying calls to COM objects.  Therefore, the non-UI thread needs to be set to run in a 
            single-threaded apartment.  To set the <see cref="P:System.Threading.Thread.ApartmentState"/>  of the thread created, call <see cref="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)"/> on the non-UI 
            thread and set the state to 
            <format type="monospace">ApartmentState.STA</format>.  Call the  <see cref="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)"/> method before starting 
            the thread.
             </note>
            	<note type="note">
            You must call <see cref="M:System.IDisposable.Dispose"/> on the <see cref="T:NationalInstruments.UI.WindowsForms.PropertyEditor"/> after you have 
            finished using it to reclaim memory and perform cleanup.
            </note>
            	<note type="note">
            The <see cref="T:NationalInstruments.UI.WindowsForms.PropertyEditor"/> control relies on designer services that
            may not always be available at run time. This may cause the editor to behave differently compared to the behavior exhibited
            in the designer. For example, you cannot cancel changes made in the collection editor
            for properties whose type is a collection.
            </note>
            </remarks>
            <lastupdated>3/26/2008 12:08:28 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.PropertyEditor"/> class.
            </summary>
            <lastupdated>8/12/2005 5:10:16 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.PropertyEditor"/> class
            with the specified object and the property name representing the property to edit at run time.
            </summary>
            <param name="obj">
            The object whose property is edited at run time.
            </param>
            <param name="propertyName">
            The name of the property whose value is edited at run time.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="obj"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="propertyName"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="propertyName"/> is <see cref="F:System.String.Empty"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="obj"/> does not contain a property with the name
            specified in <paramref name="propertyName"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="propertyName"/> is only a design time property.
            </para>
            </exception>
            <seealso cref="T:NationalInstruments.UI.PropertyEditorSource"/>
            <lastupdated>8/11/2005 5:47:42 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.PropertyEditor"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.PropertyEditor"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            	<note type="note">
            You must call <see cref="M:System.IDisposable.Dispose"/> on the <see cref="T:NationalInstruments.UI.WindowsForms.PropertyEditor"/> after you have 
            finished using it to reclaim memory and perform cleanup.
            </note>
            </remarks>
            <seealso cref="M:System.IDisposable.Dispose"/>
            <seealso cref="T:System.IDisposable"/>
            <lastupdated>9/10/2007 2:33:37 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>8/12/2005 4:57:06 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.PropertyEditor.DefaultSize">
            <summary>
            Gets the default size of the control.
            </summary>
            <value>
            The default <see cref="T:System.Drawing.Size"/> of the control. The default <see cref="T:System.Drawing.Size"/> is a width of 120 pixels and a height of 20 pixels.
            </value>
            <remarks>
            Overrides <see cref="P:System.Windows.Forms.Control.DefaultSize"/>.
            </remarks>
            <lastupdated>8/12/2005 4:08:54 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.PropertyEditor.BackgroundImage">
            <summary>
            Gets or sets the image to display in the background of the control.
            </summary>
            <value>
            An <see cref="T:System.Drawing.Image"/> that represents the image to display in the
            background of the control. The default value is <see langword="null"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            Overrides <see cref="P:System.Windows.Forms.Control.BackgroundImage"/>.
            </para>
            </remarks>
            <lastupdated>8/12/2005 5:09:44 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.PropertyEditor.ForeColor">
            <summary>
            Gets or sets the foreground color of the control.
            </summary>
            <value>
            A <see cref="T:System.Drawing.Color"/> that represents the foreground color of the control.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="P:System.Windows.Forms.Control.ForeColor"/>.
            </remarks>
            <lastupdated>8/12/2005 4:12:11 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.PropertyEditor.BackColor">
            <summary>
            Gets or sets the background color of the control.
            </summary>
            <value>
            A <see cref="T:System.Drawing.Color"/> that represents the background color of the control.
            The default value is <see cref="P:System.Drawing.SystemColors.Control"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            Overrides <see cref="P:System.Windows.Forms.Control.BackColor"/>.
            </para>
            </remarks>
            <lastupdated>8/12/2005 5:09:41 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.PropertyEditor.AutoSize">
            <summary>
            Gets or sets a value indicating whether the control is automatically resized to display its entire contents.
            </summary>
            <value>
            	<see langword="true"/> if the control is automatically resized. The default value is <see langword="true"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="P:System.Windows.Forms.Control.AutoSize"/>.
            </remarks>
            <lastupdated>3/15/2006 1:31:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.PropertyEditor.AutoScroll">
            <exclude/>
            <lastupdated>8/12/2005 5:29:25 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.PropertyEditor.BorderStyle">
            <summary>
            Gets or sets the style used to draw the border of the control.
            </summary>
            <value>
            A <see cref="T:System.Windows.Forms.BorderStyle"/> used to draw the border
            of the control. The default value is <see cref="F:System.Windows.Forms.BorderStyle.Fixed3D"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:System.Windows.Forms.BorderStyle"/> value.
            </exception>
            <lastupdated>10/5/2006 4:48:31 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.PropertyEditor.Text">
            <summary>
            Gets or sets the text associated with the control.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the text associated with the control.
            The default value is <see cref="F:System.String.Empty"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="P:System.Windows.Forms.Control.Text"/>.
            </remarks>
            <lastupdated>8/12/2005 4:23:13 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.PropertyEditor.TextAlign">
            <summary>
            Gets or sets whether the text aligns in the center of the control, on the left of the control, or on the right of the control.</summary>
            <value>
            A <see cref="T:System.Windows.Forms.HorizontalAlignment"/> that specifies the
            text alignment of the control. The default value is <see cref="F:System.Windows.Forms.HorizontalAlignment.Left"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:System.Windows.Forms.HorizontalAlignment"/> value.
            </exception>
            <remarks>
            	<para>
            		Use <see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.TextAlign"/> to align the text within
            the control to match the layout of the text on your form.
            	</para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValue"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.FormattedSourceValue"/>
            <lastupdated>8/12/2005 4:28:44 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.PropertyEditor.InteractionMode">
            <summary>
            Gets or sets the interactions supported by the control.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.PropertyEditorInteractionMode"/> that indicates
            the user interactions that are supported by the control. The default value is
            <see cref="F:NationalInstruments.UI.PropertyEditorInteractionMode.EditValue"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:NationalInstruments.UI.PropertyEditorInteractionMode"/> value.
            </exception>
            <remarks>
            Set <see cref="P:System.Windows.Forms.Control.Enabled"/> to <see langword="true"/> to enable 
            interaction. If <see cref="P:System.Windows.Forms.Control.Enabled"/> is <see langword="false"/>,
            the <see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.InteractionMode"/> property has no
            effect regardless of its value.
            </remarks>
            <lastupdated>9/27/2005 1:48:07 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.PropertyEditor.DisplayMode">
            <summary>
            Gets or sets whether the property editor displays a painted representation of the value, a textual representation of the value, or both.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.PropertyEditorDisplayMode"/> that 
            represents the mode used to display the control. The default value is
            <see cref="F:NationalInstruments.UI.PropertyEditorDisplayMode.TextAndPaintValue"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:NationalInstruments.UI.PropertyEditorDisplayMode"/> value.
            </exception>
            <remarks>
            The painted representation of the value is drawn only if the editor supports paint value.
            </remarks>
            <lastupdated>9/28/2005 4:41:14 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.PropertyEditor.RenderMode">
            <summary>
            Gets or sets the style used to draw the <see cref="T:NationalInstruments.UI.WindowsForms.PropertyEditor"/>.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.PropertyEditorRenderMode"/> value that represents
            the style used to draw the control. The default value is 
            <see cref="F:NationalInstruments.UI.PropertyEditorRenderMode.Standard"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is a <see cref="T:NationalInstruments.UI.PropertyEditorRenderMode"/> value.
            </exception>
            <remarks>
            	The <see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.BorderStyle"/>
            must be set to <see cref="F:System.Windows.Forms.BorderStyle.Fixed3D"/> for the 
            <see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.RenderMode"/> to be applied
            to the control. If the <see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.BorderStyle"/>
            is set to any other value, the <see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.RenderMode"/>
            will not have any effect on the appearance of the control.
            <para>
            If the <see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.RenderMode"/> is
            <see cref="F:NationalInstruments.UI.PropertyEditorRenderMode.Inherit"/>, then the render
            mode of the parent is used to style the <see cref="T:NationalInstruments.UI.WindowsForms.PropertyEditor"/>
            control.
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.BorderStyle"/>
            <lastupdated>10/17/2006 2:27:29 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.PropertyEditor.Source">
            <format type="bold"></format>
            <summary>
            Gets or sets the source that represents the property to be edited at run time.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.PropertyEditorSource"/> that represents the property
            to be edited at run time. The default value is <see cref="P:NationalInstruments.UI.PropertyEditorSource.Empty"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <remarks>
            	<para>
            		<see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.Source"/> represents a property
            that supports either one-way or two-way data binding. For two-way data binding, if the
            <see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValue"/> changes through the control
            or directly on the <see cref="P:NationalInstruments.UI.PropertyEditorSource.Object"/>, the control
            updates to reflect the change.
            Two-way
            binding works through 
            <format type="italics">property changed events</format> or through objects that implement <format type="bold">System.ComponentModel.INotifyPropertyChanged</format>
            in the .NET Framework 2.0 and above. Refer to <see keyword="268039ec-5aaa-4d76-b902-acccb036c850" keywordType="msdn">Property-Changed Events</see> in <format type="italics">Windows Forms Programming</format> for more information. 
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValue"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.FormattedSourceValue"/>
            <lastupdated>9/17/2008 4:11:25 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValue">
            <summary>
            Gets or sets the value of the property.
            </summary>
            <value>
            An <see cref="T:System.Object"/> representing the value of the property
            defined by <see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.Source"/>.
            The default value is <see langword="null"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.Source"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.FormattedSourceValue"/>
            <lastupdated>8/12/2005 4:23:01 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.PropertyEditor.FormattedSourceValue">
            <summary>
            Gets the string representation of the property value.
            </summary>
            <value>
            The <see cref="T:System.String"/> representation of the 
            <see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValue"/>. The
            default value is <see cref="F:System.String.Empty"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            If <see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValue"/> is
            <see langword="null"/>, the formatted value is <see cref="F:System.String.Empty"/>.
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValue"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.Source"/>
            <lastupdated>8/12/2005 4:12:20 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.PropertyEditor.Focused">
            <summary>
            Gets a value indicating whether the control has input focus.
            </summary>
            <value>
            	<see langword="true"/> if the control has focus.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="P:System.Windows.Forms.Control.Focused"/>.
            </remarks>
            <lastupdated>8/12/2005 4:12:04 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnTextChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.TextChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)"/>
            <lastupdated>10/5/2006 4:55:04 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnValidating(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Validating"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.ComponentModel.CancelEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)"/>
            <seealso cref="E:System.Windows.Forms.Control.Validating"/>
            <lastupdated>8/12/2005 5:41:14 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.EditValue">
            <summary>
            Edits the value of the property by launching the associated editor.
            </summary>
            <remarks>
            The <see cref="T:NationalInstruments.UI.WindowsForms.PropertyEditor"/> control relies on designer services that
            may not always be available at run time. This may cause the editor to behave differently compared to the behavior exhibited
            in the designer. For example, you cannot cancel changes made in the collection editor
            for properties whose type is a collection.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>9/10/2007 2:34:20 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.PropertyEditor.IsEditingValue">
            <summary>
            Gets a value indicating if the <see cref="T:NationalInstruments.UI.WindowsForms.PropertyEditor"/>
            is currently editing the value of the property using the associated editor.
            </summary>
            <value>
            A value indicating if the <see cref="T:NationalInstruments.UI.WindowsForms.PropertyEditor"/>
            is currently editing the value of the property using the associated editor.
            </value>
            <lastupdated>10/5/2006 4:48:42 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnBorderStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.PropertyEditor.BorderStyleChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.PropertyEditor.BorderStyleChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.BorderStyle"/>
            <lastupdated>8/12/2005 4:29:49 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.PropertyEditor.BorderStyleChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.BorderStyle"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.BorderStyle"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnBorderStyleChanged(System.EventArgs)"/>
            <lastupdated>8/12/2005 4:57:25 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnTextAlignChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.PropertyEditor.TextAlignChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.PropertyEditor.TextAlignChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.TextAlign"/>
            <lastupdated>8/12/2005 5:10:09 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.PropertyEditor.TextAlignChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.TextAlign"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.TextAlign"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnTextAlignChanged(System.EventArgs)"/>
            <lastupdated>8/12/2005 4:58:39 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnInteractionModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.PropertyEditor.InteractionModeChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.PropertyEditor.InteractionModeChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.InteractionMode"/>
            <lastupdated>8/12/2005 4:30:49 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.PropertyEditor.InteractionModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.InteractionMode"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.InteractionMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnInteractionModeChanged(System.EventArgs)"/>
            <lastupdated>8/12/2005 4:57:31 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnDisplayModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.PropertyEditor.DisplayModeChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.PropertyEditor.DisplayModeChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.DisplayMode"/>
            <lastupdated>8/12/2005 4:30:08 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.PropertyEditor.DisplayModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.DisplayMode"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.DisplayMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnDisplayModeChanged(System.EventArgs)"/>
            <lastupdated>8/12/2005 4:57:28 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnSourceChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.Source"/>
            <lastupdated>8/12/2005 4:34:58 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.Source"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.Source"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnSourceChanged(System.EventArgs)"/>
            <lastupdated>8/12/2005 4:57:34 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnSourceValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValueChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValueChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValue"/>
            <lastupdated>8/12/2005 5:09:56 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValueChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValue"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValue"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnSourceValueChanged(System.EventArgs)"/>
            <lastupdated>8/12/2005 4:57:39 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnSourceValueWarning(NationalInstruments.UI.PropertyEditorSourceValueWarningEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValueWarning"/>
            event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.PropertyEditorSourceValueWarningEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValueWarning"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValue"/>
            <lastupdated>8/12/2005 5:41:04 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValueWarning">
            <summary>
            Occurs when the <see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValue"/> changes
            to a value that cannot be converted from its corresponding string representation.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <remarks>
            	Use <see cref="E:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValueWarning"/> to set <see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValue"/> to a value
            that has a string representation.
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.SourceValue"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnSourceValueWarning(NationalInstruments.UI.PropertyEditorSourceValueWarningEventArgs)"/>
            <lastupdated>8/12/2005 4:58:34 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnRenderModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.PropertyEditor.RenderModeChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.PropertyEditor.RenderModeChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.RenderMode"/>
            <lastupdated>10/17/2006 2:27:45 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.PropertyEditor.RenderModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.RenderMode"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.PropertyEditor.RenderMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnRenderModeChanged(System.EventArgs)"/>
            <lastupdated>10/17/2006 2:27:56 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.System#IServiceProvider#GetService(System.Type)">
            <exclude/>
            <lastupdated>5/11/2005 11:01:39 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.GetService(System.Type)">
            <exclude/>
            <lastupdated>8/12/2005 4:29:41 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.ThrowExceptionIfDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if the object has been disposed.
            </summary>
            <remarks>
            The <see cref="T:System.ObjectDisposedException"/> is thrown if the value of <see cref="P:System.Windows.Forms.Control.IsDisposed"/>
            is <see langword="true"/>. 
            </remarks>
            <seealso cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)"/>
            <seealso cref="P:System.Windows.Forms.Control.IsDisposed"/>
            <seealso cref="T:System.GC"/>
            <lastupdated>8/12/2005 4:57:00 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the control.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Forms.PaintEventArgs"/> that contains information about the control to paint.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)"/>
            <lastupdated>10/5/2006 4:54:19 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.PropertyEditor.CreateParams">
            <summary>
            Gets the required creation parameters when the control handle is created.
            </summary>
            <value>
            A <see cref="T:System.Windows.Forms.CreateParams"/> object that contains the required
            creation parameters when the handle to the control is created.
            </value>
            <remarks>
            Overrides <see cref="P:System.Windows.Forms.Control.CreateParams"/>.
            </remarks>
            <lastupdated>8/12/2005 5:09:48 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnSystemColorsChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.SystemColorsChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)"/>
            <seealso cref="E:System.Windows.Forms.Control.SystemColorsChanged"/>
            <lastupdated>8/12/2005 5:10:05 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnCursorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.CursorChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)"/>
            <seealso cref="E:System.Windows.Forms.Control.CursorChanged"/>
            <seealso cref="P:System.Windows.Forms.Control.Cursor"/>
            <lastupdated>8/12/2005 4:29:56 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.PropertyEditor.Font">
            <summary>
            Gets or sets the font to apply to the text that is displayed by the control.
            </summary>
            <value>
            The <see cref="T:System.Drawing.Font"/> to apply to the text that is displayed by the control.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="P:System.Windows.Forms.Control.Font"/>.
            </remarks>
            <seealso cref="T:System.Windows.Forms.Control"/>
            <lastupdated>6/26/2003 1:08:31 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnHandleCreated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)"/>
            <seealso cref="E:System.Windows.Forms.Control.HandleCreated"/>
            <lastupdated>8/12/2005 4:30:41 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Leave"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)"/>
            <seealso cref="E:System.Windows.Forms.Control.Leave"/>
            <lastupdated>8/12/2005 4:33:13 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.GotFocus"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)"/>
            <seealso cref="E:System.Windows.Forms.Control.GotFocus"/>
            <lastupdated>8/12/2005 4:30:35 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDown"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)"/>
            <seealso cref="E:System.Windows.Forms.Control.MouseDown"/>
            <lastupdated>8/12/2005 5:40:44 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Forms.MouseEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)"/>
            <seealso cref="E:System.Windows.Forms.Control.MouseWheel"/>
            <lastupdated>8/12/2005 5:40:52 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            Processes a dialog key.
            </summary>
            <param name="keyData">
            A <see cref="T:System.Windows.Forms.Keys"/> value that represents the key to process.
            </param>
            <returns>
            	<see langword="true"/> if the key was processed by the control.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)"/>.
            </remarks>
            <lastupdated>8/12/2005 5:10:12 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyDown"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)"/>
            <seealso cref="E:System.Windows.Forms.Control.KeyDown"/>
            <lastupdated>8/12/2005 5:40:24 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)">
            <summary>
            Sets the bounds of the control to the specified values.
            </summary>
            <param name="x">
            The x-coordinate of the upper-left corner of the control.
            </param>
            <param name="y">
            The y-coordinate of the upper-left corner of the control.
            </param>
            <param name="width">
            The width of the control.
            </param>
            <param name="height">
            The height of the control.
            </param>
            <param name="specified">
            A bitwise combination of the <see cref="T:System.Windows.Forms.BoundsSpecified"/> values.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)"/>.
            </remarks>
            <seealso cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)"/>
            <lastupdated>8/12/2005 5:09:00 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.LostFocus"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)"/>
            <seealso cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)"/>
            <lastupdated>10/5/2006 4:53:49 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnMouseEnter(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseEnter"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)"/>
            <seealso cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)"/>
            <lastupdated>10/5/2006 4:54:02 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.PropertyEditor.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)"/>
            <seealso cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)"/>
            <lastupdated>10/5/2006 4:54:11 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.RadialNumericPointer">
            <summary>
            Provides an <see langword="abstract"/> base class for Measurement Studio Windows 
            Forms numeric pointers that display a numeric value in a radial scale.
            </summary>
            <threadsafety safety="control"/>
            <remarks>
            	<see cref="T:NationalInstruments.UI.WindowsForms.RadialNumericPointer"/> is the base class
            for numeric pointer controls that display a numeric value in a radial scale.
            	<para>
            The <see cref="T:NationalInstruments.UI.WindowsForms.RadialNumericPointer"/> supports interaction.
            Use <see cref="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.InteractionMode"/> to configure the suite of interactions provided by the control. Use
            <see cref="F:NationalInstruments.UI.RadialNumericPointerInteractionModes.DragPointer"/> to allow
            the pointer to be dragged. Use 
            <see cref="F:NationalInstruments.UI.RadialNumericPointerInteractionModes.SnapPointer"/> to snap the
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> property to the mouse cursor.
            You can also change <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> interactively using the up, down, left, and right arrow keys on the keyboard and
            by scrolling the mouse wheel.
            	</para>
            	<para>
            		Use <see cref="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.DialColor"/> to customize the color of the radial area containing the pointer.
            Specify the arc in which the scale is drawn with <see cref="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.ScaleArc"/>. Use <see cref="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.ScaleArc"/>
            to place divisions representing the minimum and maximum of the scale at different
            angles.
            	</para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.RadialNumericPointer.HitTest(System.Int32,System.Int32)"/> determines the
            portion of the radial numeric pointer at a specified x and y location.
            </para>
            </remarks>
            <lastupdated>9/28/2011 4:10:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.RadialNumericPointer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.RadialNumericPointer"/> class.
            </summary>
            <lastupdated>4/27/2004 11:46:06 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.RadialNumericPointer.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.RadialNumericPointer"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.RadialNumericPointer"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            </remarks>
            <lastupdated>4/27/2004 11:44:10 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.DialColor">
            <summary>
            Gets or sets the color of the radial area containing the pointer.
            </summary>
            <value>
            A <see cref="T:System.Drawing.Color"/> that represents the color of the radial
            area containing the pointer. The default value is <see cref="P:System.Drawing.SystemColors.Control"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.PointerColor"/>
            <lastupdated>9/28/2011 12:25:16 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.InteractionMode">
            <summary>
            Gets or sets the user interactions that are supported by the control.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.RadialNumericPointerInteractionModes"/> that indicates which user interactions are
            supported by the control. The default value is <see cref="F:NationalInstruments.UI.RadialNumericPointerInteractionModes.Indicator"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            Set <see cref="P:System.Windows.Forms.Control.Enabled"/> to <see langword="true"/> to enable 
            interaction. If <see cref="P:System.Windows.Forms.Control.Enabled"/> is <see langword="false"/>,
            the <see cref="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.InteractionMode"/> has no
            effect regardless of its value.
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> is changed according
            to the specified <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/>.
            Changing the <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> interactively
            raises the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.BeforeChangeValue"/>
            and <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AfterChangeValue"/> events.
            </para>
            	<para>
            The control supports interaction via the mouse and the keyboard. Click the left mouse button and drag the 
            mouse to change the <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/> interactively. 
            The mouse wheel can also be used to change the <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>.
            To enable interaction using the mouse wheel, <see cref="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.InteractionMode"/> 
            must be set to a value that includes <see cref="F:NationalInstruments.UI.RadialNumericPointerInteractionModes.DragPointer"/>. 
            Scroll the mouse wheel up to move the pointer to the next value and down to move the pointer to the 
            previous value. If the value is changed by clicking and dragging the mouse or using the mouse wheel, 
            the <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.BeforeChangeValue"/>
            and <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AfterChangeValue"/> events are
            raised with the <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> set to
            <see cref="F:NationalInstruments.UI.Action.ByMouse"/>.
            </para>
            	<para>
            To enable interaction using the keyboard, <see cref="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.InteractionMode"/>
            must be set to a value that includes <see cref="F:NationalInstruments.UI.RadialNumericPointerInteractionModes.DragPointer"/>.
            To change the value using the keyboard, use the up or right arrow key to move the pointer to the 
            next value and the down or left arrow key to move the pointer to the previous value. Changing 
            the value using the keyboard raises the 
            <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.BeforeChangeValue"/>
            and <see cref="E:NationalInstruments.UI.WindowsForms.NumericPointer.AfterChangeValue"/> events
            with the <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> set to
            <see cref="F:NationalInstruments.UI.Action.ByKeyboard"/>. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/> is set to
            <see cref="P:NationalInstruments.UI.NumericCoercionMode.None"/>, the 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/> is used to determine
            the next and previous values.
            </para>
            	<para>
            If you set <see cref="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.InteractionMode"/> 
            to allow keyboard or mouse interactions and <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/>
            is a negative value, then pressing the down or left arrow
            key or moving the scroll wheel down increases 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>. Pressing the
            up or right arrow key or moving the scroll wheel up decreases 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>.
            </para>
            	<para>
            Set <see cref="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.InteractionMode"/> to <see cref="F:NationalInstruments.UI.RadialNumericPointerInteractionModes.WrapPointer"/>
            to wrap the pointer from the minimum of the <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Range"/>
            to the maximum of the <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Range"/> and vice versa.
            You cannot use <see cref="F:NationalInstruments.UI.RadialNumericPointerInteractionModes.WrapPointer"/> when you change the pointer with the keyboard or mouse wheel.
            </para>
            </remarks>
            <seealso cref="P:System.Windows.Forms.Control.Enabled"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Value"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionMode"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.CoercionInterval"/>
            <lastupdated>9/28/2011 12:29:41 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.ScaleArc">
            <summary>
            Gets or sets the arc on which the scale is drawn.
            </summary>
            <value>
            An <see cref="T:NationalInstruments.UI.Arc"/> on which the scale is drawn. The
            default value is an arc with a start angle of 240 and a sweep angle of <entity value="ndash"/>300. 
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <remarks>
            	Use <see cref="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.ScaleArc"/>
            to place divisions representing the minimum and maximum of the scale at different
            angles.
            </remarks>
            <lastupdated>9/28/2011 12:21:44 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.RadialNumericPointer.OnDialColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.RadialNumericPointer.DialColorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.RadialNumericPointer.DialColorChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.DialColor"/>
            <lastupdated>7/13/2004 5:27:39 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.RadialNumericPointer.OnInteractionModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.RadialNumericPointer.InteractionModeChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.RadialNumericPointer.InteractionModeChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.InteractionMode"/>
            <lastupdated>7/13/2004 5:27:46 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.RadialNumericPointer.OnScaleArcChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.RadialNumericPointer.ScaleArcChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.RadialNumericPointer.ScaleArcChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.ScaleArc"/>
            <lastupdated>7/13/2004 5:27:54 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.RadialNumericPointer.DialColorChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.DialColor"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.DialColor"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.RadialNumericPointer.OnDialColorChanged(System.EventArgs)"/>
            <lastupdated>4/27/2004 11:46:11 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.RadialNumericPointer.InteractionModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.InteractionMode"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.InteractionMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.RadialNumericPointer.OnInteractionModeChanged(System.EventArgs)"/>
            <lastupdated>4/27/2004 10:41:55 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.RadialNumericPointer.ScaleArcChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.ScaleArc"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.RadialNumericPointer.ScaleArc"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.RadialNumericPointer.OnScaleArcChanged(System.EventArgs)"/>
            <lastupdated>4/27/2004 11:46:17 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.RadialNumericPointer.GetService(System.Type)">
            <summary>
            Returns an object that represents a service provided by the control or by its container.
            </summary>
            <param name="service">
            A service provided by the control.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents a service provided by the control.  This value is
            <see langword="null"/> if the control does not provide the specified service.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>4/27/2004 11:44:15 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.RadialNumericPointer.HitTest(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:NationalInstruments.UI.RadialNumericPointerHitTestInfo"/> that specifies
            where on the control the specified point is located.
            </summary>
            <param name="x">
            The horizontal location of the point to be hit-tested, in client coordinates.
            </param>
            <param name="y">
            The vertical location of the point to be hit-tested, in client coordinates.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.UI.RadialNumericPointerHitTestInfo"/> that specifies where on
            the control the <paramref name="x"/> and <paramref name="y"/> coordinate is located.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <example>The following example demonstrates using the <see cref="M:NationalInstruments.UI.WindowsForms.RadialNumericPointer.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/> method to determine where a user clicked on a <see cref="T:NationalInstruments.UI.WindowsForms.RadialNumericPointer" crefType="Unqualified"/> object. 
            <code lang="VB.NET">
            Public Sub RadialNumericPointer_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
                Dim hitTestRegion As RadialNumericPointerHitTestInfo
                Dim randomColor As Color = Color.FromArgb(RandNumberGenerator.[Next](255), RandNumberGenerator.[Next](255), RandNumberGenerator.[Next](255))
             
                hitTestRegion = radialNumeric.HitTest(e.X, e.Y)
                Select Case hitTestRegion
                    Case RadialNumericPointerHitTestInfo.Dial
                        radialNumeric.DialColor = randomColor
                        Debug.WriteLine("The dial was clicked")
                        Exit Select
                    Case RadialNumericPointerHitTestInfo.OuterScaleArea
                        Debug.WriteLine("The outer scale area was clicked")
                        Exit Select
                    Case RadialNumericPointerHitTestInfo.Pointer
                        radialNumeric.PointerColor = randomColor
                        Debug.WriteLine("The pointer was clicked")
                        Exit Select
                    Case RadialNumericPointerHitTestInfo.ScaleArea
                        radialNumeric.ScaleBaseLineColor = randomColor
                        Debug.WriteLine("The scale was clicked")
                        Exit Select
                    Case RadialNumericPointerHitTestInfo.None
                        Debug.WriteLine("Unknown area was clicked")
                        Exit Select
                End Select
            End Sub
            </code>
            </example>
            <example>
            	<code lang="C#">
            public void RadialNumericPointer_MouseDown(object sender, MouseEventArgs e)
            {
                RadialNumericPointerHitTestInfo hitTestRegion;
                Color randomColor = Color.FromArgb(RandNumberGenerator.Next(255),
                                                    RandNumberGenerator.Next(255),
                                                    RandNumberGenerator.Next(255));
             
                hitTestRegion = radialNumeric.HitTest(e.X, e.Y);
                switch (hitTestRegion)
                {
                    case RadialNumericPointerHitTestInfo.Dial:
                        radialNumeric.DialColor = randomColor;
                        Debug.WriteLine("The dial was clicked");
                        break;
                    case RadialNumericPointerHitTestInfo.OuterScaleArea:
                        Debug.WriteLine("The outer scale area was clicked");
                        break;
                    case RadialNumericPointerHitTestInfo.Pointer:
                        radialNumeric.PointerColor = randomColor;
                        Debug.WriteLine("The pointer was clicked");
                        break;
                    case RadialNumericPointerHitTestInfo.ScaleArea:
                        radialNumeric.ScaleBaseLineColor = randomColor;
                        Debug.WriteLine("The scale was clicked");
                        break;
                    case RadialNumericPointerHitTestInfo.None:
                        Debug.WriteLine("Unknown area was clicked");
                        break;
                }
            }
            </code>
            </example>
            <lastupdated>10/5/2010 10:22:47 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.ScatterGraph">
            <summary>
            Represents the class for Measurement Studio Windows Forms graphs that accept both x and y data values.
            </summary>
            <threadsafety safety="control"/>
            <remarks>
            The ability to specify x and y data values
            allows you to plot non-monotonically increasing data.
            <para>
            You can use the <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/> collection to include
            multiple <see cref="T:NationalInstruments.UI.ScatterPlot"/> instances on a single graph. With multiple plots, 
            you can plot multiple sets of data in the same plot area. 
            You can determine whether plot colors are assigned by a color generator with the <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.UseColorGenerator"/> property, and you can 
            change the plot color assignment with the <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotLineColorGenerator"/> property.
            </para>
            	<para>
            Use <see cref="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXY(System.Double,System.Double)"/> to plot
            a single y value against a single x value or an array of y values against an array of x
            values. <see cref="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXYAppend(System.Double,System.Double)"/> plots y values against
            x values by appending the x and y values to the existing data.
            </para>
            	<para>
            You can plot multiple sets of y data values against a single set of x data values with a
            single method invocation. Use <see cref="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXYMultiple(System.Double[],System.Double[0:,0:])"/> 
            to plot a 2D array of y values against an array of x values.
            <see cref="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXYAppendMultiple(System.Double[],System.Double[0:,0:])"/> behaves in much the
            same way, except that it appends the data to the existing data for plotting.
            <see cref="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotYXMultiple(System.Double[],System.Double[0:,0:])"/> plots a 2D
            array of x values against an array of y values. <see cref="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotYXAppendMultiple(System.Double[],System.Double[0:,0:])"/>
            behaves similarly but appends the data to the existing data.
            </para>
            	<note type="note">
            For more information about the scatter graph control, refer to <see keyword="UsingNINETGraphWinForms" keywordType="mstudio">Using the Measurement Studio Windows Forms Graph .NET Controls</see> or <see keyword="KeyNETGraphFeaturesWinForms" keywordType="mstudio">Key Measurement Studio Windows Forms Scatter and Waveform Graph .NET Control Features</see>.
            </note>
            </remarks>
            <lastupdated>6/11/2009 6:11:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ScatterGraph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> class.
            </summary>
            <lastupdated>7/1/2003 12:09:55 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots">
            <summary>
            Gets the collection of plots on the graph.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.ScatterPlotCollection"/> that contains the
            <see cref="T:NationalInstruments.UI.ScatterPlot"/> objects on the graph.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:NationalInstruments.UI.ScatterPlot"/>
            <lastupdated>9/23/2011 2:01:33 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotLineColorGenerator">
            <summary>
            Gets or sets the <see cref="T:NationalInstruments.UI.ColorGenerator"/> that assigns different colors to plots.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.ColorGenerator"/> that assigns different colors to plots. The default value is <see cref="P:NationalInstruments.UI.FixedSetColorGenerator.Standard"/>.
            </value>
            <remarks>
            At design time, when you add, delete, or move a plot up and down, the colors are reassigned according to the order in which they are specified in the color set. At run time, the color of the plot depends on its index in the plot collection when you add the plot to the collection. If you delete a plot at run time, the color of the other plots does not change.  
            <para>
            When this property changes, the <see cref="E:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotLineColorGeneratorChanged"/> event is raised, and colors are assigned to all plots if <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.UseColorGenerator"/> is <see langword="true"/>.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.UseColorGenerator"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotLineColorGeneratorChanged"/>
            <seealso cref="T:NationalInstruments.UI.ColorGenerator"/>
            <seealso cref="T:NationalInstruments.UI.FixedSetColorGenerator"/>
            <lastupdated>7/6/2009 5:44:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ScatterGraph.UseColorGenerator">
            <summary>
            Gets or sets whether <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotLineColorGenerator"/> is enabled or disabled. 
            </summary>
            <value>
            	<see langword="true"/> to enable <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotLineColorGenerator"/>; otherwise, <see langword="false"/>.
            The default value is <see langword="false"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            When this property is set to <see langword="true"/>, plots are assigned different colors by the <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotLineColorGenerator"/> property; otherwise, the plots default to <see cref="P:System.Drawing.Color.Lime"></see>, unless you have explicitly set the colors. 
            <see cref="P:NationalInstruments.UI.Plot.LineColorPrecedence"/> determines whether to draw the plot with auto-generated color or with a color you assign. 
            	<para>
            At design time, this property is set to <see langword="true"/> by a custom control designer for ease of use.
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.Plot.LineColorPrecedence"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotLineColorGenerator"/>
            <seealso cref="T:NationalInstruments.UI.ColorGenerator"/>
            <seealso cref="T:NationalInstruments.UI.FixedSetColorGenerator"/>
            <lastupdated>6/11/2009 6:14:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ScatterGraph.DefaultDataOrientation">
            <summary>
            Gets or sets the default orientation of values in a 2D array.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.DataOrientation"/> that specifies the
            default orientation of values in a 2D array. The default value is 
            <see cref="F:NationalInstruments.UI.DataOrientation.DataInRows"/>.
            </value>
            <remarks>
            	<see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.DefaultDataOrientation"/> is used 
            in <see cref="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXYMultiple(System.Double[],System.Double[0:,0:])"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXYAppendMultiple(System.Double[],System.Double[0:,0:])"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotYXMultiple(System.Double[],System.Double[0:,0:])"/>, and 
            <see cref="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotYXAppendMultiple(System.Double[],System.Double[0:,0:])"/> when the 
            orientation of values in a 2D array is not specified.
            </remarks>
            <lastupdated>6/23/2006 3:06:44 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ScatterGraph.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            </remarks>
            <seealso cref="M:System.IDisposable.Dispose"/>
            <seealso cref="T:System.IDisposable"/>
            <lastupdated>7/1/2003 12:07:38 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ScatterGraph.OnPlotLineColorGeneratorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotLineColorGeneratorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains 
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>6/11/2009 6:14:35 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ScatterGraph.OnUseColorGeneratorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.WaveformGraph.UseColorGeneratorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains 
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>6/11/2009 6:14:40 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXYAppendMultiple(System.Double[],System.Double[0:,0:])">
            <summary>
            Plots a 2D array of y values with the default data orientation against an 
            array of x values by appending the x and y values to the existing data.
            </summary>
            <param name="xData">
            The x values to append.
            </param>
            <param name="yData">
            The 2D array of y values to append.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="xData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="xData"/> and <paramref name="yData"/> arrays have different lengths.
            <para>
            -or-
            </para>
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> and <paramref name="yData"/> contain special values
            at the same index.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <remarks>
            The orientation of data in <paramref name="yData"/> is specified by 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.DefaultDataOrientation"/>.
            <para>
            This method calls
            <see cref="M:NationalInstruments.UI.ScatterPlot.PlotXYAppend(System.Double,System.Double)"/> on 
            <see cref="T:NationalInstruments.UI.ScatterPlot"/> instances in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/> using the index of 
            rows or columns of <paramref name="yData"/> based on the value of <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.DefaultDataOrientation"/>. 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.ScatterPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.ScatterPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> 
            and the first <see cref="T:NationalInstruments.UI.YAxis"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> 
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.XAxis"/> or
            <see cref="T:NationalInstruments.UI.YAxis"/> is created and added to the
            collection.
            </para>
            	<para>
            To plot an array of <see cref="T:System.DateTime"/> values against an array of <see cref="T:System.Double"/> values,
            use the <see cref="T:NationalInstruments.DataConverter"/> to convert a <see cref="T:System.DateTime"/> array
            to a <see cref="T:System.Double"/> array.
            </para>
            </remarks>
            <example>
            The following example demonstrates plotting an array of x values represented as <see cref="T:System.DateTime"/> against 
            an array of y values represented as <see cref="T:System.Double"/>. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> instance called <format type="monospace">scatterGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim XValuesAsDateTime as DateTime() = {DateTime.Now}
            Dim XValues as Double() = CType(NationalInstruments.DataConverter.Convert(XValuesAsDateTime, GetType(Double())), Double())
            Dim YValues as Double(,) = {{5}, {6}}
            scatterGraph1.PlotXYAppendMultiple(XValues, YValues)
            </code>
            </example>
            <example>
            	<code lang="C#">
            DateTime[] xValuesAsDateTime = new DateTime[] { DateTime.Now };
            double[] xValues = (double[]) NationalInstruments.DataConverter.Convert(xValuesAsDateTime, typeof(double[]));
            double[,] yValues = new double[,] { {5}, {6} };
            scatterGraph1.PlotXYAppendMultiple(xValues, yValues);
            </code>
            </example>
            <example>
            The following example demonstrates plotting an array of x values against an array of y values
            represented as a 1D double array. The code can be used to plot a single data point across
            multiple plots. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> called <format type="monospace">scatterGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim xValues As Double() = {1, 2, 3, 4, 5}
            Dim yValues As Double() = {2, 4, 6, 8, 10}
            Dim yValuesMatrix As Double(,) = CType(NationalInstruments.DataConverter.Convert(yValues, GetType(Double(,))), Double(,))
            scatterGraph1.DefaultDataOrientation = DataOrientation.DataInColumns
            scatterGraph1.PlotXYAppendMultiple(xValues, yValuesMatrix)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] xValues = new double[5] { 1, 2, 3, 4, 5 };
            double[] yValues = new double[5] { 2, 4, 6, 8, 10 };
            double[,] yValuesMatrix = (double[,]) NationalInstruments.DataConverter.Convert(yValues, typeof(double[,]));
            scatterGraph1.DefaultDataOrientation = DataOrientation.DataInColumns;
            scatterGraph1.PlotXYAppendMultiple(xValues, yValuesMatrix);
            </code>
            </example>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.DefaultDataOrientation"/>
            <seealso cref="M:NationalInstruments.UI.ScatterPlot.PlotXYAppend(System.Double,System.Double)"/>
            <lastupdated>6/29/2006 5:31:52 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXYAppendMultiple(System.Double[],System.Double[0:,0:],NationalInstruments.UI.DataOrientation)">
            <summary>
            Plots a 2D array of y values with the specified orientation against an array
            of x values by appending the x and y values to the existing data.
            </summary>
            <param name="xData">
            The array of x values to append.
            </param>
            <param name="yData">
            The 2D array of y values to append.
            </param>
            <param name="orientation">
            A <see cref="T:NationalInstruments.UI.DataOrientation"/> value that specifies the orientation
            of data in <paramref name="yData"/>.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.ScatterPlot.PlotXYAppend(System.Double,System.Double)"/> on 
            <see cref="T:NationalInstruments.UI.ScatterPlot"/> instances in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/> using the index of 
            rows or columns of <paramref name="yData"/> based on the value of <paramref name="orientation"/>. 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.ScatterPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.ScatterPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> 
            and the first <see cref="T:NationalInstruments.UI.YAxis"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> 
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.XAxis"/> or
            <see cref="T:NationalInstruments.UI.YAxis"/> is created and added to the
            collection.
            </para>
            	<para>
            To plot an array of <see cref="T:System.DateTime"/> values against an array of <see cref="T:System.Double"/> values,
            use the <see cref="T:NationalInstruments.DataConverter"/> to convert a <see cref="T:System.DateTime"/> array
            to a <see cref="T:System.Double"/> array.
            </para>
            </remarks>
            <example>
            The following example demonstrates plotting an array of x values represented as <see cref="T:System.DateTime"/> against 
            an array of y values represented as <see cref="T:System.Double"/>. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> called <format type="monospace">scatterGraph1</format> 
            has been declared and initialized.
            <code lang="VB.NET">
            Dim XValuesAsDateTime as DateTime() = {DateTime.Now}
            Dim XValues as Double() = CType(NationalInstruments.DataConverter.Convert(XValuesAsDateTime, GetType(Double())), Double())
            Dim YValues as Double(,) = {{5}, {6}}
            scatterGraph1.PlotXYAppendMultiple(XValues, YValues, DataOrientation.DataInRows)
            </code>
            </example>
            <example>
            	<code lang="C#">
            DateTime[] xValuesAsDateTime = new DateTime[] { DateTime.Now };
            double[] xValues = (double[]) NationalInstruments.DataConverter.Convert(xValuesAsDateTime, typeof(double[]));
            double[,] yValues = new double[,] { {5}, {6} };
            scatterGraph1.PlotXYAppendMultiple(xValues, yValues, DataOrientation.DataInRows);
            </code>
            </example>
            <example>
            The following example demonstrates plotting an array of x values against an array of y values
            represented as a 1D double array. The code can be used to plot a single data point across
            multiple plots. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> called <format type="monospace">scatterGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim xValues As Double() = {1, 2, 3, 4, 5}
            Dim yValues As Double() = {2, 4, 6, 8, 10}
            Dim yValuesMatrix As Double(,) = CType(NationalInstruments.DataConverter.Convert(yValues, GetType(Double(,))), Double(,))
            scatterGraph1.PlotXYAppendMultiple(xValues, yValuesMatrix, DataOrientation.DataInColumns)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] xValues = new double[5] { 1, 2, 3, 4, 5 };
            double[] yValues = new double[5] { 2, 4, 6, 8, 10 };
            double[,] yValuesMatrix = (double[,]) NationalInstruments.DataConverter.Convert(yValues, typeof(double[,]));
            scatterGraph1.PlotXYAppendMultiple(xValues, yValuesMatrix, DataOrientation.DataInColumns);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="xData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="xData"/> and <paramref name="yData"/> arrays have different lengths.
            <para>
            -or-
            </para>
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> and <paramref name="yData"/> contain special values
            at the same index.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<paramref name="orientation"/> is not a valid <see cref="T:NationalInstruments.UI.DataOrientation"/>
            value.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.ScatterPlot.PlotXYAppend(System.Double,System.Double)"/>
            <lastupdated>10/16/2010 4:32:55 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotYXAppendMultiple(System.Double[],System.Double[0:,0:])">
            <summary>
            Plots a 2D array of x values with the default data orientation against an 
            array of y values by appending the x and y values to the existing data.
            </summary>
            <param name="yData">
            The y values to append.
            </param>
            <param name="xData">
            The 2D array of x values to append.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="xData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="xData"/> and <paramref name="yData"/> arrays have different lengths.
            <para>
            -or-
            </para>
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> and <paramref name="yData"/> contain special values
            at the same index.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <remarks>
            The orientation of data in <paramref name="xData"/> is specified by
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.DefaultDataOrientation"/>.
            <para>
            This method calls
            <see cref="M:NationalInstruments.UI.ScatterPlot.PlotXYAppend(System.Double,System.Double)"/> on 
            <see cref="T:NationalInstruments.UI.ScatterPlot"/> instances in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/> using the index of 
            rows or columns of <paramref name="xData"/> based on the value of <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.DefaultDataOrientation"/>. 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.ScatterPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.ScatterPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> 
            and the first <see cref="T:NationalInstruments.UI.YAxis"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> 
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.XAxis"/> or
            <see cref="T:NationalInstruments.UI.YAxis"/> is created and added to the
            collection.
            </para>
            	<para>
            To plot an array of <see cref="T:System.DateTime"/> values against an array of <see cref="T:System.Double"/> values,
            use the <see cref="T:NationalInstruments.DataConverter"/> to convert a <see cref="T:System.DateTime"/> array
            to a <see cref="T:System.Double"/> array.
            </para>
            </remarks>
            <example>
            The following example demonstrates plotting an array of y values represented as <see cref="T:System.DateTime"/> against 
            an array of x values represented as <see cref="T:System.Double"/>. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> called <format type="monospace">scatterGraph1</format> 
            has been declared and initialized.
            <code lang="VB.NET">
            Dim YValuesAsDateTime as DateTime() = {DateTime.Now}
            Dim YValues as Double() = CType(NationalInstruments.DataConverter.Convert(YValuesAsDateTime, GetType(Double())), Double())
            Dim XValues as Double(,) = {{5}, {6}}
            scatterGraph1.PlotYXAppendMultiple(YValues, XValues)
            </code>
            </example>
            <example>
            	<code lang="C#">
            DateTime[] yValuesAsDateTime = new DateTime[] { DateTime.Now };
            double[] yValues = (double[]) NationalInstruments.DataConverter.Convert(yValuesAsDateTime, typeof(double[]));
            double[,] xValues = new double[,] { {5}, {6} };
            scatterGraph1.PlotYXAppendMultiple(yValues, xValues);
            </code>
            </example>
            <example>
            The following example demonstrates plotting an array of y values against an array of x values
            represented as a 1D double array. The code can be used to plot a single data point across
            multiple plots. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> called <format type="monospace">scatterGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim yValues As Double() = {1, 2, 3, 4, 5}
            Dim xValues As Double() = {2, 4, 6, 8, 10}
            Dim xValuesMatrix As Double(,) = CType(NationalInstruments.DataConverter.Convert(xValues, GetType(Double(,))), Double(,))
            scatterGraph1.DefaultDataOrientation = DataOrientation.DataInColumns
            scatterGraph1.PlotYXAppendMultiple(yValues, xValuesMatrix)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] yValues = new double[5] { 1, 2, 3, 4, 5 };
            double[] xValues = new double[5] { 2, 4, 6, 8, 10 };
            double[,] xValuesMatrix = (double[,]) NationalInstruments.DataConverter.Convert(xValues, typeof(double[,]));
            scatterGraph1.DefaultDataOrientation = DataOrientation.DataInColumns;
            scatterGraph1.PlotYXAppendMultiple(yValues, xValuesMatrix);
            </code>
            </example>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.DefaultDataOrientation"/>
            <seealso cref="M:NationalInstruments.UI.ScatterPlot.PlotXYAppend(System.Double,System.Double)"/>
            <lastupdated>6/29/2006 5:32:32 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotYXAppendMultiple(System.Double[],System.Double[0:,0:],NationalInstruments.UI.DataOrientation)">
            <summary>
            Plots a 2D array of x values with the specified orientation against an array
            of y values by appending the x and y values to the existing data.
            </summary>
            <param name="yData">
            The y values to append.
            </param>
            <param name="xData">
            The 2D array of x values to append.
            </param>
            <param name="orientation">
            A <see cref="T:NationalInstruments.UI.DataOrientation"/> value that specifies the orientation of
            data in <paramref name="xData"/>.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.ScatterPlot.PlotXYAppend(System.Double,System.Double)"/> on 
            <see cref="T:NationalInstruments.UI.ScatterPlot"/> instances in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/> using the index of 
            rows or columns of <paramref name="xData"/> based on the value of <paramref name="orientation"/>. 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.ScatterPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.ScatterPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> 
            and the first <see cref="T:NationalInstruments.UI.YAxis"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> 
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.XAxis"/> or
            <see cref="T:NationalInstruments.UI.YAxis"/> is created and added to the
            collection.
            </para>
            	<para>
            To plot an array of <see cref="T:System.DateTime"/> values against an array of <see cref="T:System.Double"/> values,
            use the <see cref="T:NationalInstruments.DataConverter"/> to convert a <see cref="T:System.DateTime"/> array
            to a <see cref="T:System.Double"/> array.
            </para>
            </remarks>
            <example>
            The following example demonstrates plotting an array of y values represented as <see cref="T:System.DateTime"/> against 
            an array of x values represented as double. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> called <format type="monospace">scatterGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim YValuesAsDateTime as DateTime() = {DateTime.Now}
            Dim YValues as Double() = CType(NationalInstruments.DataConverter.Convert(YValuesAsDateTime, GetType(Double())), Double())
            Dim XValues as Double(,) = {{5}, {6}}
            scatterGraph1.PlotYXAppendMultiple(YValues, XValues, DataOrientation.DataInRows)
            </code>
            </example>
            <example>
            	<code lang="C#">
            DateTime[] yValuesAsDateTime = new DateTime[] { DateTime.Now };
            double[] yValues = (double[]) NationalInstruments.DataConverter.Convert(yValuesAsDateTime, typeof(double[]));
            double[,] xValues = new double[,] { {5}, {6} };
            scatterGraph1.PlotYXAppendMultiple(yValues, xValues, DataOrientation.DataInRows);
            </code>
            </example>
            <example>
            The following example demonstrates plotting an array of y values against an array of x values
            represented as a 1D double array. The code can be used to plot a single data point across
            multiple plots. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> called <format type="monospace">scatterGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim yValues As Double() = {1, 2, 3, 4, 5}
            Dim xValues As Double() = {2, 4, 6, 8, 10}
            Dim xValuesMatrix As Double(,) = CType(NationalInstruments.DataConverter.Convert(xValues, GetType(Double(,))), Double(,))
            scatterGraph1.PlotYXAppendMultiple(yValues, xValuesMatrix, DataOrientation.DataInColumns)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] yValues = new double[5] { 1, 2, 3, 4, 5 };
            double[] xValues = new double[5] { 2, 4, 6, 8, 10 };
            double[,] xValuesMatrix = (double[,]) NationalInstruments.DataConverter.Convert(xValues, typeof(double[,]));
            scatterGraph1.PlotYXAppendMultiple(yValues, xValuesMatrix, DataOrientation.DataInColumns);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="xData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="xData"/> and <paramref name="yData"/> arrays have different lengths.
            <para>
            -or-
            </para>
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> and <paramref name="yData"/> contain special values
            at the same index.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<paramref name="orientation"/> is not a valid <see cref="T:NationalInstruments.UI.DataOrientation"/>
            value.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.ScatterPlot.PlotXYAppend(System.Double,System.Double)"/>
            <lastupdated>10/16/2010 4:33:43 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXYMultiple(System.Double[],System.Double[0:,0:])">
            <summary>
            Plots a 2D array of y values with the default orientation against an array 
            of x values.
            </summary>
            <param name="xData">
            The array of x values to plot.
            </param>
            <param name="yData">
            The 2D array of y values to plot.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="xData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="xData"/> and <paramref name="yData"/> arrays have different lengths.
            <para>
            -or-
            </para>
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> and <paramref name="yData"/> contain special values
            at the same index.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <remarks>
            The orientation of data in <paramref name="yData"/> is specified by
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.DefaultDataOrientation"/>.
            <para>
            This method calls <see cref="M:NationalInstruments.UI.ScatterPlot.PlotXY(System.Double,System.Double)"/> on 
            <see cref="T:NationalInstruments.UI.ScatterPlot"/> instances in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/> using the index of 
            rows or columns of <paramref name="yData"/> based on the value of <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.DefaultDataOrientation"/>. 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.ScatterPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.ScatterPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> 
            and the first <see cref="T:NationalInstruments.UI.YAxis"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> 
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.XAxis"/> or
            <see cref="T:NationalInstruments.UI.YAxis"/> is created and added to the
            collection.
            </para>
            	<para>
            To plot an array of <see cref="T:System.DateTime"/> values against an array of <see cref="T:System.Double"/> values,
            use the <see cref="T:NationalInstruments.DataConverter"/> to convert a <see cref="T:System.DateTime"/> array
            to a <see cref="T:System.Double"/> array.
            </para>
            </remarks>
            <example>
            The following example demonstrates plotting an array of x values represented as <see cref="T:System.DateTime"/> against 
            an array of y values represented as <see cref="T:System.Double"/>. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> called <format type="monospace">scatterGraph1</format> 
            has been declared and initialized.
            <code lang="VB.NET">
            Dim XValuesAsDateTime as DateTime() = {DateTime.Now}
            Dim XValues as Double() = CType(NationalInstruments.DataConverter.Convert(XValuesAsDateTime, GetType(Double())), Double())
            Dim YValues as Double(,) = {{5}, {6}}
            scatterGraph1.PlotXYMultiple(XValues, YValues)
            </code>
            </example>
            <example>
            	<code lang="C#">
            DateTime[] xValuesAsDateTime = new DateTime[] { DateTime.Now };
            double[] xValues = (double[]) NationalInstruments.DataConverter.Convert(xValuesAsDateTime, typeof(double[]));
            double[,] yValues = new double[,] { {5}, {6} };
            scatterGraph1.PlotXYMultiple(xValues, yValues);
            </code>
            </example>
            <example>
            The following example demonstrates plotting an array of x values against an array of y values
            represented as a 1D  
            double array. The code can be used to plot a single data point across
            multiple plots. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> called <format type="monospace">scatterGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim xValues As Double() = {1, 2, 3, 4, 5}
            Dim yValues As Double() = {2, 4, 6, 8, 10}
            Dim yValuesMatrix As Double(,) = CType(NationalInstruments.DataConverter.Convert(yValues, GetType(Double(,))), Double(,))
            scatterGraph1.DefaultDataOrientation = DataOrientation.DataInColumns
            scatterGraph1.PlotXYMultiple(xValues, yValuesMatrix)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] xValues = new double[5] { 1, 2, 3, 4, 5 };
            double[] yValues = new double[5] { 2, 4, 6, 8, 10 };
            double[,] yValuesMatrix = (double[,]) NationalInstruments.DataConverter.Convert(yValues, typeof(double[,]));
            scatterGraph1.DefaultDataOrientation = DataOrientation.DataInColumns;
            scatterGraph1.PlotXYMultiple(xValues, yValuesMatrix);
            </code>
            </example>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.DefaultDataOrientation"/>
            <seealso cref="M:NationalInstruments.UI.ScatterPlot.PlotXY(System.Double,System.Double)"/>
            <lastupdated>6/29/2006 5:32:11 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXYMultiple(System.Double[],System.Double[0:,0:],NationalInstruments.UI.DataOrientation)">
            <summary>
            Plots a 2D array of y values with the specified orientation against an array
            of x values.
            </summary>
            <param name="xData">
            The array of x values to plot.
            </param>
            <param name="yData">
            The 2D array of y values to plot.
            </param>
            <param name="orientation">
            A <see cref="T:NationalInstruments.UI.DataOrientation"/> value that specifies the orientation 
            of values in <paramref name="yData"/>.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.ScatterPlot.PlotXY(System.Double,System.Double)"/> on 
            <see cref="T:NationalInstruments.UI.ScatterPlot"/> instances in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/> using the index of 
            rows or columns of <paramref name="yData"/> based on the value of <paramref name="orientation"/>. 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.ScatterPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.ScatterPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> 
            and the first <see cref="T:NationalInstruments.UI.YAxis"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> 
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.XAxis"/> or
            <see cref="T:NationalInstruments.UI.YAxis"/> is created and added to the
            collection.
            </para>
            	<para>
            To plot an array of <see cref="T:System.DateTime"/> values against an array of <see cref="T:System.Double"/> values,
            use the <see cref="T:NationalInstruments.DataConverter"/> to convert a <see cref="T:System.DateTime"/> array
            to a <see cref="T:System.Double"/> array.
            </para>
            </remarks>
            <example>
            The following example demonstrates plotting an array of x values represented as <see cref="T:System.DateTime"/> against 
            an array of y values represented as <see cref="T:System.Double"/>. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> called <format type="monospace">scatterGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim XValuesAsDateTime as DateTime() = {DateTime.Now}
            Dim XValues as Double() = CType(NationalInstruments.DataConverter.Convert(XValuesAsDateTime, GetType(Double())), Double())
            Dim YValues as Double(,) = {{5}, {6}}
            scatterGraph1.PlotXYMultiple(XValues, YValues, DataOrientation.DataInRows)
            </code>
            </example>
            <example>
            	<code lang="C#">
            DateTime[] xValuesAsDateTime = new DateTime[] { DateTime.Now };
            double[] xValues = (double[]) NationalInstruments.DataConverter.Convert(xValuesAsDateTime, typeof(double[]));
            double[,] yValues = new double[,] { {5}, {6} };
            scatterGraph1.PlotXYMultiple(xValues, yValues, DataOrientation.DataInRows);
            </code>
            </example>
            <example>
            The following example demonstrates plotting an array of x values against an array of y values
            represented as a 1D double array. The code can be used to plot a single data point across
            multiple plots. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> called <format type="monospace">scatterGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim xValues As Double() = {1, 2, 3, 4, 5}
            Dim yValues As Double() = {2, 4, 6, 8, 10}
            Dim yValuesMatrix As Double(,) = CType(NationalInstruments.DataConverter.Convert(yValues, GetType(Double(,))), Double(,))
            scatterGraph1.PlotXYMultiple(xValues, yValuesMatrix, DataOrientation.DataInColumns)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] xValues = new double[5] { 1, 2, 3, 4, 5 };
            double[] yValues = new double[5] { 2, 4, 6, 8, 10 };
            double[,] yValuesMatrix = (double[,]) NationalInstruments.DataConverter.Convert(yValues, typeof(double[,]));
            scatterGraph1.PlotXYMultiple(xValues, yValuesMatrix, DataOrientation.DataInColumns);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="xData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="xData"/> and <paramref name="yData"/> arrays have different lengths.
            <para>
            -or-
            </para>
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> and <paramref name="yData"/> contain special values
            at the same index.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<paramref name="orientation"/> is not a valid <see cref="T:NationalInstruments.UI.DataOrientation"/>
            value.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.ScatterPlot.PlotXY(System.Double,System.Double)"/>
            <lastupdated>10/16/2010 4:31:12 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotYXMultiple(System.Double[],System.Double[0:,0:])">
            <summary>
            Plots a 2D array of x values with the default orientation against an array
            of y values.
            </summary>
            <param name="yData">
            The array of y values to plot.
            </param>
            <param name="xData">
            The 2D array of x values to plot.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="xData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="xData"/> and <paramref name="yData"/> arrays have different lengths.
            <para>
            -or-
            </para>
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> and <paramref name="yData"/> contain special values
            at the same index.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <remarks>
            The orientation of data in <paramref name="xData"/> is specified by
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.DefaultDataOrientation"/>.
            <para>
            This method calls
            <see cref="M:NationalInstruments.UI.ScatterPlot.PlotXY(System.Double,System.Double)"/> on 
            <see cref="T:NationalInstruments.UI.ScatterPlot"/> instances in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/> using the index of 
            rows or columns of <paramref name="xData"/> based on the value of <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.DefaultDataOrientation"/>. 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.ScatterPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.ScatterPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> 
            and the first <see cref="T:NationalInstruments.UI.YAxis"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> 
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.XAxis"/> or
            <see cref="T:NationalInstruments.UI.YAxis"/> is created and added to the
            collection.
            </para>
            	<para>
            To plot an array of <see cref="T:System.DateTime"/> values against an array of <see cref="T:System.Double"/> values,
            use the <see cref="T:NationalInstruments.DataConverter"/> to convert a <see cref="T:System.DateTime"/> array
            to a <see cref="T:System.Double"/> array.
            </para>
            </remarks>
            <example>
            The following example demonstrates plotting an array of y values represented as <see cref="T:System.DateTime"/> against 
            an array of x values represented as <see cref="T:System.Double"/>. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> called <format type="monospace">scatterGraph1</format> 
            has been declared and initialized.
            <code lang="VB.NET">
            Dim YValuesAsDateTime as DateTime() = {DateTime.Now}
            Dim YValues as Double() = CType(NationalInstruments.DataConverter.Convert(YValuesAsDateTime, GetType(Double())), Double())
            Dim XValues as Double(,) = {{5}, {6}}
            scatterGraph1.PlotYXMultiple(YValues, XValues)
            </code>
            </example>
            <example>
            	<code lang="C#">
            DateTime[] yValuesAsDateTime = new DateTime[] { DateTime.Now };
            double[] yValues = (double[]) NationalInstruments.DataConverter.Convert(yValuesAsDateTime, typeof(double[]));
            double[,] xValues = new double[,] { {5}, {6} };
            scatterGraph1.PlotYXMultiple(yValues, xValues);
            </code>
            </example>
            <example>
            The following example demonstrates plotting an array of y values against an array of x values
            represented as a 1D double array. The code can be used to plot a single data point across
            multiple plots. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> called <format type="monospace">scatterGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim yValues As Double() = {1, 2, 3, 4, 5}
            Dim xValues As Double() = {2, 4, 6, 8, 10}
            Dim xValuesMatrix As Double(,) = CType(NationalInstruments.DataConverter.Convert(xValues, GetType(Double(,))), Double(,))
            scatterGraph1.DefaultDataOrientation = DataOrientation.DataInColumns
            scatterGraph1.PlotYXMultiple(yValues, xValuesMatrix)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] yValues = new double[5] { 1, 2, 3, 4, 5 };
            double[] xValues = new double[5] { 2, 4, 6, 8, 10 };
            double[,] xValuesMatrix = (double[,]) NationalInstruments.DataConverter.Convert(xValues, typeof(double[,]));
            scatterGraph1.DefaultDataOrientation = DataOrientation.DataInColumns;
            scatterGraph1.PlotYXMultiple(yValues, xValuesMatrix);
            </code>
            </example>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.DefaultDataOrientation"/>
            <seealso cref="M:NationalInstruments.UI.ScatterPlot.PlotXY(System.Double,System.Double)"/>
            <lastupdated>6/29/2006 5:32:55 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotYXMultiple(System.Double[],System.Double[0:,0:],NationalInstruments.UI.DataOrientation)">
            <summary>
            Plots a 2D array of x values with the specified orientation against an array
            of y values.
            </summary>
            <param name="yData">
            The array of y values to plot.
            </param>
            <param name="xData">
            The 2D array of x values to plot.
            </param>
            <param name="orientation">
            A <see cref="T:NationalInstruments.UI.DataOrientation"/> value that specifies the orientation of
            data in <paramref name="xData"/>.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.ScatterPlot.PlotXY(System.Double,System.Double)"/> on 
            <see cref="T:NationalInstruments.UI.ScatterPlot"/> instances in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/> using the index of 
            rows or columns of <paramref name="xData"/> based on the value of <paramref name="orientation"/>. 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.ScatterPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.ScatterPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> 
            and the first <see cref="T:NationalInstruments.UI.YAxis"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> 
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.XAxis"/> or
            <see cref="T:NationalInstruments.UI.YAxis"/> is created and added to the
            collection.
            </para>
            	<para>
            To plot an array of <see cref="T:System.DateTime"/> values against an array of <see cref="T:System.Double"/> values,
            use the <see cref="T:NationalInstruments.DataConverter"/> to convert a <see cref="T:System.DateTime"/> array
            to a <see cref="T:System.Double"/> array.
            </para>
            </remarks>
            <example>
            The following example demonstrates plotting an array of y values represented as <see cref="T:System.DateTime"/> against 
            an array of x values represented as <see cref="T:System.Double"/>. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> called <format type="monospace">scatterGraph1</format> 
            has been declared and initialized.
            <code lang="VB.NET">
            Dim YValuesAsDateTime as DateTime() = {DateTime.Now}
            Dim YValues as Double() = CType(NationalInstruments.DataConverter.Convert(YValuesAsDateTime, GetType(Double())), Double())
            Dim XValues as Double(,) = {{5}, {6}}
            scatterGraph1.PlotYXMultiple(YValues, XValues, DataOrientation.DataInRows)
            </code>
            </example>
            <example>
            	<code lang="C#">
            DateTime[] yValuesAsDateTime = new DateTime[] { DateTime.Now };
            double[] yValues = (double[]) NationalInstruments.DataConverter.Convert(yValuesAsDateTime, typeof(double[]));
            double[,] xValues = new double[,] { {5}, {6} };
            scatterGraph1.PlotYXMultiple(yValues, xValues, DataOrientation.DataInRows);
            </code>
            </example>
            <example>
            The following example demonstrates plotting an array of y values against an array of x values
            represented as a 1D double array. The code can be used to plot a single data point across
            multiple plots. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> called <format type="monospace">scatterGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim yValues As Double() = {1, 2, 3, 4, 5}
            Dim xValues As Double() = {2, 4, 6, 8, 10}
            Dim xValuesMatrix As Double(,) = CType(NationalInstruments.DataConverter.Convert(xValues, GetType(Double(,))), Double(,))
            scatterGraph1.PlotYXMultiple(yValues, xValuesMatrix, DataOrientation.DataInColumns)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] yValues = new double[5] { 1, 2, 3, 4, 5 };
            double[] xValues = new double[5] { 2, 4, 6, 8, 10 };
            double[,] xValuesMatrix = (double[,]) NationalInstruments.DataConverter.Convert(xValues, typeof(double[,]));
            scatterGraph1.PlotYXMultiple(yValues, xValuesMatrix, DataOrientation.DataInColumns);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="xData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="xData"/> and <paramref name="yData"/> arrays have different lengths.
            <para>
            -or-
            </para>
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> and <paramref name="yData"/> contain special values
            at the same index.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<paramref name="orientation"/> is not a valid <see cref="T:NationalInstruments.UI.DataOrientation"/>
            value.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.ScatterPlot.PlotXY(System.Double,System.Double)"/>
            <lastupdated>10/16/2010 4:34:46 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXYAppend(System.Double,System.Double)">
            <summary>
            Plots a single y value against a single x value by appending the x and y value to the
            existing data.
            </summary>
            <param name="xData">
            The x value to append.
            </param>
            <param name="yData">
            The y value to append.
            </param>
            <remarks>
            This method calls <see cref="M:NationalInstruments.UI.ScatterPlot.PlotXYAppend(System.Double,System.Double)"/> on the 
            first <see cref="T:NationalInstruments.UI.ScatterPlot"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/>. 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.ScatterPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.ScatterPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> 
            and the first <see cref="T:NationalInstruments.UI.YAxis"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> 
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.XAxis"/> or
            <see cref="T:NationalInstruments.UI.YAxis"/> is created and added to the
            collection.
            <para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXYAppend(System.Double,System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.ScatterPlot.PlotXYAppend(System.Double,System.Double)"/>
            on the plot reference.
            </para>
            	<para>
            To plot a <see cref="T:System.DateTime"/> value against a <see cref="T:System.Double"/> value,
            use the <see cref="T:NationalInstruments.DataConverter"/> to convert a <see cref="T:System.DateTime"/>
            to a <see cref="T:System.Double"/>.
            </para>
            </remarks>
            <example>
            The following example demonstrates plotting an x value represented as a <see cref="T:System.DateTime"/> against a y value
            represented as a <see cref="T:System.Double"/>. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> called <format type="monospace">scatterGraph1</format> has been
            declared and initialized.
            <code lang="VB.NET">
            Dim XValueAsDateTime as DateTime = DateTime.Now
            Dim XValue as Double = CDbl(NationalInstruments.DataConverter.Convert(XValueAsDateTime, GetType(Double)))
            Dim YValue as Double = 5
            scatterGraph1.PlotXYAppend(XValue, YValue)
            </code>
            </example>
            <example>
            	<code lang="C#">
            DateTime xValueAsDateTime = DateTime.Now;
            double xValue = (double) NationalInstruments.DataConverter.Convert(xValueAsDateTime, typeof(double));
            double yValue = 5;
            scatterGraph1.PlotXYAppend(xValue, yValue);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> and <paramref name="yData"/> are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.ScatterPlot.PlotXYAppend(System.Double,System.Double)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXYAppendMultiple(System.Double[],System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:27:46 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXYAppend(System.Double[],System.Double[])">
            <summary>
            Plots an array of y values against an array of x values by appending the x and y values to 
            the existing data.
            </summary>
            <param name="xData">
            The x values to append.
            </param>
            <param name="yData">
            The y values to append.
            </param>
            <remarks>
            This method calls
            <see cref="M:NationalInstruments.UI.ScatterPlot.PlotXYAppend(System.Double,System.Double)"/> on the 
            first <see cref="T:NationalInstruments.UI.ScatterPlot"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/>. 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.ScatterPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.ScatterPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> 
            and the first <see cref="T:NationalInstruments.UI.YAxis"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> 
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.XAxis"/> or
            <see cref="T:NationalInstruments.UI.YAxis"/> is created and added to the
            collection.
            <para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXYAppend(System.Double,System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.ScatterPlot.PlotXYAppend(System.Double,System.Double)"/>
            on the plot reference.
            </para>
            	<para>
            To plot an array of <see cref="T:System.DateTime"/> values against an array of <see cref="T:System.Double"/> values,
            use the <see cref="T:NationalInstruments.DataConverter"/> to convert a <see cref="T:System.DateTime"/> array
            to a <see cref="T:System.Double"/> array.
            </para>
            </remarks>
            <example>
            The following example demonstrates plotting an array of x values represented as <see cref="T:System.DateTime"/> against 
            an array of y values represented as <see cref="T:System.Double"/>. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> called <format type="monospace">scatterGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim XValuesAsDateTime as DateTime() = {DateTime.Now}
            Dim XValues as Double() = CType(NationalInstruments.DataConverter.Convert(XValuesAsDateTime, GetType(Double())), Double())
            Dim YValues as Double() = {5}
            scatterGraph1.PlotXYAppend(XValues, YValues)
            </code>
            </example>
            <example>
            	<code lang="C#">
            DateTime[] xValuesAsDateTime = new DateTime[] { DateTime.Now };
            double[] xValues = (double[]) NationalInstruments.DataConverter.Convert(xValuesAsDateTime, typeof(double[]));
            double[] yValues = new double[] { 5 };
            scatterGraph1.PlotXYAppend(xValues, yValues);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="xData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="xData"/> and <paramref name="yData"/> arrays have different lengths.
            <para>
            -or-
            </para>
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> and <paramref name="yData"/> contain special values
            at the same index.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.ScatterPlot.PlotXYAppend(System.Double,System.Double)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXYAppendMultiple(System.Double[],System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:27:53 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXYAppend(System.Double[],System.Double[],System.Int32,System.Int32)">
            <summary>
            Plots a subset of an array of y values against an array of x values by appending the x and y values to 
            the existing data.
            </summary>
            <param name="xData">
            The x values to append.
            </param>
            <param name="yData">
            The y values to append.
            </param>
            <param name="startIndex">
            The index in <paramref name="xData"/> and <paramref name="yData"/> at which the plot data begins.
            </param>
            <param name="length">
            The number of elements, beginning at <paramref name="startIndex"/> in <paramref name="xData"/>
            and <paramref name="yData"/>, to plot.
            </param>
            <remarks>
            This method calls
            <see cref="M:NationalInstruments.UI.ScatterPlot.PlotXYAppend(System.Double,System.Double)"/> on the 
            first <see cref="T:NationalInstruments.UI.ScatterPlot"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/>. 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.ScatterPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.ScatterPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> 
            and the first <see cref="T:NationalInstruments.UI.YAxis"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> 
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.XAxis"/> or
            <see cref="T:NationalInstruments.UI.YAxis"/> is created and added to the
            collection.
            <para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXYAppend(System.Double,System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.ScatterPlot.PlotXYAppend(System.Double,System.Double)"/>
            on the plot reference.
            </para>
            	<para>
            To plot an array of <see cref="T:System.DateTime"/> values against an array of <see cref="T:System.Double"/> values,
            use the <see cref="T:NationalInstruments.DataConverter"/> to convert a <see cref="T:System.DateTime"/> array
            to a <see cref="T:System.Double"/> array.
            </para>
            </remarks>
            <example>
            The following example demonstrates plotting an array of x values represented as <see cref="T:System.DateTime"/> against 
            an array of y values represented as <see cref="T:System.Double"/>. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> called <format type="monospace">scatterGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim XValuesAsDateTime as DateTime() = {DateTime.Now}
            Dim XValues as Double() = CType(NationalInstruments.DataConverter.Convert(XValuesAsDateTime, GetType(Double())), Double())
            Dim YValues as Double() = {5}
            scatterGraph1.PlotXYAppend(XValues, YValues, 0, XValues.Length)
            </code>
            </example>
            <example>
            	<code lang="C#">
            DateTime[] xValuesAsDateTime = new DateTime[] { DateTime.Now };
            double[] xValues = (double[]) NationalInstruments.DataConverter.Convert(xValuesAsDateTime, typeof(double[]));
            double[] yValues = new double[] { 5 };
            scatterGraph1.PlotXYAppend(xValues, yValues, 0, xValues.Length);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="xData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="startIndex"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="startIndex"/> is greater than or equal to the
            number of elements in <paramref name="xData"/> or <paramref name="yData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is greater than the number of elements
            from <paramref name="startIndex"/> to the end of <paramref name="xData"/> or <paramref name="yData"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="xData"/> and <paramref name="yData"/> arrays have different lengths.
            <para>
            -or-
            </para>
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> and <paramref name="yData"/> contain special values
            at the same index.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.ScatterPlot.PlotXYAppend(System.Double,System.Double)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXYAppendMultiple(System.Double[],System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:28:01 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXY(System.Double,System.Double)">
            <summary>
            Plots a single y value against a single x value.
            </summary>
            <param name="xData">
            The x value to plot.
            </param>
            <param name="yData">
            The y value to plot.
            </param>
            <remarks>
            This method calls 
            <see cref="M:NationalInstruments.UI.ScatterPlot.PlotXY(System.Double,System.Double)"/> on the 
            first <see cref="T:NationalInstruments.UI.ScatterPlot"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/>. 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.ScatterPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.ScatterPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> 
            and the first <see cref="T:NationalInstruments.UI.YAxis"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> 
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.XAxis"/> or
            <see cref="T:NationalInstruments.UI.YAxis"/> is created and added to the
            collection.
            <para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXY(System.Double,System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.ScatterPlot.PlotXY(System.Double,System.Double)"/>
            on the plot reference.
            </para>
            	<para>
            To plot a <see cref="T:System.DateTime"/> value against a <see cref="T:System.Double"/> value,
            use the <see cref="T:NationalInstruments.DataConverter"/> to convert a <see cref="T:System.DateTime"/>
            to a <see cref="T:System.Double"/>.
            </para>
            </remarks>
            <example>
            The following example demonstrates plotting an x value represented as a <see cref="T:System.DateTime"/>
            against a y value
            represented as a <see cref="T:System.Double"/>. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> called <format type="monospace">scatterGraph1</format> has been
            declared and initialized.
            <code lang="VB.NET">
            Dim XValueAsDateTime as DateTime = DateTime.Now
            Dim XValue as Double = CDbl(NationalInstruments.DataConverter.Convert(XValueAsDateTime, GetType(Double)))
            Dim YValue as Double = 5
            scatterGraph1.PlotXY(XValue, YValue)
            </code>
            </example>
            <example>
            	<code lang="C#">
            DateTime xValueAsDateTime = DateTime.Now;
            double xValue = (double) NationalInstruments.DataConverter.Convert(xValueAsDateTime, typeof(double));
            double yValue = 5;
            scatterGraph1.PlotXY(xValue, yValue);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> and <paramref name="yData"/> are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.ScatterPlot.PlotXY(System.Double,System.Double)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXYMultiple(System.Double[],System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:27:21 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXY(System.Double[],System.Double[])">
            <summary>
            Plots an array of y values against an array of x values.
            </summary>
            <param name="xData">
            The array of x values to plot.
            </param>
            <param name="yData">
            The array of y values to plot.
            </param>
            <remarks>
            This method calls
            <see cref="M:NationalInstruments.UI.ScatterPlot.PlotXY(System.Double,System.Double)"/> on the 
            first <see cref="T:NationalInstruments.UI.ScatterPlot"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/>. 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.ScatterPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.ScatterPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> 
            and the first <see cref="T:NationalInstruments.UI.YAxis"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> 
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.XAxis"/> or
            <see cref="T:NationalInstruments.UI.YAxis"/> is created and added to the
            collection.
            <para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXY(System.Double,System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.ScatterPlot.PlotXY(System.Double,System.Double)"/>
            on the plot reference.
            </para>
            	<para>
            To plot an array of <see cref="T:System.DateTime"/> values against an array of <see cref="T:System.Double"/> values,
            use the <see cref="T:NationalInstruments.DataConverter"/> to convert a <see cref="T:System.DateTime"/> array
            to a <see cref="T:System.Double"/> array.
            </para>
            </remarks>
            <example>
            The following example demonstrates plotting an array of x values represented as <see cref="T:System.DateTime"/> against 
            an array of y values represented as <see cref="T:System.Double"/>. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> called <format type="monospace">scatterGraph1</format> 
            has been declared and initialized.
            <code lang="VB.NET">
            Dim XValuesAsDateTime as DateTime() = {DateTime.Now}
            Dim XValues as Double() = CType(NationalInstruments.DataConverter.Convert(XValuesAsDateTime, GetType(Double())), Double())
            Dim YValues as Double() = {5}
            scatterGraph1.PlotXY(XValues, YValues)
            </code>
            </example>
            <example>
            	<code lang="C#">
            DateTime[] xValuesAsDateTime = new DateTime[] { DateTime.Now };
            double[] xValues = (double[]) NationalInstruments.DataConverter.Convert(xValuesAsDateTime, typeof(double[]));
            double[] yValues = new double[] { 5 };
            scatterGraph1.PlotXY(xValues, yValues);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="xData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="xData"/> and <paramref name="yData"/> arrays have different lengths.
            <para>
            -or-
            </para>
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> and <paramref name="yData"/> contain special values
            at the same index.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.ScatterPlot.PlotXY(System.Double,System.Double)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXYMultiple(System.Double[],System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:27:28 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXY(System.Double[],System.Double[],System.Int32,System.Int32)">
            <summary>
            Plots a subset of an array of y values against an array of x values.
            </summary>
            <param name="xData">
            The array of x values to plot.
            </param>
            <param name="yData">
            The array of y values to plot.
            </param>
            <param name="startIndex">
            The index in <paramref name="xData"/> and <paramref name="yData"/> at which the plot data begins.
            </param>
            <param name="length">
            The number of elements, beginning at <paramref name="startIndex"/> in <paramref name="xData"/>
            and <paramref name="yData"/>, to plot.
            </param>
            <remarks>
            This method calls
            <see cref="M:NationalInstruments.UI.ScatterPlot.PlotXY(System.Double,System.Double)"/> on the 
            first <see cref="T:NationalInstruments.UI.ScatterPlot"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/>. 
            If there are not enough plots available in 
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/>, additional 
            <see cref="T:NationalInstruments.UI.ScatterPlot"/> instances are created and added to the 
            collection as required. The implicitly created <see cref="T:NationalInstruments.UI.ScatterPlot"/> 
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> 
            and the first <see cref="T:NationalInstruments.UI.YAxis"/> in 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> 
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/> are empty, an additional 
            <see cref="T:NationalInstruments.UI.XAxis"/> or
            <see cref="T:NationalInstruments.UI.YAxis"/> is created and added to the
            collection.
            <para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXY(System.Double,System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.ScatterPlot.PlotXY(System.Double,System.Double)"/>
            on the plot reference.
            </para>
            	<para>
            To plot an array of <see cref="T:System.DateTime"/> values against an array of <see cref="T:System.Double"/> values,
            use the <see cref="T:NationalInstruments.DataConverter"/> to convert a <see cref="T:System.DateTime"/> array
            to a <see cref="T:System.Double"/> array.
            </para>
            </remarks>
            <example>
            The following example demonstrates plotting an array of x values represented as <see cref="T:System.DateTime"/> against 
            an array of y values represented as <see cref="T:System.Double"/>. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.ScatterGraph"/> called <format type="monospace">scatterGraph1</format> 
            has been declared and initialized.
            <code lang="VB.NET">
            Dim XValuesAsDateTime as DateTime() = {DateTime.Now}
            Dim XValues as Double() = CType(NationalInstruments.DataConverter.Convert(XValuesAsDateTime, GetType(Double())), Double())
            Dim YValues as Double() = {5}
            scatterGraph1.PlotXY(XValues, YValues, 0, XValues.Length)
            </code>
            </example>
            <example>
            	<code lang="C#">
            DateTime[] xValuesAsDateTime = new DateTime[] { DateTime.Now };
            double[] xValues = (double[]) NationalInstruments.DataConverter.Convert(xValuesAsDateTime, typeof(double[]));
            double[] yValues = new double[] { 5 };
            scatterGraph1.PlotXY(xValues, yValues, 0 , xValues.Length);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="xData"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="yData"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="startIndex"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="startIndex"/> is greater than or equal to the
            number of elements in <paramref name="xData"/> or <paramref name="yData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is greater than the number of elements
            from <paramref name="startIndex"/> to the end of <paramref name="xData"/> or <paramref name="yData"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="xData"/> and <paramref name="yData"/> arrays have different lengths.
            <para>
            -or-
            </para>
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> and <paramref name="yData"/> contain special values
            at the same index.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.ScatterPlot.PlotXY(System.Double,System.Double)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotXYMultiple(System.Double[],System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:27:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ScatterGraph.OnDefaultDataOrientationChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ScatterGraph.DefaultDataOrientationChanged"/> 
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ScatterGraph.DefaultDataOrientationChanged"/>
            <lastupdated>7/13/2004 5:28:37 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotLineColorGeneratorChanged">
            <summary>
            Occurs when the <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotLineColorGenerator" crefType="Unqualified"/> property  is changed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <lastupdated>6/11/2009 6:14:43 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ScatterGraph.UseColorGeneratorChanged">
            <summary>
            Occurs when the <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.UseColorGenerator"/> property  is changed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <lastupdated>6/11/2009 6:14:48 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ScatterGraph.DefaultDataOrientationChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.DefaultDataOrientation"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.DefaultDataOrientation"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ScatterGraph.OnDefaultDataOrientationChanged(System.EventArgs)"/>
            <lastupdated>6/26/2003 12:36:13 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.Slide">
            <summary>
            Represents a Measurement Studio Windows Forms slide control to display numeric
            values.
            </summary>
            <threadsafety safety="control"/>
            <remarks>
            	Typically, you use <see cref="T:NationalInstruments.UI.WindowsForms.Slide"/> as an input control.
            As a result, the default value of <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.InteractionMode"/>
            is a bitwise combination of <see cref="F:NationalInstruments.UI.LinearNumericPointerInteractionModes.DragPointer"/>
            and <see cref="F:NationalInstruments.UI.LinearNumericPointerInteractionModes.SnapPointer"/>. 
            You can use <see cref="P:NationalInstruments.UI.WindowsForms.Slide.SlideStyle"/> to change the appearance
            of the <see cref="T:NationalInstruments.UI.WindowsForms.Slide"/>.
            <para>
            The default value of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.PointerColor"/> has been
            changed to give the control a more slide-like appearance. The default value of 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.PointerColor"/> is 
            <see cref="P:System.Drawing.SystemColors.Window"/>.
            	</para>
            	<note type="note">
            For more information about the slide control, refer to <see keyword="UsingNINETNumericPointerControlsWinForms" keywordType="mstudio">Using the Measurement Studio Windows Forms Numeric Pointer .NET Controls</see>.
            </note>
            </remarks>
            <lastupdated>9/28/2011 12:18:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Slide.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.Slide"/> class.
            </summary>
            <lastupdated>4/28/2004 5:03:07 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Slide.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.Slide"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.Slide"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            </remarks>
            <lastupdated>4/28/2004 5:02:51 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Slide.DefaultSize">
            <summary>
            Gets the default size of the control.
            </summary>
            <value>
            The default value is a <see cref="T:System.Drawing.Size"/> with a width of 54 and a height of 152.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.DefaultSize"/>.
            </remarks>
            <seealso cref="P:System.Windows.Forms.Control.DefaultSize"/>
            <seealso cref="T:System.Windows.Forms.Control"/>
            <lastupdated>4/28/2004 5:02:33 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Slide.SlideStyle">
            <summary>
            Gets or sets the style that determines the appearance of the slide.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.SlideStyle"/> that determines the appearance of
            the slide. The default value is <see cref="P:NationalInstruments.UI.SlideStyle.RaisedWithRoundedGrip3D"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <lastupdated>9/28/2011 12:26:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Slide.OnSlideStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Slide.SlideStyleChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Slide.SlideStyleChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Slide.SlideStyle"/>
            <lastupdated>7/13/2004 5:29:28 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Slide.SlideStyleChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Slide.SlideStyle"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Slide.SlideStyle"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Slide.OnSlideStyleChanged(System.EventArgs)"/>
            <lastupdated>4/28/2004 5:03:16 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.Switch">
            <summary>
            Represents a Measurement Studio Windows Forms switch control to display and input Boolean states.
            </summary>
            <threadsafety safety="control"/>
            <remarks>
            	<para>
            		Typically, you use a switch to input Boolean data. As a result, the default value of 
            <see cref="P:NationalInstruments.UI.WindowsForms.Boolean.InteractionMode"/> for <see cref="T:NationalInstruments.UI.WindowsForms.Switch"/>
            is <see cref="F:NationalInstruments.UI.BooleanInteractionMode.SwitchWhenPressed"/>. You can use 
            <see cref="P:NationalInstruments.UI.WindowsForms.Switch.SwitchStyle"/> to change the appearance of the
            <see cref="T:NationalInstruments.UI.WindowsForms.Switch"/>.
            	</para>
            	<note type="note">
            For more information about the switch control, refer to <see keyword="UsingNINETSwitchLEDWinForms" keywordType="mstudio">Using the Measurement Studio Windows Forms Switch and LED .NET Controls</see> or <see keyword="KeyNETSwitchLEDFeaturesWinForms" keywordType="mstudio">Key Measurement Studio Windows Forms Switch and LED .NET Control Features</see>.
            </note>
            </remarks>
            <lastupdated>9/17/2008 3:18:21 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Switch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.Switch"/> class.
            </summary>
            <lastupdated>7/1/2003 12:10:33 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Switch.DefaultSize">
            <summary>
            Gets the default size of the control.
            </summary>
            <value>The default value is a <see cref="T:System.Drawing.Size"/> with a width of 32 and height of 64.</value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.DefaultSize"/>.
            </remarks>
            <lastupdated>7/1/2003 3:46:16 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Switch.SwitchStyle">
            <summary>
            Gets or sets the style of the switch.
            </summary>
            <value>
            The style of the switch. The default value is <see cref="P:NationalInstruments.UI.SwitchStyle.VerticalToggle"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The specified value is <see langword="null"/>.
            </exception>
            <remarks>
            You can set this property to any instance of <see cref="T:NationalInstruments.UI.SwitchStyle"/>, including
            the <see cref="T:NationalInstruments.UI.SwitchStyle"/> properties and any custom class that
            implements the <see cref="T:NationalInstruments.UI.SwitchStyle"/> base class.
            </remarks>
            <seealso cref="T:NationalInstruments.UI.SwitchStyle"/>
            <lastupdated>9/28/2011 1:41:57 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Switch.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by <see cref="T:NationalInstruments.UI.WindowsForms.Switch"/>.
            </summary>
            <param name="disposing">
            If <see langword="true"/>, this method releases managed and unmanaged resources. If <see langword="false"/>, this method releases
            only unmanaged resources.
            </param>
            <remarks>
            	<para>
            The public <see cref="M:System.IDisposable.Dispose"/> method and the finalizer call this method.The public <see cref="M:System.IDisposable.Dispose"/>
            invokes the protected Dispose(Boolean) method with <paramref name="disposing"/>
            set to <see langword="true"/>. The finalizer invokes the protected Dispose(Boolean) method with <paramref name="disposing"/> set to <see langword="false"/>.
            </para>
            	<para>
            When you set the <paramref name="disposing"/> parameter to <see langword="true"/>, this method releases all
            resources held by managed objects that this <see cref="T:NationalInstruments.UI.WindowsForms.Switch"/>
            references. This method invokes the <see cref="M:System.IDisposable.Dispose"/> method of each referenced object.
            </para>
            </remarks>
            <lastupdated>7/1/2003 12:07:31 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Switch.OnSwitchStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Switch.SwitchStyleChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Switch.SwitchStyleChanged"/>
            <lastupdated>7/13/2004 5:29:58 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Switch.OnCursorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.CursorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:System.Windows.Forms.Control.CursorChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ControlBase.Cursor"/>
            <lastupdated>3/15/2006 1:31:36 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Switch.SwitchStyleChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Switch.SwitchStyle"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Switch.SwitchStyle"/>
            <lastupdated>6/26/2003 12:36:38 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Switch.Clone">
            <summary>
            Creates a new object that is a copy of this instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <remarks>
            	<see cref="M:NationalInstruments.UI.WindowsForms.Switch.Clone"/> creates a new object that is a deep copy
            of <see cref="T:NationalInstruments.UI.WindowsForms.Switch"/>.
            <para>
            A shallow copy creates a new instance of the same type as the original object, and then copies the nonstatic fields of the 
            original object. If the field is a value type, a bit-by-bit copy of the field is performed. If the field is a reference type, the 
            reference is copied but the referred object is not; therefore, the reference in the original object and the reference in the 
            clone point to the same object. In contrast, a deep copy of an object duplicates everything directly or indirectly referenced by 
            the fields in the object.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:System.ICloneable"/>
            <lastupdated>3/15/2006 1:31:29 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Switch.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Switch.PropertyChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Switch.PropertyChanged"/>
            <lastupdated>3/15/2006 1:31:42 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Switch.PropertyChanged">
            <summary>
            Occurs when a property on the control changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>3/15/2006 1:31:53 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Switch.EnableBasePropertyChangedEvents">
            <summary>
            Enables <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event 
            from being raised when the properties defined in the <see cref="T:System.Windows.Forms.Control"/> base class
            are changed.
            </summary>
            <remarks>
            	<para>
            You must call <see cref="M:NationalInstruments.UI.WindowsForms.Switch.DisableBasePropertyChangedEvents"/>
            after you have finished using the <see cref="T:NationalInstruments.UI.WindowsForms.Switch"/> to reclaim memory and perform cleanup.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            <lastupdated>9/11/2007 10:21:56 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Switch.DisableBasePropertyChangedEvents">
            <summary>
            Disables <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event 
            from being raised when the properties defined in the <see cref="T:System.Windows.Forms.Control"/> base class
            are changed.
            </summary>
            <remarks>
            	<para>
            If you have called <see cref="M:NationalInstruments.UI.WindowsForms.Switch.EnableBasePropertyChangedEvents"/>, then
            you must call <see cref="M:NationalInstruments.UI.WindowsForms.Switch.DisableBasePropertyChangedEvents"/>
            after you have finished using the <see cref="T:NationalInstruments.UI.WindowsForms.Switch"/> to reclaim memory and perform cleanup.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            <lastupdated>9/11/2007 10:21:40 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.SwitchArray">
            <summary>
            Represents the array of Measurement Studio Windows Forms <see cref="T:NationalInstruments.UI.WindowsForms.Switch"/>
            controls.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.SetValues(System.Boolean[])"/> provides
            the ability to set the data values displayed by the items of the array. Setting the data
            values raises the <see cref="E:NationalInstruments.UI.WindowsForms.BooleanArray`1.ValuesChanged"/>
            event. You can obtain the data values of the control by calling 
            <see cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.GetValues"/>.
            </para>
            	<para>
            You can configure the scaling behavior of the array by specifying a fixed number of items
            in the array or by allowing the array to automatically adjust the number of items in the
            array based on the number of specified data values using <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.ScaleMode"/>.
            Use <see cref="P:NationalInstruments.UI.WindowsForms.ControlArray`1.Count"/> to obtain the 
            number of items in the array.
            </para>
            </remarks>
            <lastupdated>8/23/2006 10:25:38 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.SwitchArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.SwitchArray"/> class.
            </summary>
            <lastupdated>3/15/2006 1:33:02 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.SwitchArray.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.SwitchArray"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.SwitchArray"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            	<note type="note">
            If you create 2D arrays of controls, then you must call <see cref="M:System.IDisposable.Dispose"/> on the control 
            array after you have finished using it to reclaim memory and perform cleanup.
            </note>
            </remarks>
            <seealso cref="M:System.IDisposable.Dispose"/>
            <seealso cref="T:System.IDisposable"/>
            <lastupdated>9/11/2007 11:22:07 AM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.SwitchArray.Clone">
            <summary>
            Creates a new object that is a copy of this instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <remarks>
            Overrides <see cref="M:NationalInstruments.UI.WindowsForms.BooleanArray`1.Clone"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:System.ICloneable"/>
            <lastupdated>3/15/2006 1:33:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.Tank">
            <summary>
            Represents a Measurement Studio Windows Forms tank control to display numeric
            values.
            </summary>
            <threadsafety safety="control"/>
            <remarks>
            	Typically, you use <see cref="T:NationalInstruments.UI.WindowsForms.Tank"/> as an indicator.
            You can use <see cref="P:NationalInstruments.UI.WindowsForms.Tank.TankStyle"/> to change the appearance
            of the <see cref="T:NationalInstruments.UI.WindowsForms.Tank"/>. 
            <note type="note">
            For more information about the tank control, refer to <see keyword="UsingNINETNumericPointerControlsWinForms" keywordType="mstudio">Using the Measurement Studio Windows Forms Numeric Pointer .NET Controls</see>.
            </note>
            </remarks>
            <lastupdated>9/28/2011 12:18:38 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Tank.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.Tank"/> class.
            </summary>
            <lastupdated>4/28/2004 4:00:12 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Tank.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.Tank"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.Tank"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            </remarks>
            <lastupdated>4/28/2004 3:59:57 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Tank.DefaultSize">
            <summary>
            Gets the default size of the control.
            </summary>
            <value>
            The default value is a <see cref="T:System.Drawing.Size"/> with a width of 110 and a height of 152.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.DefaultSize"/>.
            </remarks>
            <seealso cref="P:System.Windows.Forms.Control.DefaultSize"/>
            <seealso cref="T:System.Windows.Forms.Control"/>
            <lastupdated>4/28/2004 3:59:44 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Tank.TankStyle">
            <summary>
            Gets or sets the style that determines the appearance of the tank.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.TankStyle"/> that determines the appearance of
            the tank. The default value is <see cref="P:NationalInstruments.UI.TankStyle.Raised"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <lastupdated>4/28/2004 3:59:53 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Tank.OnTankStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Tank.TankStyleChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Tank.TankStyleChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Tank.TankStyle"/>
            <lastupdated>7/13/2004 6:26:12 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Tank.TankStyleChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Tank.TankStyle"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Tank.TankStyle"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Tank.OnTankStyleChanged(System.EventArgs)"/>
            <lastupdated>4/28/2004 4:00:24 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.Thermometer">
            <summary>
            Represents a Measurement Studio Windows Forms thermometer control to display numeric
            values.
            </summary>
            <threadsafety safety="control"/>
            <remarks>
            	Typically, you use <see cref="T:NationalInstruments.UI.WindowsForms.Thermometer"/> as an indicator.
            You can use <see cref="P:NationalInstruments.UI.WindowsForms.Thermometer.ThermometerStyle"/> to change the appearance
            of the <see cref="T:NationalInstruments.UI.WindowsForms.Thermometer"/>. You can use <see cref="P:NationalInstruments.UI.WindowsForms.Thermometer.MaximumBulbDiameter"/> to change the bulb size of the <see cref="P:NationalInstruments.UI.ThermometerStyle.Flat"/> 
            or <see cref="P:NationalInstruments.UI.ThermometerStyle.Raised"/> thermometer styles.
            <para>
            The default values of <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Range"/>,
            <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillBackColor"/>, and
            <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillColor"/> have been changed to give the control a more thermometer-like appearance. The default value of 
            <see cref="P:NationalInstruments.UI.WindowsForms.NumericPointer.Range"/> is a range with a
            minimum value of 0 and a maximum value of 100. The default of 
            <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillBackColor"/>
            is <see cref="P:System.Drawing.Color.Silver"/>. The default value of
            <see cref="P:NationalInstruments.UI.WindowsForms.LinearNumericPointer.FillColor"/>
            is <see cref="P:System.Drawing.Color.Red"/>.
            	</para>
            	<note type="note">
            For more information about the thermometer control, refer to <see keyword="UsingNINETNumericPointerControlsWinForms" keywordType="mstudio">Using the Measurement Studio Windows Forms Numeric Pointer .NET Controls</see>.
            </note>
            </remarks>
            <lastupdated>9/28/2011 12:18:50 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Thermometer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.Thermometer"/> class.
            </summary>
            <lastupdated>4/28/2004 4:20:14 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Thermometer.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.Thermometer"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.Thermometer"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            </remarks>
            <lastupdated>4/28/2004 4:20:04 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Thermometer.DefaultSize">
            <summary>
            Gets the default size of the control.
            </summary>
            <value>
            The default value is a <see cref="T:System.Drawing.Size"/> with a width of 72 and a height of 184.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="P:NationalInstruments.UI.WindowsForms.ControlBase.DefaultSize"/>.
            </remarks>
            <seealso cref="P:System.Windows.Forms.Control.DefaultSize"/>
            <seealso cref="T:System.Windows.Forms.Control"/>
            <lastupdated>4/28/2004 4:19:56 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Thermometer.ThermometerStyle">
            <summary>
            Gets or sets the style that determines the appearance of the thermometer.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.ThermometerStyle"/> that determines the appearance of
            the thermometer. The default value is <see cref="P:NationalInstruments.UI.ThermometerStyle.Raised"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <lastupdated>4/28/2004 4:20:01 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.Thermometer.MaximumBulbDiameter">
            <summary>
            Gets or sets the maximum bulb diameter.
            </summary>
            <value>
            The maximum bulb diameter. The default value is 25.
            </value>
            <remarks>
            	<see cref="P:NationalInstruments.UI.WindowsForms.Thermometer.MaximumBulbDiameter"/> applies to thermometer styles
            that have a bulb. <see cref="P:NationalInstruments.UI.ThermometerStyle.Flat"/> and <see cref="P:NationalInstruments.UI.ThermometerStyle.Raised"/> both have a bulb. When resizing the control, the <see cref="P:NationalInstruments.UI.WindowsForms.Thermometer.MaximumBulbDiameter"/> property keeps the
            thermometer width constant, no matter the width of the control. This helps maintain the control's thermometer-like appearance.    
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            The specified value is less than or equal to zero.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The specified value is <see cref="F:System.Single.NaN"/>, <see cref="F:System.Single.NegativeInfinity"/>,
            or <see cref="F:System.Single.PositiveInfinity"/>.
            </para>
            </exception>
            <lastupdated>5/20/2004 11:54:27 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Thermometer.OnMaximumBulbDiameterChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Thermometer.MaximumBulbDiameterChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Thermometer.MaximumBulbDiameterChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Thermometer.MaximumBulbDiameter"/>
            <lastupdated>7/13/2004 5:30:57 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Thermometer.MaximumBulbDiameterChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Thermometer.MaximumBulbDiameter"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Thermometer.MaximumBulbDiameter"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Thermometer.OnMaximumBulbDiameterChanged(System.EventArgs)"/>
            <lastupdated>4/28/2004 4:20:18 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.Thermometer.OnThermometerStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.Thermometer.ThermometerStyleChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Thermometer.ThermometerStyleChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Thermometer.ThermometerStyle"/>
            <lastupdated>7/13/2004 5:31:07 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.Thermometer.ThermometerStyleChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.Thermometer.ThermometerStyle"/> 
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Thermometer.ThermometerStyle"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Thermometer.OnThermometerStyleChanged(System.EventArgs)"/>
            <lastupdated>4/28/2004 4:20:21 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor">
            <summary>
            Represents a <see cref="T:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor"/> displayed within a 
            <see cref="T:System.Windows.Forms.ToolStrip"/>.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            	Use the <see cref="T:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor"/> control to edit property values at 
            run time using their associated editors inside a <see cref="T:System.Windows.Forms.ToolStrip"/>. The editor displayed by the <see cref="T:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor"/> control 
            is the same editor that is displayed when you edit the property at design time.
            <para>
            		<see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.Source"/> represents the property to edit.
            To edit a property of an object, you must set the source property with an object reference and property name on that object. 
            Use <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValue"/> to specify the value of the property
            being edited. Call <see cref="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.EditValue"/> to 
            launch the associated editor programmatically. If the <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValue"/>
            cannot be converted to a valid string representation, the <see cref="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValueWarning"/>
            event is raised. Use the <see cref="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValueWarning"/> event
            to set the <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValue"/> to a valid value.
            	</para>
            </remarks>
            <lastupdated>10/5/2006 4:55:56 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor"/> class.
            </summary>
            <lastupdated>10/5/2006 5:02:56 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor"/> class
            with the specified object and the property name representing the property to edit at run time.
            </summary>
            <param name="obj">
            The object whose property is edited at run time.
            </param>
            <param name="propertyName">
            The name of the property whose value is edited at run time.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="obj"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="propertyName"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="propertyName"/> is <see cref="F:System.String.Empty"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="obj"/> does not contain a property with the name
            specified in <paramref name="propertyName"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="propertyName"/> is only a design time property.
            </para>
            </exception>
            <seealso cref="T:NationalInstruments.UI.PropertyEditorSource"/>
            <lastupdated>10/5/2006 5:03:17 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.Site">
            <summary>
            Gets or sets the site of the hosted control.
            </summary>
            <value>
            The site of the hosted control.
            </value>
            <remarks>
            Overrides <see cref="P:System.Windows.Forms.ToolStripControlHost.Site"/>.
            </remarks>
            <seealso cref="P:System.Windows.Forms.ToolStripControlHost.Site"/>
            <lastupdated>10/5/2006 4:59:20 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            </remarks>
            <seealso cref="M:System.IDisposable.Dispose"/>
            <seealso cref="T:System.IDisposable"/>
            <lastupdated>10/5/2006 5:00:33 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.PropertyEditor">
            <summary>
            Gets the <see cref="T:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor"/> that the
            <see cref="T:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor"/> is hosting.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor"/> that the
            <see cref="T:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor"/> is hosting.
            </value>
            <lastupdated>10/5/2006 4:58:27 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.RenderMode">
            <summary>
            Gets or sets the style used to draw the <see cref="T:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor"/>.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.PropertyEditorRenderMode"/> value that represents
            the style used to draw the control. The default value is 
            <see cref="F:NationalInstruments.UI.PropertyEditorRenderMode.Standard"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is a <see cref="T:NationalInstruments.UI.PropertyEditorRenderMode"/> value.
            </exception>
            <remarks>
            	The <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.BorderStyle"/>
            must be set to <see cref="F:System.Windows.Forms.BorderStyle.Fixed3D"/> for the 
            <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.RenderMode"/> to be applied
            to the control. If the <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.BorderStyle"/>
            is set to any other value, the <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.RenderMode"/>
            will not have any effect on the appearance of the control.
            <para>
            If the <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.RenderMode"/> is
            <see cref="F:NationalInstruments.UI.PropertyEditorRenderMode.Inherit"/>, then the render
            mode of the parent is used to style the <see cref="T:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor"/>
            control.
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.BorderStyle"/>
            <lastupdated>10/5/2006 4:59:10 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.BorderStyle">
            <summary>
            Gets or sets the style used to draw the border of the control.
            </summary>
            <value>
            A <see cref="T:System.Windows.Forms.BorderStyle"/> used to draw the border
            of the control. The default value is <see cref="F:System.Windows.Forms.BorderStyle.Fixed3D"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:System.Windows.Forms.BorderStyle"/> value.
            </exception>
            	<seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.RenderMode"/>
            <lastupdated>9/17/2008 4:11:46 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.PropertyTextAlign">
            <summary>
            Gets or sets whether the text aligns in the center of the control, on the left of the control, or on the right of the control.</summary>
            <value>
            A <see cref="T:System.Windows.Forms.HorizontalAlignment"/> that specifies the
            text alignment of the control. The default value is <see cref="F:System.Windows.Forms.HorizontalAlignment.Left"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:System.Windows.Forms.HorizontalAlignment"/> value.
            </exception>
            <remarks>
            	<para>
            		Use <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.PropertyTextAlign"/> to align the text within
            the control to match the layout of the text on your form.
            	</para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValue"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.FormattedSourceValue"/>
            <lastupdated>10/5/2006 4:58:44 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.InteractionMode">
            <summary>
            Gets or sets the interactions supported by the control.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.PropertyEditorInteractionMode"/> that indicates
            the user interactions that are supported by the control. The default value is
            <see cref="F:NationalInstruments.UI.PropertyEditorInteractionMode.EditValue"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:NationalInstruments.UI.PropertyEditorInteractionMode"/> value.
            </exception>
            <remarks>
            Set <see cref="P:System.Windows.Forms.Control.Enabled"/> to <see langword="true"/> to enable 
            interaction. If <see cref="P:System.Windows.Forms.Control.Enabled"/> is <see langword="false"/>,
            the <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.InteractionMode"/> property has no
            effect regardless of its value.
            </remarks>
            <lastupdated>10/5/2006 4:58:07 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.DisplayMode">
            <summary>
            Gets or sets whether the property editor displays a painted representation of the value, a textual representation of the value, or both.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.PropertyEditorDisplayMode"/> that 
            represents the mode used to display the control. The default value is
            <see cref="F:NationalInstruments.UI.PropertyEditorDisplayMode.TextAndPaintValue"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:NationalInstruments.UI.PropertyEditorDisplayMode"/> value.
            </exception>
            <remarks>
            The painted representation of the value is drawn only if the editor supports paint value.
            </remarks>
            <lastupdated>10/5/2006 4:56:33 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.Source">
            <format type="bold"></format>
            <summary>
            Gets or sets the source that represents the property to be edited at run time.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.PropertyEditorSource"/> that represents the property
            to be edited at run time. The default value is <see cref="P:NationalInstruments.UI.PropertyEditorSource.Empty"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <remarks>
            	<para>
            		<see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.Source"/> represents a property
            that supports either one-way or two-way data binding. For two-way data binding, if the
            <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValue"/> changes through the control
            or directly on the <see cref="P:NationalInstruments.UI.PropertyEditorSource.Object"/>, the control
            updates to reflect the change.
            Two-way
            binding works through 
            <format type="italics">property changed events</format> or through objects that implement <format type="bold">System.ComponentModel.INotifyPropertyChanged</format>
            in the .NET Framework 2.0 and above. Refer to <see keyword="268039ec-5aaa-4d76-b902-acccb036c850" keywordType="msdn">Property-Changed Events</see> in <format type="italics">Windows Forms Programming</format> for more information. 
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValue"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.FormattedSourceValue"/>
            <lastupdated>9/17/2008 4:11:50 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValue">
            <summary>
            Gets or sets the value of the property.
            </summary>
            <value>
            An <see cref="T:System.Object"/> representing the value of the property
            defined by <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.Source"/>.
            The default value is <see langword="null"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.Source"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.FormattedSourceValue"/>
            <lastupdated>10/5/2006 5:04:55 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.FormattedSourceValue">
            <summary>
            Gets the string representation of the property value.
            </summary>
            <value>
            The <see cref="T:System.String"/> representation of the 
            <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValue"/>. The
            default value is <see cref="F:System.String.Empty"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            If <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValue"/> is
            <see langword="null"/>, the formatted value is <see cref="F:System.String.Empty"/>.
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValue"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.Source"/>
            <lastupdated>10/5/2006 4:56:46 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.EditValue">
            <summary>
            Edits the value of the property by launching the associated editor.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/5/2006 5:01:17 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.IsEditingValue">
            <summary>
            Gets a value indicating if the <see cref="T:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor"/>
            is currently editing the value of the property using the associated editor.
            </summary>
            <value>
            A value indicating if the <see cref="T:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor"/>
            is currently editing the value of the property using the associated editor.
            </value>
            <lastupdated>10/5/2006 4:58:18 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.OnSubscribeControlEvents(System.Windows.Forms.Control)">
            <summary>
            Subscribes events from the <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.PropertyEditor"/>
            control.
            </summary>
            <param name="control">
            The control from which to subscribe events.
            </param>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.ToolStripControlHost.OnSubscribeControlEvents(System.Windows.Forms.Control)"/>.
            </remarks>
            <lastupdated>10/5/2006 5:02:37 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.OnUnsubscribeControlEvents(System.Windows.Forms.Control)">
            <summary>
            Unsubscribes events from the <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.PropertyEditor"/>
            control.
            </summary>
            <param name="control">
            The control from which to unsubscribe events.
            </param>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.ToolStripControlHost.OnUnsubscribeControlEvents(System.Windows.Forms.Control)"/>.
            </remarks>
            <lastupdated>10/5/2006 5:02:46 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.OnRenderModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.RenderModeChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.RenderModeChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.RenderMode"/>
            <lastupdated>10/5/2006 5:02:03 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.OnBorderStyleChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.BorderStyleChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.BorderStyleChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.BorderStyle"/>
            <lastupdated>10/5/2006 5:01:28 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.OnPropertyTextAlignChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.PropertyTextAlignChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.PropertyTextAlignChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.PropertyTextAlign"/>
            <lastupdated>10/5/2006 5:01:55 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.OnInteractionModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.InteractionModeChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.InteractionModeChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.InteractionMode"/>
            <lastupdated>10/5/2006 5:01:44 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.OnDisplayModeChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.DisplayModeChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.DisplayModeChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.DisplayMode"/>
            <lastupdated>10/5/2006 5:01:36 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.OnSourceChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.Source"/>
            <lastupdated>10/5/2006 5:02:11 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.OnSourceValueChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValueChanged"/>
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValueChanged"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValue"/>
            <lastupdated>10/5/2006 5:02:18 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.OnSourceValueWarning(NationalInstruments.UI.PropertyEditorSourceValueWarningEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValueWarning"/>
            event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.PropertyEditorSourceValueWarningEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValueWarning"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValue"/>
            <lastupdated>10/5/2006 5:02:28 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.RenderModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.RenderMode"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.RenderMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.OnRenderModeChanged(System.EventArgs)"/>
            <lastupdated>10/5/2006 5:04:11 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.BorderStyleChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.BorderStyle"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.BorderStyle"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.OnBorderStyleChanged(System.EventArgs)"/>
            <lastupdated>10/5/2006 5:03:34 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.PropertyTextAlignChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.PropertyTextAlign"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.PropertyTextAlign"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.OnPropertyTextAlignChanged(System.EventArgs)"/>
            <lastupdated>10/5/2006 5:04:00 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.InteractionModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.InteractionMode"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.InteractionMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.OnInteractionModeChanged(System.EventArgs)"/>
            <lastupdated>10/5/2006 5:03:50 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.DisplayModeChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.DisplayMode"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.DisplayMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.OnDisplayModeChanged(System.EventArgs)"/>
            <lastupdated>10/5/2006 5:03:42 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.Source"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.Source"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.OnSourceChanged(System.EventArgs)"/>
            <lastupdated>10/5/2006 5:04:20 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValueChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValue"/> changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValue"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.OnSourceValueChanged(System.EventArgs)"/>
            <lastupdated>10/5/2006 5:04:28 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValueWarning">
            <summary>
            Occurs when the <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValue"/> changes
            to a value that cannot be converted to its corresponding string representation.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.</exception>
            <remarks>
            	Use <see cref="E:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValueWarning"/> to set <see cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValue"/> to a value
            that has a string representation.
            </remarks>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.SourceValue"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.OnSourceValueWarning(NationalInstruments.UI.PropertyEditorSourceValueWarningEventArgs)"/>
            <lastupdated>10/5/2006 5:04:42 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.OnParentChanged(System.Windows.Forms.ToolStrip,System.Windows.Forms.ToolStrip)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.ParentChanged"/>
            event.
            </summary>
            <param name="oldParent">
            The original parent of the item.
            </param>
            <param name="newParent">
            The new parent of the item.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>3/21/2007 4:15:56 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/5/2006 5:03:26 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.ToolStripPropertyEditor.ThrowExceptionIfDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if the object has been disposed.
            </summary>
            <remarks>
            The <see cref="T:System.ObjectDisposedException"/> is thrown if the value of <see cref="P:System.Windows.Forms.Control.IsDisposed"/>
            is <see langword="true"/>. 
            </remarks>
            <seealso cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)"/>
            <seealso cref="P:System.Windows.Forms.Control.IsDisposed"/>
            <seealso cref="T:System.GC"/>
            <lastupdated>8/12/2005 4:57:00 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.WaveformGraph">
            <summary>
            Represents the class for Measurement Studio Windows Forms graphs that accept data as a waveform.
            </summary>
            <threadsafety safety="control"/>
            <remarks>
            	<para>
            A waveform is defined as a set of data against equally
            spaced increments.
            </para>
            	<para>
            You can use the <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection to include
            multiple <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances on a single graph. With multiple 
            plots, you can plot multiple sets of data in the same plot area. 
            You can determine whether plot colors are assigned by a color generator with the <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.UseColorGenerator"/> property, and you can
            change the plot color assignment with the <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotLineColorGenerator"/> property.
            	</para>
            	<para>
            Use <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> to plot a single
            x value or an array of x values against a starting y value. 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>
            uses the specified value to increment y values or a default value if one is not specified. 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/> plots x values 
            by appending the values to the existing data.
            	</para>
            	<para>
            You can plot multiple sets of x data values with a
            single method invocation. Use <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXMultiple(System.Double[0:,0:])"/> 
            to plot a 2D array of x values against a starting y value. 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXMultiple(System.Double[0:,0:])"/> uses the specified value to 
            increment y values or a default value if one is not specified.
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppendMultiple(System.Double[0:,0:])"/> behaves in much the
            same way, except that it appends the data to the existing data for plotting.
            </para>
            	<para>
            Use <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> to plot a single
            y value or an array of y values against a starting x value. <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> 
            uses the specified value to increment x values or a default value if one is not specified. 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/> plots 
            y values by appending the values to the existing data.
            	</para>
            	<para>
            You can plot multiple sets of y data values with a
            single method invocation. Use <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYMultiple(System.Double[0:,0:])"/> 
            to plot a 2D array of y values against a starting x value. 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYMultiple(System.Double[0:,0:])"/> uses a specified value to 
            increment x values or a default value if one is not specified.
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppendMultiple(System.Double[0:,0:])"/> behaves in much the
            same way, except that it appends the data to the existing data for plotting.
            </para>
            	<para>
            		<filter name="VS2010"> 
            You can use <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/> to 
            plot <see cref="T:NationalInstruments.AnalogWaveform`1"/> data against the waveform sample 
            units and <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/> to 
            append the waveform to the existing data.
            </filter>
            	</para>
            	<para>
            		<filter name="VS2010"> 
            Use <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveforms``1(NationalInstruments.AnalogWaveform{``0}[])"/> to plot a 1D array 
            of <see cref="T:NationalInstruments.AnalogWaveform`1"/> data against the waveform
             sample units or use <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformsAppend``1(NationalInstruments.AnalogWaveform{``0}[])"/> to append an array to the existing data.
              Similarly, you can use <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformsMultiple``1(NationalInstruments.AnalogWaveform{``0}[0:,0:])"/>  to plot a 2D 
            array of <see cref="T:NationalInstruments.AnalogWaveform`1"/> 
             data against the waveform sample units and <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformsAppendMultiple``1(NationalInstruments.AnalogWaveform{``0}[0:,0:])"/> to append
             the waveforms against the existing data.
            </filter>
            	</para>
            	<para>
            You can use <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/> to 
            plot <see cref="T:NationalInstruments.ComplexWaveform`1"/>  data and <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/> to 
            append the waveform to the existing data. </para>
            	<para>
            Use <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveforms``1(NationalInstruments.ComplexWaveform{``0}[])"/> to plot a 1D array of <see cref="T:NationalInstruments.ComplexWaveform`1"/>  data 
             or use <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformsAppend``1(NationalInstruments.ComplexWaveform{``0}[])"/> to append an array to the existing data.
              Similarly, you can use <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformsMultiple``1(NationalInstruments.ComplexWaveform{``0}[0:,0:])"/>  to plot a 2D array of <see cref="T:NationalInstruments.ComplexWaveform`1"/> 
             data and <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformsAppendMultiple``1(NationalInstruments.ComplexWaveform{``0}[0:,0:])"/> to append
             the waveforms against the existing data.
            </para>
            	<para>
            		<see cref="P:NationalInstruments.UI.IWaveformGraph.BindingData"/>
            can be used to bind the graph to a data source. The method to invoke when bound to a data 
            source is specified by the value of 
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingMethod"/>.
            	</para>
            	<note type="note">
            For more information about the waveform graph control, refer to <see keyword="UsingNINETGraphWinForms" keywordType="mstudio">Using the Measurement Studio Windows Forms Graph .NET Controls</see> or <see keyword="KeyNETGraphFeaturesWinForms" keywordType="mstudio">Key Measurement Studio Windows Forms Scatter and Waveform Graph .NET Control Features</see>.
            </note>
            </remarks>
            <lastupdated>10/5/2010 1:57:38 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.WaveformGraph"/> class.
            </summary>
            <lastupdated>7/1/2003 12:10:53 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots">
            <summary>
            Gets the collection of plots on the graph.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.WaveformPlotCollection"/> that contains the
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> objects on the graph.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:NationalInstruments.UI.WaveformPlot"/>
            <lastupdated>9/23/2011 2:02:04 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotLineColorGenerator">
            <summary>
            Gets or sets the <see cref="T:NationalInstruments.UI.ColorGenerator"/> that assigns different colors to plots.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.UI.ColorGenerator"/> that assigns different colors to plots. The default value is <see cref="P:NationalInstruments.UI.FixedSetColorGenerator.Standard"/>.
            </value>
            <remarks>
            At design time, when you add, delete, or move a plot up and down, the colors are reassigned according to the order in which they are specified in the color set. At run time, the color of the plot depends on its index in the plot collection when you add the plot to the collection. If you delete a plot at run time, the color of the other plots does not change. 
            <para>
            When this property changes, the <see cref="E:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotLineColorGeneratorChanged"/> event is raised, and colors are assigned to all plots if <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.UseColorGenerator"/> is <see langword="true"/>.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.UseColorGenerator"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotLineColorGeneratorChanged"/>
            <seealso cref="T:NationalInstruments.UI.ColorGenerator"/>
            <seealso cref="T:NationalInstruments.UI.FixedSetColorGenerator"/>
            <lastupdated>7/6/2009 5:44:50 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.WaveformGraph.UseColorGenerator">
            <summary>
            Gets or sets whether <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotLineColorGenerator"/> is enabled or disabled. 
            </summary>
            <value>
            	<see langword="true"/> to enable <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotLineColorGenerator"/>; otherwise, <see langword="false"/>.
            The default value is <see langword="false"/>. At design time, this property is set to <see langword="true"/> by a custom control designer for ease of use.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            When this property is set to <see langword="true"/>, plots are assigned different colors by the <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotLineColorGenerator"/> property; otherwise, the plots default to <see cref="P:System.Drawing.Color.Lime"></see>, unless you have explicitly set the colors. 
            <see cref="P:NationalInstruments.UI.Plot.LineColorPrecedence"/> determines whether to draw the plot with auto-generated color or with a color you assign. 
            	<para>
            	</para>
            </remarks>
            <seealso cref="P:NationalInstruments.UI.Plot.LineColorPrecedence"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotLineColorGenerator"/>
            <seealso cref="T:NationalInstruments.UI.ColorGenerator"/>
            <seealso cref="T:NationalInstruments.UI.FixedSetColorGenerator"/>
            <lastupdated>6/11/2009 6:26:46 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingMethod">
            <summary>
            Gets or sets the method to call when binding to a data source.
            </summary>
            <value>
            A value from <see cref="T:NationalInstruments.UI.BindableWaveformGraphMethod"/> that specifies
            the method to call when binding to a data source. The default value is 
            <see cref="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotY"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a <see cref="T:NationalInstruments.UI.BindableWaveformGraphMethod"/>
            value.
            </exception>
            <seealso cref="P:NationalInstruments.UI.IWaveformGraph.BindingData"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingStart"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingIncrement"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingDataOrientation"/>
            <lastupdated>7/10/2003 2:16:26 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingStart">
            <summary>
            Gets or sets the starting x or y value when binding to a data source.
            </summary>
            <value>
            The starting x or y value when binding to a data source. The default value is <format type="monospace">0.0</format>.
            </value>
            <remarks>
            This value is used while data binding only when <see cref="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotX"/>,
            <see cref="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotXMultiple"/>,
            <see cref="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotY"/>, or
            <see cref="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotYMultiple"/>
            is the value of <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingMethod"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.IWaveformGraph.BindingData"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingMethod"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingIncrement"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingDataOrientation"/>
            <lastupdated>7/1/2003 3:43:24 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingIncrement">
            <summary>
            Gets or sets the value to increment x or y values when binding to a data source.
            </summary>
            <value>
            The value to increment x or y values when binding to a data source. The
            default value is <format type="monospace">1.0</format>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.IWaveformGraph.BindingData"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingMethod"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingStart"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingDataOrientation"/>
            <lastupdated>7/1/2003 3:42:00 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingDataOrientation">
            <summary>
            Gets or sets the orientation of data in a 2D 
            array when binding to a data source.
            </summary>
            <value>
            A value from <see cref="T:NationalInstruments.UI.DataOrientation"/> that indicates
            the orientation of data in a 2D array when binding to a data
            source. The default value is <see cref="F:NationalInstruments.UI.DataOrientation.DataInRows"/>.
            </value>
            <remarks>
            This value is used while data binding only when 
            <see cref="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotXMultiple"/>,
            <see cref="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotXAppendMultiple"/>,
            <see cref="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotYMultiple"/>, or
            <see cref="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotYAppendMultiple"/>
            is the value of <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingMethod"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value is not a valid <see cref="T:NationalInstruments.UI.DataOrientation"/>
            value.
            </exception>
            <seealso cref="P:NationalInstruments.UI.IWaveformGraph.BindingData"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingMethod"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingStart"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingIncrement"/>
            <lastupdated>9/15/2009 10:12:31 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingData">
            <summary>
            Gets or sets the data when binding to a data source.
            </summary>
            <value>
            The data when binding to a data source.
            </value>
            <remarks>
            	<para>
            The return value of <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingData"/> 
            is always <see langword="null"/>.
            </para>
            	<para>
            You can  select a data source using   <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingData"/>
            within the Windows Forms Designer by expanding the  
            <see cref="P:System.Windows.Forms.Control.DataBindings"/> node in the Properties window.
            </para>
            	<para>
            You can use <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingData"/>  to configure plotting by using 
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingStart"/>, 
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingMethod"/>,
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingIncrement"/>, and
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingDataOrientation"/>. 
            Assign valid values for these properties when plotting using data binding. For example, you can set
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingMethod"/> to 
            <see cref="F:NationalInstruments.UI.BindableWaveformGraphMethod.PlotX"/> to plot the data.
            	</para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingMethod"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingStart"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingIncrement"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingDataOrientation"/>
            <lastupdated>5/9/2011 4:14:53 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.WaveformGraph.DefaultDataOrientation">
            <summary>
            Gets or sets the default orientation of values in a 2D array.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.DataOrientation"/> that specifies the default
            orientation of values in a 2D array. The default value is 
            <see cref="F:NationalInstruments.UI.DataOrientation.DataInRows"/>.
            </value>
            <remarks>
            	<see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.DefaultDataOrientation"/> 
            is used in <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXMultiple(System.Double[0:,0:])"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppendMultiple(System.Double[0:,0:])"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYMultiple(System.Double[0:,0:])"/>, and 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppendMultiple(System.Double[0:,0:])"/> when the 
            orientation of values in a 2D array is not specified.
            </remarks>
            <lastupdated>6/23/2006 3:08:11 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.WaveformGraph"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.WaveformGraph"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            </remarks>
            <seealso cref="M:System.IDisposable.Dispose"/>
            <seealso cref="T:System.IDisposable"/>
            <lastupdated>7/1/2003 12:07:22 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.OnPlotLineColorGeneratorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotLineColorGeneratorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains 
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>6/11/2009 6:27:04 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.OnUseColorGeneratorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.WaveformGraph.UseColorGeneratorChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains 
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>6/11/2009 6:27:06 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.OnBindingMethodChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingMethodChanged"/> 
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingMethodChanged"/>
            <lastupdated>7/13/2004 6:02:34 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.OnBindingStartChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingStart"/> 
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingStartChanged"/>
            <lastupdated>7/13/2004 6:02:44 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.OnBindingIncrementChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingIncrementChanged"/> 
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingIncrementChanged"/>
            <lastupdated>7/13/2004 6:02:25 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.OnBindingDataOrientationChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingDataOrientationChanged"/> 
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingDataOrientationChanged"/>
            <lastupdated>7/13/2004 6:02:14 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.OnDefaultDataOrientationChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.WaveformGraph.DefaultDataOrientationChanged"/> 
            event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.WaveformGraph.DefaultDataOrientationChanged"/>
            <lastupdated>7/13/2004 6:02:53 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppendMultiple(System.Double[0:,0:])">
            <summary>
            Plots a 2D array of x values with the default data orientation against a 
            starting y value by appending the x and y values to the existing data. 
            </summary>
            <param name="xData">
            The 2D array of x values to plot.
            </param>
            <remarks>
            	<para>
            The orientation of data in <paramref name="xData"/> is specified by 
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.DefaultDataOrientation"/>.
            </para>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/> on  
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in 
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> using the index of rows or columns 
            of <paramref name="xData"/> based on the value of <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.DefaultDataOrientation"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting y value if there is no existing data; otherwise, the 
            starting y value is determined by adding the 
            <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement"/> value 
            of the plot to the last y value in the existing data. The 
            <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement"/> value of the plot
            is used for incrementing y values.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/>	on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that is 
            currently being used to plot data.
            </para>
            	<para>
            To successfully change the increment from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            </remarks>
            <example>
            The following example demonstrates how to plot an array of x values that 
            represents a 1D double array. You can use the code to plot a single data point across
            multiple plots. This example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.WaveformGraph"/> called <format type="monospace">waveformGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim xValues As Double() = {2, 4, 6, 8, 10}
            Dim xValuesMatrix As Double(,) = CType(NationalInstruments.DataConverter.Convert(xValues, GetType(Double(,))), Double(,))
            waveformGraph1.DefaultDataOrientation = DataOrientation.DataInColumns
            waveformGraph1.PlotXAppendMultiple(xValuesMatrix)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] xValues = new double[5] { 2, 4, 6, 8, 10 };
            double[,] xValuesMatrix = (double[,]) NationalInstruments.DataConverter.Convert(xValues, typeof(double[,]));
            waveformGraph1.DefaultDataOrientation = DataOrientation.DataInColumns;
            waveformGraph1.PlotXAppendMultiple(xValuesMatrix);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            	The increment is a positive value and it was a negative value in a previous call to
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The increment is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>. 
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="xData"/> value at a particular index and its corresponding y value are special values.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.DefaultDataOrientation"/>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <lastupdated>5/9/2011 4:15:04 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppendMultiple(System.Double[0:,0:],NationalInstruments.UI.DataOrientation,System.Double)">
            <summary>
            Plots a 2D array of x values with the specified orientation against a starting
            y value by appending the x and y values to the existing
            data using the specified value to increment y values.
            </summary>
            <param name="xData">
            The 2D array of x values to append.
            </param>
            <param name="orientation">
            A <see cref="T:NationalInstruments.UI.DataOrientation"/> value that specifies the orientation of
            data in <paramref name="xData"/>.
            </param>
            <param name="increment">
            The value to use to increment y values.
            </param>
            <remarks>
            	<para>
            This method calls 
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/> on  
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in 
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> using the index of rows 
            or columns of <paramref name="xData"/> based on the value of
            <paramref name="orientation"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting y value if there is no existing data; otherwise, the 
            starting y value is determined by adding 
            <paramref name="increment"/> 
            to the last y value in the existing data. 
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/>	on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>	on the plot to determine the category of the method that is 
            currently being used to plot data.
            </para>
            	<para>
            To successfully change <paramref name="increment"/> from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            </remarks>
            <example>
            The following example demonstrates how to plot an array of x values that 
            represents a 1D double array. You can use the code to plot a single data point across
            multiple plots. This example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.WaveformGraph"/> called <format type="monospace">waveformGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim xValues As Double() = {2, 4, 6, 8, 10}
            Dim xValuesMatrix As Double(,) = CType(NationalInstruments.DataConverter.Convert(xValues, GetType(Double(,))), Double(,))
            waveformGraph1.PlotXAppendMultiple(xValuesMatrix, DataOrientation.DataInColumns, 1)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] xValues = new double[5] { 2, 4, 6, 8, 10 };
            double[,] xValuesMatrix = (double[,]) NationalInstruments.DataConverter.Convert(xValues, typeof(double[,]));
            waveformGraph1.PlotXAppendMultiple(xValuesMatrix, DataOrientation.DataInColumns, 1);
            </code>
            </example>
            <example>The following example demonstrates appending multiple sets of data organized in  rows at an increment of 1.5. 
            <code lang="VB.NET">
            Dim xData As Double(,) = New Double(2, 49) {}
            Dim amp As Double
             
            ' Create random x data.
            For row As Integer = 0 To xData.GetLength(0) - 1
                amp = RandNumberGenerator.NextDouble() * 10
                For col As Integer = 0 To xData.GetLength(1) - 1
                    xData(row, col) = amp * Math.Sin(2 * col * Math.PI / xData.GetLength(1)) + amp
                Next
            Next
             
            ' Set the X-Axis to display samples
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = samplesFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt; &gt; WaveformPlotMode.PlotX Then
                wvfmGraph.ClearData()
            End If
            ' Plot all elements of the xData array, incrementing
            ' Y values 1.5 units per xData element.  Because there are
            ' three rows of data, specify the DataOrientation to be in rows
            wvfmGraph.PlotXAppendMultiple(xData, DataOrientation.DataInRows, 1.5)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[,] xData = new double[3, 50];
            double amp;
             
            // Create random x data
            for (int row = 0; row &lt; xData.GetLength(0); row++)
            {
                amp = RandNumberGenerator.NextDouble() * 10;
                for (int col = 0; col &lt; xData.GetLength(1); col++)
                {
                    xData[row, col] = amp * Math.Sin(2 * col * Math.PI / xData.GetLength(1)) + amp;
                }
            }
             
            // Set the X-Axis to display samples
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotX)
                wvfmGraph.ClearData();
            // Plot all elements of the xData array, incrementing
            // Y values 1.5 units per xData element.  Because there are
            // three rows of data, specify the DataOrientation to be in rows
            wvfmGraph.PlotXAppendMultiple(xData, DataOrientation.DataInRows, 1.5d);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<paramref name="orientation"/> is not a valid
            <see cref="T:NationalInstruments.UI.DataOrientation"/> value.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a positive value and it was a negative value in a previous 
            call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="xData"/> value at a particular index and its corresponding y value are special values.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <lastupdated>5/9/2011 4:15:05 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppendMultiple(System.Double[0:,0:],NationalInstruments.UI.DataOrientation,System.TimeSpan)">
            <summary>
            Plots a 2D array of x values with the specified orientation against a starting
            y value by appending the x and y values to the existing
            data using the specified <see cref="T:System.TimeSpan"/> to increment y values.
            </summary>
            <param name="xData">
            The 2D array of x values to append.
            </param>
            <param name="orientation">
            A <see cref="T:NationalInstruments.UI.DataOrientation"/> value that specifies the orientation of
            data in <paramref name="xData"/>.
            </param>
            <param name="increment">
            A <see cref="T:System.TimeSpan"/> that represents the value to use to increment y values.
            </param>
            <remarks>
            	<para>
            This method calls 
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/> on  
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in 
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> using the index of rows 
            or columns of <paramref name="xData"/> based on the value of <paramref name="orientation"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting y value if there is no existing data; otherwise, the 
            starting y value is determined by adding 
            <paramref name="increment"/> 
            to the last y value in the existing data. 
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/>	on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>	on the plot to determine the category of the method that is 
            currently being used to plot data.
            </para>
            	<para>
            To successfully change <paramref name="increment"/> from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            </remarks>
            <example>
            The following example demonstrates how to plot an array of x values that 
            represents a 1D double array. You can use the code to plot a single data point across
            multiple plots. This example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.WaveformGraph"/> called <format type="monospace">waveformGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim xValues As Double() = {2, 4, 6, 8, 10}
            Dim xValuesMatrix As Double(,) = CType(NationalInstruments.DataConverter.Convert(xValues, GetType(Double(,))), Double(,))
            waveformGraph1.PlotXAppendMultiple(xValuesMatrix, DataOrientation.DataInColumns, TimeSpan.FromSeconds(1))
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] xValues = new double[5] { 2, 4, 6, 8, 10 };
            double[,] xValuesMatrix = (double[,]) NationalInstruments.DataConverter.Convert(xValues, typeof(double[,]));
            waveformGraph1.PlotXAppendMultiple(xValuesMatrix, DataOrientation.DataInColumns, TimeSpan.FromSeconds(1));
            </code>
            </example>
            <example>The following example demonstrates appending multiple sets of data organized in  columns at an increment of 2.75 seconds. 
            <code lang="VB.NET">
            Dim xData As Double(,) = New Double(49, 2) {}
            Dim amp As Double
            Dim increment As TimeSpan = TimeSpan.FromSeconds(2.75)
             
            ' Create random x data.
            For col As Integer = 0 To xData.GetLength(1) - 1
                amp = RandNumberGenerator.NextDouble() * 10
                For row As Integer = 0 To xData.GetLength(0) - 1
                    xData(row, col) = amp * Math.Sin(2 * row * Math.PI / xData.GetLength(0)) + amp
                Next
            Next
             
            ' Set the X-Axis to display samples
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = samplesFormatString
            ' Set the Y-Axis to display time
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = timeFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotX Then
                wvfmGraph.ClearData()
            End If
            ' Plot all elements of the xData array, incrementing
            ' Y values by 2.75 seconds with each value.  Because there are three
            ' columns of data, specify the DataOrientation to be in columns
            wvfmGraph.PlotXAppendMultiple(xData, DataOrientation.DataInColumns, increment)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[,] xData = new double[50, 3];
            double amp;
            TimeSpan increment = TimeSpan.FromSeconds(2.75d);
             
            // Create random x data
            for (int col = 0; col &lt; xData.GetLength(1); col++)
            {
                amp = RandNumberGenerator.NextDouble() * 10;
                for (int row = 0; row &lt; xData.GetLength(0); row++)
                {
                    xData[row, col] = amp * Math.Sin(2 * row * Math.PI / xData.GetLength(0)) + amp;
                }
            }
             
            // Set the X-Axis to display samples
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
            // Set the Y-Axis to display time
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = timeFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotX)
                wvfmGraph.ClearData();
            // Plot all elements of the xData array, incrementing
            // Y values by 2.75 seconds with each value.  Because there are three
            // columns of data, specify the DataOrientation to be in columns
            wvfmGraph.PlotXAppendMultiple(xData, DataOrientation.DataInColumns, increment);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<paramref name="orientation"/> is not a valid
            <see cref="T:NationalInstruments.UI.DataOrientation"/> value.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a positive value and it was a negative value in a previous 
            call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="xData"/> value at a particular index and its corresponding y value are special values.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <lastupdated>5/9/2011 4:15:06 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppendMultiple(System.Double[0:,0:],NationalInstruments.UI.DataOrientation,System.TimeSpan,NationalInstruments.UI.PlotDateTimePrecisionMode)">
            <summary>
            Plots a 2D array of x values with the specified orientation against a starting
            y value with the specified <see cref="T:NationalInstruments.UI.PlotDateTimePrecisionMode"/>. <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppendMultiple(System.Double[0:,0:])" crefType="Unqualified"/> appends the x and y values to the existing
            data using the specified <see cref="T:System.TimeSpan"/> to increment y values.
            </summary>
            <param name="xData">
            The 2D array of x values to append.
            </param>
            <param name="orientation">
            A <see cref="T:NationalInstruments.UI.DataOrientation"/> value that specifies the orientation of
            data in <paramref name="xData"/>.
            </param>
            <param name="increment">
            A <see cref="T:System.TimeSpan"/> that represents the value to use to increment y values.
            </param>
            <param name="precisionMode">
            A <see cref="T:NationalInstruments.UI.PlotDateTimePrecisionMode"/> that represents the precision mode to use when plotting the x values.
            </param>
            <remarks>
            	<para>
            This method calls 
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/> on  
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in 
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> using the index of rows 
            or columns of <paramref name="xData"/> based on the value of <paramref name="orientation"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting y value if there is no existing data; otherwise, the 
            starting y value is determined by adding 
            <paramref name="increment"/> 
            to the last y value in the existing data. 
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/>	on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>	on the plot to determine the category of the method that is 
            currently being used to plot data.
            </para>
            	<para>
            To successfully change <paramref name="increment"/> from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            </remarks>
            <example>
            The following example demonstrates how to plot an array of x values that 
            represents a 1D double array. You can use the code to plot a single data point across
            multiple plots. This example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.WaveformGraph"/> called <format type="monospace">waveformGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim xValues As Double() = {2, 4, 6, 8, 10}
            Dim xValuesMatrix As Double(,) = CType(NationalInstruments.DataConverter.Convert(xValues, GetType(Double(,))), Double(,))
            waveformGraph1.PlotXAppendMultiple(xValuesMatrix, DataOrientation.DataInColumns, TimeSpan.FromSeconds(1), PlotDateTimePrecisionMode.Precise)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] xValues = new double[5] { 2, 4, 6, 8, 10 };
            double[,] xValuesMatrix = (double[,]) NationalInstruments.DataConverter.Convert(xValues, typeof(double[,]));
            waveformGraph1.PlotXAppendMultiple(xValuesMatrix, DataOrientation.DataInColumns, TimeSpan.FromSeconds(1), PlotDateTimePrecisionMode.Precise);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<para>
            		<paramref name="orientation"/> is not a valid
            <see cref="T:NationalInstruments.UI.DataOrientation"/> value.
            </para>
            	<para>
            or
            </para>
            	<para>
            		<paramref name="precisionMode"/> is not a valid <see cref="T:NationalInstruments.UI.PlotDateTimePrecisionMode"/> value.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a positive value and it was a negative value in a previous 
            call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="xData"/> value at a particular index and its corresponding y value are special values.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <lastupdated>5/9/2011 4:15:08 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXMultiple(System.Double[0:,0:])">
            <summary>
            Plots a 2D array of x values with the default data orientation against 
            the default starting y value.</summary>
            <param name="xData">
            The 2D array of x values to plot.
            </param>
            <remarks>
            	<para>
            The orientation of data in <paramref name="xData"/> is specified by 
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.DefaultDataOrientation"/>.        
            </para>
            	<para>
            This method calls 
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/> on  
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in 
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> using the index of rows or columns 
            of <paramref name="xData"/> based on the value of <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.DefaultDataOrientation"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting y value. The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement"/>
             value of the plot is used to increment y values.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            </remarks>
            <example>
            The following example demonstrates plotting an array of x values
            represented as a 1D double array. The code can be used to plot a single data point across
            multiple plots. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.WaveformGraph"/> called <format type="monospace">waveformGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim xValues As Double() = {2, 4, 6, 8, 10}
            Dim xValuesMatrix As Double(,) = CType(NationalInstruments.DataConverter.Convert(xValues, GetType(Double(,))), Double(,))
            waveformGraph1.DefaultDataOrientation = DataOrientation.DataInColumns
            waveformGraph1.PlotXMultiple(xValuesMatrix)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] xValues = new double[5] { 2, 4, 6, 8, 10 };
            double[,] xValuesMatrix = (double[,]) NationalInstruments.DataConverter.Convert(xValues, typeof(double[,]));
            waveformGraph1.DefaultDataOrientation = DataOrientation.DataInColumns;
            waveformGraph1.PlotXMultiple(xValuesMatrix);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="xData"/> value at a particular index and its corresponding y value are special values.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.DefaultDataOrientation"/>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement"/>
            <lastupdated>6/23/2006 3:08:31 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXMultiple(System.Double[0:,0:],NationalInstruments.UI.DataOrientation,System.Double,System.Double)">
            <summary>
            Plots a 2D array of x values with the specified data orientation against 
            the specified starting y value. <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXMultiple(System.Double[0:,0:])"/> uses the 
            specified value to increment y values.
            </summary>
            <param name="xData">
            The 2D array of x values to plot.
            </param>
            <param name="orientation">
            A <see cref="T:NationalInstruments.UI.DataOrientation"/> value that specifies the orientation of
            data in <paramref name="xData"/>.
            </param>
            <param name="start">
            The starting y value.
            </param>
            <param name="increment">
            The value to use to increment y values.
            </param>
            <remarks>
            	<para>
            This method calls 
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/> on  
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in 
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> using the index of rows 
            or columns of <paramref name="xData"/> based on the value of 
            <paramref name="orientation"/>.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            </remarks>
            <example>
            The following example demonstrates plotting an array of x values
            represented as a 1D double array. The code can be used to plot a single data point across
            multiple plots. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.WaveformGraph"/> called <format type="monospace">waveformGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim xValues As Double() = {2, 4, 6, 8, 10}
            Dim xValuesMatrix As Double(,) = CType(NationalInstruments.DataConverter.Convert(xValues, GetType(Double(,))), Double(,))
            waveformGraph1.PlotXMultiple(xValuesMatrix, DataOrientation.DataInColumns, 1, 1)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] xValues = new double[5] { 2, 4, 6, 8, 10 };
            double[,] xValuesMatrix = (double[,]) NationalInstruments.DataConverter.Convert(xValues, typeof(double[,]));
            waveformGraph1.PlotXMultiple(xValuesMatrix, DataOrientation.DataInColumns, 1, 1);
            </code>
            </example>
            <example>The following example demonstrates plotting multiple sets of data organized in  rows against a starting y value of 0 and at an increment of 1.5. 
            <code lang="VB.NET">
            Dim xData As Double(,) = New Double(2, 49) {}
            Dim amp As Double
             
            ' Create random x data..
            For row As Integer = 0 To xData.GetLength(0) - 1
                amp = RandNumberGenerator.NextDouble() * 10
                For col As Integer = 0 To xData.GetLength(1) - 1
                    xData(row, col) = amp * Math.Sin(2 * col * Math.PI / xData.GetLength(1)) + amp
                Next
            Next
             
            ' Set the x axis to display samples.
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = samplesFormatString
            ' Set the y axis to display samples.
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotX Then
                wvfmGraph.ClearData()
            End If
            ' Plot all elements of the xData array, incrementing
            ' y values 1.5 units per xData element.  Because there are
            ' three rows of data, specify the DataOrientation to be in rows
            wvfmGraph.PlotXMultiple(xData, DataOrientation.DataInRows, 0.0, 1.5).
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[,] xData = new double[3, 50];
            double amp;
             
            // Create random x data.
            for (int row = 0; row &lt; xData.GetLength(0); row++)
            {
                amp = RandNumberGenerator.NextDouble() * 10;
                for (int col = 0; col &lt; xData.GetLength(1); col++)
                {
                    xData[row, col] = amp * Math.Sin(2 * col * Math.PI / xData.GetLength(1)) + amp;
                }
            }
             
            // Set the x axis to display samples.
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
            // Set the y axis to display samples.
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotX)
                wvfmGraph.ClearData();
            // Plot all elements of the xData array, incrementing
            // y values 1.5 units per xData element.  Because there are
            // three rows of data, specify the DataOrientation to be in rows.
            wvfmGraph.PlotXMultiple(xData, DataOrientation.DataInRows, 0.0d, 1.5d);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<paramref name="orientation"/> is not a valid 
            <see cref="T:NationalInstruments.UI.DataOrientation"/> value.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> value at a particular index and its corresponding y value are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/>
            <lastupdated>10/5/2010 12:45:44 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXMultiple(System.Double[0:,0:],NationalInstruments.UI.DataOrientation,System.DateTime,System.TimeSpan)">
            <summary>
            Plots a 2D array of x values with the specified data orientation against 
            the specified <see cref="T:System.DateTime"/> as the starting y value. <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXMultiple(System.Double[0:,0:])"/>
            uses the specified <see cref="T:System.TimeSpan"/> to increment y values.
            </summary>
            <param name="xData">
            The 2D array of x values to plot.
            </param>
            <param name="orientation">
            A <see cref="T:NationalInstruments.UI.DataOrientation"/> value that specifies the orientation of
            data in <paramref name="xData"/>.
            </param>
            <param name="start">
            A <see cref="T:System.DateTime"/> that represents the starting y value.
            </param>
            <param name="increment">
            A <see cref="T:System.TimeSpan"/> that represents the value to use to increment y values.
            </param>
            <remarks>
            	<para>
            This method calls 
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/> on  
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in 
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> using the index of rows 
            or columns of <paramref name="xData"/> based on the value of <paramref name="orientation"/>.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            </remarks>
            <example>
            The following example demonstrates plotting an array of x values
            represented as a 1D double array. The code can be used to plot a single data point across
            multiple plots. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.WaveformGraph"/> called <format type="monospace">waveformGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim xValues As Double() = {2, 4, 6, 8, 10}
            Dim xValuesMatrix As Double(,) = CType(NationalInstruments.DataConverter.Convert(xValues, GetType(Double(,))), Double(,))
            waveformGraph1.PlotXMultiple(xValuesMatrix, DataOrientation.DataInColumns, DateTime.Now, TimeSpan.FromSeconds(1))
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] xValues = new double[5] { 2, 4, 6, 8, 10 };
            double[,] xValuesMatrix = (double[,]) NationalInstruments.DataConverter.Convert(xValues, typeof(double[,]));
            waveformGraph1.PlotXMultiple(xValuesMatrix, DataOrientation.DataInColumns, DateTime.Now, TimeSpan.FromSeconds(1));
            </code>
            </example>
            <example>The following example demonstrates plotting multiple sets of data organized in  columns against a starting y value of <see cref="P:System.DateTime.Now" crefType="PartiallyQualified"/> and at an increment of 2.75 seconds. 
            <code lang="VB.NET">
            Dim xData As Double(,) = New Double(49, 2) {}
            Dim amp As Double
            Dim increment As TimeSpan = TimeSpan.FromSeconds(2.75)
            Dim timeStamp As DateTime = DateTime.Now
             
            ' Create random x data..
            For col As Integer = 0 To xData.GetLength(1) - 1
                amp = RandNumberGenerator.NextDouble() * 10
                For row As Integer = 0 To xData.GetLength(0) - 1
                    xData(row, col) = amp * Math.Sin(2 * row * Math.PI / xData.GetLength(0)) + amp
                Next
            Next
             
            ' Set the x axis to display samples.
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = samplesFormatString
            ' Set the y axis to display time.
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = timeFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotX Then
                wvfmGraph.ClearData()
            End If
            ' Plot all elements of the xData array, incrementing
            ' y values by 2.75 seconds with each value.  Because there are three
            ' columns of data, specify the DataOrientation to be in columns.
            wvfmGraph.PlotXMultiple(xData, DataOrientation.DataInColumns, timeStamp, increment)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[,] xData = new double[50, 3];
            double amp;
            TimeSpan increment = TimeSpan.FromSeconds(2.75d);
            DateTime timeStamp = DateTime.Now;
             
            // Create random x data.
            for (int col = 0; col &lt; xData.GetLength(1); col++)
            {
                amp = RandNumberGenerator.NextDouble() * 10;
                for (int row = 0; row &lt; xData.GetLength(0); row++)
                {
                    xData[row, col] = amp * Math.Sin(2 * row * Math.PI / xData.GetLength(0)) + amp;
                }
            }
             
            // Set the x axis to display samples.
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
            // Set the y axis to display time.
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = timeFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotX)
                wvfmGraph.ClearData();
            // Plot all elements of the xData array, incrementing
            // Y values by 2.75 seconds with each value.  Because there are three
            // columns of data, specify the DataOrientation to be in columns
            wvfmGraph.PlotXMultiple(xData, DataOrientation.DataInColumns, timeStamp, increment);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<paramref name="orientation"/> is not a valid
            <see cref="T:NationalInstruments.UI.DataOrientation"/> value.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> value at a particular index and its corresponding y value are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/>
            <lastupdated>10/16/2010 4:23:57 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXMultiple(System.Double[0:,0:],NationalInstruments.UI.DataOrientation,System.DateTime,System.TimeSpan,NationalInstruments.UI.PlotDateTimePrecisionMode)">
            <summary>
            Plots a 2D array of x values with the specified data orientation against 
            the specified <see cref="T:System.DateTime"/> as the starting y value with the specified <see cref="T:NationalInstruments.UI.PlotDateTimePrecisionMode"/>. <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXMultiple(System.Double[0:,0:])"/>
            uses the specified <see cref="T:System.TimeSpan"/> to increment y values.
            </summary>
            <param name="xData">
            The 2D array of x values to plot.
            </param>
            <param name="orientation">
            A <see cref="T:NationalInstruments.UI.DataOrientation"/> value that specifies the orientation of
            data in <paramref name="xData"/>.
            </param>
            <param name="start">
            A <see cref="T:System.DateTime"/> that represents the starting y value.
            </param>
            <param name="increment">
            A <see cref="T:System.TimeSpan"/> that represents the value to use to increment y values.
            </param>
            <param name="precisionMode">
            A <see cref="T:NationalInstruments.UI.PlotDateTimePrecisionMode"/> that represents the precision mode to use when plotting the x values.
            </param>
            <remarks>
            	<para>
            This method calls 
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/> on  
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in 
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> using the index of rows 
            or columns of <paramref name="xData"/> based on the value of <paramref name="orientation"/>.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            </remarks>
            <example>
            The following example demonstrates plotting an array of x values
            represented as a 1D double array. The code can be used to plot a single data point across
            multiple plots. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.WaveformGraph"/> called <format type="monospace">waveformGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim xValues As Double() = {2, 4, 6, 8, 10}
            Dim xValuesMatrix As Double(,) = CType(NationalInstruments.DataConverter.Convert(xValues, GetType(Double(,))), Double(,))
            waveformGraph1.PlotXMultiple(xValuesMatrix, DataOrientation.DataInColumns, DateTime.Now, TimeSpan.FromSeconds(1), PlotDateTimePrecisionMode.Precise)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] xValues = new double[5] { 2, 4, 6, 8, 10 };
            double[,] xValuesMatrix = (double[,]) NationalInstruments.DataConverter.Convert(xValues, typeof(double[,]));
            waveformGraph1.PlotXMultiple(xValuesMatrix, DataOrientation.DataInColumns, DateTime.Now, TimeSpan.FromSeconds(1), PlotDateTimePrecisionMode.Precise);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<para>
            		<paramref name="orientation"/> is not a valid
            <see cref="T:NationalInstruments.UI.DataOrientation"/> value.
            </para>
            	<para>
            or
            </para>
            	<para>
            		<paramref name="precisionMode"/> is not a valid <see cref="T:NationalInstruments.UI.PlotDateTimePrecisionMode"/> value.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> value at a particular index and its corresponding y value are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/>
            <lastupdated>9/15/2009 10:22:22 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)">
            <summary>
            Plots a single x value against a starting y value by appending the x and y values to the existing data.
            </summary>
            <param name="xData">
            The x value to append.
            </param>
            <remarks>
            	<para>
            This method calls 
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting y value if there is no existing data; otherwise, the 
            starting y value is determined by adding the
            <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement"/> value 
            of the plot to the last y value in the existing data.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/>	on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>	on the plot to determine the category of the method that is 
            currently being used to plot data.
            </para>
            	<para>
            To successfully change the increment from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            	The increment is a positive value and it was a negative value in a previous call to
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The increment is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> and its corresponding y value are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppendMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:25:56 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double,System.Double)">
            <summary>
            Plots a single x value against a starting y value by appending the x and y values to the existing data 
            using the specified value to increment y values.
            </summary>
            <param name="xData">
            The x value to append.
            </param>
            <param name="increment">
            The value to use to increment y values.
            </param>
            <remarks>
            	<para>
            This method calls 
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting y value if there is no existing data; otherwise, the 
            starting y value is determined by adding <paramref name="increment"/>
            to the last y value in the existing data.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/>	on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>	on the plot to determine the category of the method that is 
            currently being used to plot data.
            </para>
            	<para>
            To successfully change <paramref name="increment"/> from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <example>The following example demonstrates appending a single x value with  a y increment of 1.0. 
            <code lang="VB.NET">
            Dim xData As Double = RandNumberGenerator.NextDouble() * 10
             
            ' Set the x axis to display samples.
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = samplesFormatString
            ' Set the y axis to display samples.
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotX Then
                wvfmGraph.ClearData()
            End If
            ' Plot random x value with a 1.0 increment.
            wvfmGraph.PlotXAppend(xData, 1.0)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double xData = RandNumberGenerator.NextDouble() * 10;
             
            // Set the x axis to display samples.
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
            // Set the y axis to display samples.
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotX)
                wvfmGraph.ClearData();
            // Plot random x value with a 1.0 increment.
            wvfmGraph.PlotXAppend(xData, 1.0);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a positive value and it was a negative value in a previous call to
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> and its corresponding y value are special values.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppendMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:26:03 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double,System.TimeSpan)">
            <summary>
            Plots a single x value against a starting y value by appending the x and y values to the existing data 
            using the specified <see cref="T:System.TimeSpan"/> to increment y values.
            </summary>
            <param name="xData">
            The x value to append.
            </param>
            <param name="increment">
            A <see cref="T:System.TimeSpan"/> that represents the value to use to increment y values.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting y value if there is no existing data; otherwise, the 
            starting y value is determined by adding <paramref name="increment"/>
            to the last y value in the existing data.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that is 
            currently being used to plot data.
            </para>
            	<para>
            To successfully change <paramref name="increment"/> from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <example>The following example demonstrates plotting a single x value with a y increment of 3.5 seconds. 
            <code lang="VB.NET">
            Dim xData As Double = RandNumberGenerator.NextDouble() * 10
            Dim increment As TimeSpan = TimeSpan.FromSeconds(3.5)
             
            ' Set the x axis to display samples.
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = samplesFormatString
            ' Set the y axis to display time.
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = timeFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotX Then
                wvfmGraph.ClearData()
            End If
            ' Plot random x value with a 1.0 increment.
            wvfmGraph.PlotXAppend(xData, increment)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double xData = RandNumberGenerator.NextDouble() * 10;
            TimeSpan increment = TimeSpan.FromSeconds(3.5d);
             
            // Set the x axis to display samples.
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
            // Set the y axis to display time.
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = timeFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotX)
                wvfmGraph.ClearData();
            // Plot random x value with a 1.0 increment.
            wvfmGraph.PlotXAppend(xData, increment);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a positive value and it was a negative value in a previous call to
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="xData"/> value at a particular index and its corresponding y value are special values.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppendMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:26:10 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double[])">
            <summary>
            Plots an array of x values against a starting y value by appending the x and y values to the existing data.
            </summary>
            <param name="xData">
            The array of x values to append.
            </param>
            <remarks>
            	<para>
            This method calls 
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting y value if there is no existing data; otherwise, the 
            starting y value is determined by adding the
            <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement"/> value 
            of the plot to the last y value in the existing data. The 
            <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement"/> value of the plot
            is used for incrementing y values.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that is 
            currently being used to plot data.
            </para>
            	<para>
            To successfully change the increment from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            	The increment is a positive value and it was a negative value in a previous call to
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The increment is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="xData"/> value at a particular index and its corresponding y value are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppendMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:26:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double[],System.Double)">
            <summary>
            Plots an array of x values against a starting y value by appending the x and y values to the existing data 
            using the specified value to increment y values.
            </summary>
            <param name="xData">
            The array of x values to append.
            </param>
            <param name="increment">
            The value to use to increment y values.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting y value if there is no existing data; otherwise, the 
            starting y value is determined by adding <paramref name="increment"/>
            to the last y value in the existing data.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that is 
            currently being used to plot data.
            </para>
            	<para>
            To successfully change <paramref name="increment"/> from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a positive value and it was a negative value in a previous call to
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="xData"/> value at a particular index and its corresponding y value are special values.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppendMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:26:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double[],System.TimeSpan)">
            <summary>
            Plots an array of x values against a starting y value by appending the x and y values to the existing data 
            using the specified <see cref="T:System.TimeSpan"/> to increment y values.
            </summary>
            <param name="xData">
            The array of x values to append.
            </param>
            <param name="increment">
            A <see cref="T:System.TimeSpan"/> that represents the value used to increment y values.
            </param>
            <remarks>
            	<para>
            This method calls 
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting y value if there is no existing data; otherwise, the 
            starting y value is determined by adding <paramref name="increment"/>
            to the last y value in the existing data.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that is 
            currently being used to plot data.
            </para>
            	<para>
            To successfully change <paramref name="increment"/> from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a positive value and it was a negative value in a previous call to
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="xData"/> value at a particular index and its corresponding y value are special values.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppendMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:26:51 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double[],System.Int32,System.Int32,System.Double)">
            <summary>
            Plots a subset of an array of x values against a starting y value by appending the x and y values to the existing data 
            using the specified value to increment y values.
            </summary>
            <param name="xData">
            The array of x values to append.
            </param>
            <param name="startIndex">
            The index in <paramref name="xData"/> at which the plot data begins.
            </param>
            <param name="length">
            The number of elements, beginning at <paramref name="startIndex"/> in <paramref name="xData"/>, to plot.
            </param>
            <param name="increment">
            The value used to increment y values.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting y value if there is no existing data; otherwise, the 
            starting y value is determined by adding <paramref name="increment"/>
            to the last y value in the existing data.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that is 
            currently being used to plot data.
            </para>
            	<para>
            To successfully change <paramref name="increment"/> from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <example>The following example demonstrates appending a subset of x values with a y increment of 1.5. 
            <code lang="VB.NET">
            ' Create random x data..
            Dim xData As Double() = New Double(49) {}
            Dim amp As Double = RandNumberGenerator.NextDouble() * 10
             
            For i As Integer = 0 To xData.Length - 1
                xData(i) = amp * Math.Sin(2 * i * Math.PI / xData.Length) + amp
            Next
             
            ' Set the X-Axis to display samples
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = samplesFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotX Then
                wvfmGraph.ClearData()
            End If
            ' Plot all elements of the xData array, incrementing
            ' Y values 1.5 units per xData element.
            wvfmGraph.PlotXAppend(xData, 0, xData.Length, 1.5)
            </code>
            </example>
            <example>
            	<code lang="C#">
            // Create random x data
            double[] xData = new double[50];
            double amp = RandNumberGenerator.NextDouble() * 10;
             
            for (int i = 0; i &lt; xData.Length; i++)
                xData[i] = amp * Math.Sin(2 * i * Math.PI / xData.Length) + amp;
             
            // Set the X-Axis to display samples
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotX)
                wvfmGraph.ClearData();
            // Plot all elements of the xData array, incrementing
            // Y values 1.5 units per xData element.
            wvfmGraph.PlotXAppend(xData, 0, xData.Length, 1.5d);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="startIndex"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="startIndex"/> is greater than or equal to the
            number of elements in <paramref name="xData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is greater than the number of elements
            from <paramref name="startIndex"/> to the end of <paramref name="xData"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a positive value and it was a negative value in a previous call to
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="xData"/> value at a particular index and its corresponding y value are special values.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppendMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:26:31 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double[],System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Plots a subset of an array of x values against a starting y value by appending the x and y values to the existing data 
            using the specified <see cref="T:System.TimeSpan"/> to increment y values.
            </summary>
            <param name="xData">
            The array of x values to append.
            </param>
            <param name="startIndex">
            The index in <paramref name="xData"/> at which the plot data begins.
            </param>
            <param name="length">
            The number of elements, beginning at <paramref name="startIndex"/> in <paramref name="xData"/>, to plot.
            </param>
            <param name="increment">
            A <see cref="T:System.TimeSpan"/> that represents the value used to increment y values.
            </param>
            <remarks>
            	<para>
            This method calls 
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting y value if there is no existing data; otherwise, the 
            starting y value is determined by adding <paramref name="increment"/>
            to the last y value in the existing data.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that is 
            currently being used to plot data.
            </para>
            	<para>
            To successfully change <paramref name="increment"/> from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="startIndex"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="startIndex"/> is greater than or equal to the
            number of elements in <paramref name="xData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is greater than the number of elements
            from <paramref name="startIndex"/> to the end of <paramref name="xData"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a positive value and it was a negative value in a previous call to
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="xData"/> value at a particular index and its corresponding y value are special values.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppendMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:26:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double[],System.Int32,System.Int32,System.TimeSpan,NationalInstruments.UI.PlotDateTimePrecisionMode)">
            <summary>
            Plots a subset of an array of x values against a starting y value with the specified <see cref="T:NationalInstruments.UI.PlotDateTimePrecisionMode"/>. <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)" crefType="Unqualified"/> appends the x and y values to the existing data 
            using the specified <see cref="T:System.TimeSpan"/> to increment y values.
            </summary>
            <param name="xData">
            The array of x values to append.
            </param>
            <param name="startIndex">
            The index in <paramref name="xData"/> at which the plot data begins.
            </param>
            <param name="length">
            The number of elements, beginning at <paramref name="startIndex"/> in <paramref name="xData"/>, to plot.
            </param>
            <param name="increment">
            A <see cref="T:System.TimeSpan"/> that represents the value to use to increment y values.
            </param>
            <param name="precisionMode">
            A <see cref="T:NationalInstruments.UI.PlotDateTimePrecisionMode"/> that represents the precision mode to be used when plotting the x values.
            </param>
            <remarks>
            	<para>
            This method calls 
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting y value if there is no existing data; otherwise, the 
            starting y value is determined by adding <paramref name="increment"/>
            to the last y value in the existing data.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that is 
            currently being used to plot data.
            </para>
            	<para>
            To successfully change <paramref name="increment"/> from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <example>The following example demonstrates appending a subset of an array of x values  with a y increment of 1 second and a specified PlotDateTimePrecisionMode of Default. 
            <code lang="VB.NET">
            ' Create random x data.
            Dim xData As Double() = New Double(49) {}
            Dim amp As Double = RandNumberGenerator.NextDouble() * 10
             
            For i As Integer = 0 To xData.Length - 1
                xData(i) = amp * Math.Sin(2 * i * Math.PI / xData.Length) + amp
            Next
             
            ' Set the X-Axis to display samples
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = samplesFormatString
            ' Set the Y-Axis to display time
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = timeFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotX Then
                wvfmGraph.ClearData()
            End If
            ' Plot 6 elements from the xData array beginning from the element at index 2.
            ' Increment Y values at 1 second per element, with default precision
            wvfmGraph.PlotXAppend(xData, 2, 6, TimeSpan.FromSeconds(1.0), PlotDateTimePrecisionMode.[Default])
            </code>
            </example>
            <example>
            	<code lang="C#">
            // Create random x data
            double[] xData = new double[50];
            double amp = RandNumberGenerator.NextDouble() * 10;
             
            for (int i = 0; i &lt; xData.Length; i++)
                xData[i] = amp * Math.Sin(2 * i * Math.PI / xData.Length) + amp;
             
            // Set the X-Axis to display samples
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
            // Set the Y-Axis to display time
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = timeFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotX)
                wvfmGraph.ClearData();
            // Plot 6 elements from the xData array beginning from the element at index 2.
            // Increment Y values at 1 second per element, with default precision
            wvfmGraph.PlotXAppend(xData, 2, 6, TimeSpan.FromSeconds(1d), PlotDateTimePrecisionMode.Default);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="startIndex"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="startIndex"/> is greater than or equal to the
            number of elements in <paramref name="xData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is greater than the number of elements
            from <paramref name="startIndex"/> to the end of <paramref name="xData"/>.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<paramref name="precisionMode"/> is not a valid <see cref="T:NationalInstruments.UI.PlotDateTimePrecisionMode"/> value.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a positive value and it was a negative value in a previous call to
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="xData"/> value at a particular index and its corresponding y value are special values.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotXAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppendMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:26:45 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)">
            <summary>
            Plots a single x value against the default starting y value.
            </summary>
            <param name="xData">
            The x value to plot.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value of the plot is used as
            the starting y value.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and the first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <example>The following example demonstrates plotting a single x value against the default starting y value. 
            <code lang="VB.NET">
            Dim xData As Double = RandNumberGenerator.NextDouble()
             
            ' Set the X-Axis to display samples
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = samplesFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotX Then
                wvfmGraph.ClearData()
            End If
            ' plot random y value
            wvfmGraph.PlotX(xData)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double xData = RandNumberGenerator.NextDouble();
             
            // Set the X-Axis to display samples
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotX)
                wvfmGraph.ClearData();
            // plot random y value
            wvfmGraph.PlotX(xData);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> and its corresponding y value are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:25:08 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double[])">
            <summary>
            Plots an array of x values against the default starting y value using the default increment value.
            </summary>
            <param name="xData">
            The array of x values to plot.
            </param>
            <remarks>
            	<para>
            This method calls 
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting y value. 
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement"/> value 
            of the plot is used for incrementing y values.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and
            first <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> value at a particular index and its corresponding y value are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:25:13 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double[],System.Double,System.Double)">
            <summary>
            Plots an array of x values against the specified starting y value using the specified value
            to increment y values.
            </summary>
            <param name="xData">
            The array of x values to plot.
            </param>
            <param name="start">
            The starting y value.
            </param>
            <param name="increment">
            The value to use to increment y values.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and
            first <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> value at a particular index and its corresponding y value are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:25:25 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double[],System.DateTime,System.TimeSpan)">
            <summary>
            Plots an array of x values against the specified <see cref="T:System.DateTime"/> as the starting y value using the 
            specified <see cref="T:System.TimeSpan"/> to increment y values.
            </summary>
            <param name="xData">
            The array of x values to plot.
            </param>
            <param name="start">
            A <see cref="T:System.DateTime"/> that represents the starting y value.
            </param>
            <param name="increment">
            A <see cref="T:System.TimeSpan"/> that represents the value to use to increment y values.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and
            first <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> value at a particular index and its corresponding y value are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:25:19 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Plots a subset of an array of x values against the specified starting y value using the specified value
            to increment y values.
            </summary>
            <param name="xData">
            The array of x values to plot.
            </param>
            <param name="startIndex">
            The index in <paramref name="xData"/> at which the plot data begins.
            </param>
            <param name="length">
            The number of elements, beginning at <paramref name="startIndex"/> in <paramref name="xData"/>, to plot.
            </param>
            <param name="start">
            The starting y value.
            </param>
            <param name="increment">
            The value used to increment y values.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and
            first <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <example>The following example demonstrates plotting a subset of an array of x values against a starting y value of 6.5 using a value of 1.5 to increment the y values. 
            <code lang="VB.NET">
            ' Create random x data..
            Dim xData As Double() = New Double(49) {}
            Dim amp As Double = RandNumberGenerator.NextDouble() * 10
             
            For i As Integer = 0 To xData.Length - 1
                xData(i) = amp * Math.Sin(2 * i * Math.PI / xData.Length) + amp
            Next
             
            ' Set the X-Axis to display samples.
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = samplesFormatString
            ' Set the Y-Axis to display samples.
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotX Then
                wvfmGraph.ClearData()
            End If
            ' Plot all elements of the xData array, incrementing
            ' y values 1.5 units per xData element, starting at x value 6.5.
            wvfmGraph.PlotX(xData, 0, xData.Length, 6.5, 1.5)
            </code>
            </example>
            <example>
            	<code lang="C#">
            // Create random x data.
            double[] xData = new double[50];
            double amp = RandNumberGenerator.NextDouble() * 10;
             
            for (int i = 0; i &lt; xData.Length; i++)
                xData[i] = amp * Math.Sin(2 * i * Math.PI / xData.Length) + amp;
             
            // Set the X-Axis to display samples.
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
            // Set the Y-Axis to display samples.
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotX)
                wvfmGraph.ClearData();
            // Plot all elements of the xData array, incrementing
            // y values 1.5 units per xData element, starting at x value 6.5.
            wvfmGraph.PlotX(xData, 0, xData.Length, 6.5d, 1.5d);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="startIndex"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="startIndex"/> is greater than or equal to the
            number of elements in <paramref name="xData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is greater than the number of elements
            from <paramref name="startIndex"/> to the end of <paramref name="xData"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> value at a particular index and its corresponding y value are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:25:49 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double[],System.Int32,System.Int32,System.DateTime,System.TimeSpan)">
            <summary>
            Plots a subset of an array of x values against the specified <see cref="T:System.DateTime"/> as the starting y value using the 
            specified <see cref="T:System.TimeSpan"/> to increment y values.
            </summary>
            <param name="xData">
            The array of x values to plot.
            </param>
            <param name="startIndex">
            The index in <paramref name="xData"/> at which the plot data begins.
            </param>
            <param name="length">
            The number of elements, beginning at <paramref name="startIndex"/> in <paramref name="xData"/>, to plot.
            </param>
            <param name="start">
            A <see cref="T:System.DateTime"/> that represents the starting y value.
            </param>
            <param name="increment">
            A <see cref="T:System.TimeSpan"/> that represents the value used to increment y values.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and
            first <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="startIndex"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="startIndex"/> is greater than or equal to the
            number of elements in <paramref name="xData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is greater than the number of elements
            from <paramref name="startIndex"/> to the end of <paramref name="xData"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> value at a particular index and its corresponding y value are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:25:33 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double[],System.Int32,System.Int32,System.DateTime,System.TimeSpan,NationalInstruments.UI.PlotDateTimePrecisionMode)">
            <summary>
            Plots a subset of an array of x values against the specified <see cref="T:System.DateTime"/> as the starting y value with the specified <see cref="T:NationalInstruments.UI.PlotDateTimePrecisionMode"/>. <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)" crefType="Unqualified"/> uses the 
            specified <see cref="T:System.TimeSpan"/> to increment y values.
            </summary>
            <param name="xData">
            The array of x values to plot.
            </param>
            <param name="startIndex">
            The index in <paramref name="xData"/> at which the plot data begins.
            </param>
            <param name="length">
            The number of elements, beginning at <paramref name="startIndex"/> in <paramref name="xData"/>, to plot.
            </param>
            <param name="start">
            A <see cref="T:System.DateTime"/> that represents the starting y value.
            </param>
            <param name="increment">
            A <see cref="T:System.TimeSpan"/> that represents the value to use to increment y values.
            </param>
            <param name="precisionMode">
            A <see cref="T:NationalInstruments.UI.PlotDateTimePrecisionMode"/> that represents the precision mode to use when plotting the x values.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and
            first <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <example>The following example demonstrates plotting a subset of an array of x values  against the starting y value of <see cref="P:System.DateTime.Now" crefType="PartiallyQualified"/> and the specified <see cref="F:NationalInstruments.UI.PlotDateTimePrecisionMode.Default" crefType="PartiallyQualified"/>
            value. 
            <code lang="VB.NET">
            ' Create random x data.
            Dim xData As Double() = New Double(49) {}
            Dim amp As Double = RandNumberGenerator.NextDouble() * 10
            Dim increment As TimeSpan = TimeSpan.FromSeconds(1.0)
            Dim stamp As DateTime = DateTime.Now
             
            For i As Integer = 0 To xData.Length - 1
                xData(i) = amp * Math.Sin(2 * i * Math.PI / xData.Length) + amp
            Next
             
            ' Set the x axis to display samples.
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = samplesFormatString
            ' Set the y axis to display time.
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = timeFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotX Then
                wvfmGraph.ClearData()
            End If
            ' Plot 6 elements from the xData array beginning from the element at index 2.
            ' Increment y values at 1 second per element, with default precision.
            wvfmGraph.PlotX(xData, 2, 6, stamp, increment, PlotDateTimePrecisionMode.[Default])
            </code>
            </example>
            <example>
            	<code lang="C#">
            // PlotDateTimePrecisionMode.Default value.
             
            // Create random x data.
            double[] xData = new double[50];
            double amp = RandNumberGenerator.NextDouble() * 10;
            TimeSpan increment = TimeSpan.FromSeconds(1d);
            DateTime stamp = DateTime.Now;
             
            for (int i = 0; i &lt; xData.Length; i++)
                xData[i] = amp * Math.Sin(2 * i * Math.PI / xData.Length) + amp;
             
            // Set the x axis to display samples.
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
            // Set the y axis to display time.
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = timeFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotX)
                wvfmGraph.ClearData();
            // Plot 6 elements from the xData array beginning from the element at index 2.
            // Increment y values at 1 second per element, with default precision.
            wvfmGraph.PlotX(xData, 2, 6, stamp, increment, PlotDateTimePrecisionMode.Default);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="xData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="startIndex"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="startIndex"/> is greater than or equal to the
            number of elements in <paramref name="xData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is greater than the number of elements
            from <paramref name="startIndex"/> to the end of <paramref name="xData"/>.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<paramref name="precisionMode"/> is not a valid <see cref="T:NationalInstruments.UI.PlotDateTimePrecisionMode"/> value.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="xData"/> value at a particular index and its corresponding y value are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:25:43 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppendMultiple(System.Double[0:,0:])">
            <summary>
            Plots a 2D array of y values with the default data orientation against a 
            starting x value by appending 
            it to the existing data.</summary>
            <param name="yData">
            The 2D array of y values to plot.
            </param>
            <remarks>
            	<para>
            The orientation of data in <paramref name="yData"/> is specified by 
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.DefaultDataOrientation"/>.        
            </para>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/> on  
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in 
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> using the index of rows
            or columns of <paramref name="yData"/> based on the value of <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.DefaultDataOrientation"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting x value if there is no existing data; otherwise, the 
            starting x value is determined by adding the
            <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement"/> value 
            of the plot to the last x value in the existing data. The 
            <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement"/> value of the plot
            is used for incrementing x values.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that is 
            currently being used to plot data.</para>
            	<para>
            To successfully change the increment from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            </remarks>
            <example>
            The following example demonstrates how to plot an array of x values that 
            represents a 1D double array. You can use the code to plot a single data point across
            multiple plots. This example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.WaveformGraph"/> called <format type="monospace">waveformGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim yValues As Double() = {2, 4, 6, 8, 10}
            Dim yValuesMatrix As Double(,) = CType(NationalInstruments.DataConverter.Convert(yValues, GetType(Double(,))), Double(,))
            waveformGraph1.DefaultDataOrientation = DataOrientation.DataInColumns
            waveformGraph1.PlotYAppendMultiple(yValuesMatrix)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] yValues = new double[5] { 2, 4, 6, 8, 10 };
            double[,] yValuesMatrix = (double[,]) NationalInstruments.DataConverter.Convert(yValues, typeof(double[,]));
            waveformGraph1.DefaultDataOrientation = DataOrientation.DataInColumns;
            waveformGraph1.PlotYAppendMultiple(yValuesMatrix);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="yData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            	The increment is a positive value and it was a negative value in a previous call to
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The increment is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="yData"/> value at a particular index and its corresponding x value are special values.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.DefaultDataOrientation"/>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <lastupdated>9/23/2011 2:24:51 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppendMultiple(System.Double[0:,0:],NationalInstruments.UI.DataOrientation,System.Double)">
            <summary>
            Plots a 2D array of x values with the specified orientation against a starting
            x value by appending the x and y values to the existing
            data using the specified value to increment x values.
            </summary>
            <param name="yData">
            The 2D array of y values to append.
            </param>
            <param name="orientation">
            A <see cref="T:NationalInstruments.UI.DataOrientation"/> value that specifies the orientation of
            data in <paramref name="yData"/>.
            </param>
            <param name="increment">
            The value to use to increment x values.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/> on  
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in 
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> using the index of rows 
            or columns of <paramref name="yData"/> based on the value of <paramref name="orientation"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting x value if there is no existing data; otherwise, the 
            starting x value is determined by adding 
            <paramref name="increment"/> 
            to the last x value in the existing data. 
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that is 
            currently being used to plot data.</para>
            	<para>
            To successfully change <paramref name="increment"/> from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            </remarks>
            <example>
            The following example demonstrates how to plot an array of x values that 
            represents a 1D double array. You can use the code to plot a single data point across
            multiple plots. This example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.WaveformGraph"/> called <format type="monospace">waveformGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim yValues As Double() = {2, 4, 6, 8, 10}
            Dim yValuesMatrix As Double(,) = CType(NationalInstruments.DataConverter.Convert(yValues, GetType(Double(,))), Double(,))
            waveformGraph1.PlotYAppendMultiple(yValuesMatrix, DataOrientation.DataInColumns, 1)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] yValues = new double[5] { 2, 4, 6, 8, 10 };
            double[,] yValuesMatrix = (double[,]) NationalInstruments.DataConverter.Convert(yValues, typeof(double[,]));
            waveformGraph1.PlotYAppendMultiple(yValuesMatrix), DataOrientation.DataInColumns, 1);
            </code>
            </example>
            <example>The following example demonstrates appending multiple y data sets orgainized in rows incrementing at an interval of 3.0. 
            <code lang="VB.NET">
            Dim yData As Double(,) = New Double(2, 49) {}
            Dim amp As Double
             
            ' Create sinusoidal y data
            For row As Integer = 0 To yData.GetLength(0) - 1
                amp = RandNumberGenerator.NextDouble() * 10
                For col As Integer = 0 To yData.GetLength(1) - 1
                    yData(row, col) = amp * Math.Sin(2 * col * Math.PI / yData.GetLength(0)) + amp
                Next
            Next
             
            ' Set the X-Axis to display samples
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = samplesFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotY Then
                wvfmGraph.ClearData()
            End If
            ' Plot all elements of the yData array, incrementing
            ' X values by 3 with each value.  Because there are three
            ' rows of data, specify the DataOrientation to be in rows
            wvfmGraph.PlotYAppendMultiple(yData, DataOrientation.DataInRows, 3.0)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[,] yData = new double[3, 50];
            double amp;
             
            // Create sinusoidal y data
            for (int row = 0; row &lt; yData.GetLength(0); row++)
            {
                amp = RandNumberGenerator.NextDouble() * 10;
                for (int col = 0; col &lt; yData.GetLength(1); col++)
                {
                    yData[row, col] = amp * Math.Sin(2 * col * Math.PI / yData.GetLength(0)) + amp;
                }
            }
             
            // Set the X-Axis to display samples
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotY)
                wvfmGraph.ClearData();
            // Plot all elements of the yData array, incrementing
            // X values by 3 with each value.  Because there are three
            // rows of data, specify the DataOrientation to be in rows
            wvfmGraph.PlotYAppendMultiple(yData, DataOrientation.DataInRows, 3d);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="yData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<paramref name="orientation"/> is not a valid 
            <see cref="T:NationalInstruments.UI.DataOrientation"/> value.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a positive value and it was a negative value in a previous call to
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="yData"/> value at a particular index and its corresponding x value are special values.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <lastupdated>5/9/2011 4:15:20 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppendMultiple(System.Double[0:,0:],NationalInstruments.UI.DataOrientation,System.TimeSpan)">
            <summary>
            Plots a 2D array of y values with the specified orientation against a starting
            y value by appending the x and y values to the existing
            data using the specified <see cref="T:System.TimeSpan"/> to increment x values.
            </summary>
            <param name="yData">
            The 2D array of y values to append.
            </param>
            <param name="orientation">
            A <see cref="T:NationalInstruments.UI.DataOrientation"/> value that specifies the orientation of
            data in <paramref name="yData"/>.
            </param>
            <param name="increment">
            A <see cref="T:System.TimeSpan"/> that represents the value to use to increment x values.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/> on  
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in 
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> using the index of rows 
            or columns of <paramref name="yData"/> based on the value of <paramref name="orientation"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting x value if there is no existing data; otherwise, the 
            starting x value is determined by adding 
            <paramref name="increment"/> 
            to the last x value in the existing data. 
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that is 
            currently being used to plot data.</para>
            	<para>
            To successfully change <paramref name="increment"/> from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            </remarks>
            <example>
            The following example demonstrates how to plot an array of x values that 
            represents a 1D double array. You can use the code to plot a single data point across
            multiple plots. This example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.WaveformGraph"/> called <format type="monospace">waveformGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim yValues As Double() = {2, 4, 6, 8, 10}
            Dim yValuesMatrix As Double(,) = CType(NationalInstruments.DataConverter.Convert(yValues, GetType(Double(,))), Double(,))
            waveformGraph1.PlotYAppendMultiple(yValuesMatrix, DataOrientation.DataInColumns, TimeSpan.FromSeconds(1))
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] yValues = new double[5] { 2, 4, 6, 8, 10 };
            double[,] yValuesMatrix = (double[,]) NationalInstruments.DataConverter.Convert(yValues, typeof(double[,]));
            waveformGraph1.PlotYAppendMultiple(yValuesMatrix, DataOrientation.DataInColumns, TimeSpan.FromSeconds(1));
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="yData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<paramref name="orientation"/> is not a valid 
            <see cref="T:NationalInstruments.UI.DataOrientation"/> value.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a positive value and it was a negative value in a previous call to
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="yData"/> value at a particular index and its corresponding x value are special values.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <lastupdated>5/9/2011 4:15:21 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppendMultiple(System.Double[0:,0:],NationalInstruments.UI.DataOrientation,System.TimeSpan,NationalInstruments.UI.PlotDateTimePrecisionMode)">
            <summary>
            Plots a 2D array of y values with the specified orientation against a starting
            y value with the specified <see cref="T:NationalInstruments.UI.PlotDateTimePrecisionMode"/>. <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppendMultiple(System.Double[0:,0:])" crefType="Unqualified"/> appends the x and y values to the existing
            data using the specified <see cref="T:System.TimeSpan"/> to increment x values.
            </summary>
            <param name="yData">
            The 2D array of y values to append.
            </param>
            <param name="orientation">
            A <see cref="T:NationalInstruments.UI.DataOrientation"/> value that specifies the orientation of
            data in <paramref name="yData"/>.
            </param>
            <param name="increment">
            A <see cref="T:System.TimeSpan"/> that represents the value to use to increment x values.
            </param>
            <param name="precisionMode">
            A <see cref="T:NationalInstruments.UI.PlotDateTimePrecisionMode"/> that represents the precision mode to use when plotting the y values.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/> on  
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in 
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> using the index of rows 
            or columns of <paramref name="yData"/> based on the value of <paramref name="orientation"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting x value if there is no existing data; otherwise, the 
            starting x value is determined by adding 
            <paramref name="increment"/> 
            to the last x value in the existing data. 
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that is 
            currently being used to plot data.</para>
            	<para>
            To successfully change <paramref name="increment"/> from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            </remarks>
            <example>The following example demonstrates appending multiple y data sets orgainized in columns incrementing at an interval of 2.75 seconds. 
            <code lang="VB.NET">
            Dim yData As Double(,) = New Double(49, 2) {}
            Dim amp As Double
            Dim increment As TimeSpan = TimeSpan.FromSeconds(2.75)
             
            ' Create sinusoidal y data
            For col As Integer = 0 To yData.GetLength(1) - 1
                amp = RandNumberGenerator.NextDouble() * 10
                For row As Integer = 0 To yData.GetLength(0) - 1
                    yData(row, col) = amp * Math.Sin(2 * row * Math.PI / yData.GetLength(0)) + amp
                Next
            Next
             
            ' Set the X-Axis to display time
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = timeFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotY Then
                wvfmGraph.ClearData()
            End If
            ' Plot all elements of the yData array, incrementing
            ' X values by 2.75 seconds with each value.  Because there are three
            ' columns of data, specify the DataOrientation to be in columns
            wvfmGraph.PlotYAppendMultiple(yData, DataOrientation.DataInColumns, increment, PlotDateTimePrecisionMode.[Default])
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[,] yData = new double[50, 3];
            double amp;
            TimeSpan increment = TimeSpan.FromSeconds(2.75d);
             
            // Create sinusoidal y data
            for (int col = 0; col &lt; yData.GetLength(1); col++)
            {
                amp = RandNumberGenerator.NextDouble() * 10;
                for (int row = 0; row &lt; yData.GetLength(0); row++)
                {
                    yData[row, col] = amp * Math.Sin(2 * row * Math.PI / yData.GetLength(0)) + amp;
                }
            }
             
            // Set the X-Axis to display time
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = timeFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotY)
                wvfmGraph.ClearData();
            // Plot all elements of the yData array, incrementing
            // X values by 2.75 seconds with each value.  Because there are three
            // columns of data, specify the DataOrientation to be in columns
            wvfmGraph.PlotYAppendMultiple(yData, DataOrientation.DataInColumns, increment, PlotDateTimePrecisionMode.Default);
            </code>
            </example>
            <example>
            The following example demonstrates how to plot an array of x values that 
            represents a 1D double array. You can use the code to plot a single data point across
            multiple plots. This example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.WaveformGraph"/> called <format type="monospace">waveformGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim yValues As Double() = {2, 4, 6, 8, 10}
            Dim yValuesMatrix As Double(,) = CType(NationalInstruments.DataConverter.Convert(yValues, GetType(Double(,))), Double(,))
            waveformGraph1.PlotYAppendMultiple(yValuesMatrix, DataOrientation.DataInColumns, TimeSpan.FromSeconds(1), PlotDateTimePrecisionMode.Precise)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] yValues = new double[5] { 2, 4, 6, 8, 10 };
            double[,] yValuesMatrix = (double[,]) NationalInstruments.DataConverter.Convert(yValues, typeof(double[,]));
            waveformGraph1.PlotYAppendMultiple(yValuesMatrix, DataOrientation.DataInColumns, TimeSpan.FromSeconds(1), PlotDateTimePrecisionMode.Precise);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="yData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<para><paramref name="orientation"/> is not a valid
            <see cref="T:NationalInstruments.UI.DataOrientation"/> value.
            	</para>
            	<para>
            	or
            	</para>
            	<para>
            		<paramref name="precisionMode"/> is not a valid <see cref="T:NationalInstruments.UI.PlotDateTimePrecisionMode"/> value.
            	</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a positive value and it was a negative value in a previous call to
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="yData"/> value at a particular index and its corresponding x value are special values.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <lastupdated>5/9/2011 4:15:22 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYMultiple(System.Double[0:,0:])">
            <summary>
            Plots a 2D array of y values with the default data orientation against 
            the default starting x value.
            </summary>
            <param name="yData">
            The 2D array of y values to plot.
            </param>
            <remarks>
            	<para>
            The orientation of data in <paramref name="yData"/> is specified by 
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.DefaultDataOrientation"/>.        
             </para>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/> on  
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in 
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> using the index of rows or columns
            of <paramref name="yData"/> based on the value of <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.DefaultDataOrientation"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting x value. The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement"/>
             value of the plot is used to increment the x values.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            </remarks>
            <example>
            The following example demonstrates plotting an array of y values
            represented as a 1D double array. The code can be used to plot a single data point across
            multiple plots. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.WaveformGraph"/> called <format type="monospace">waveformGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim yValues As Double() = {2, 4, 6, 8, 10}
            Dim yValuesMatrix As Double(,) = CType(NationalInstruments.DataConverter.Convert(yValues, GetType(Double(,))), Double(,))
            waveformGraph1.DefaultDataOrientation = DataOrientation.DataInColumns
            waveformGraph1.PlotYMultiple(yValuesMatrix)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] yValues = new double[5] { 2, 4, 6, 8, 10 };
            double[,] yValuesMatrix = (double[,]) NationalInstruments.DataConverter.Convert(yValues, typeof(double[,]));
            waveformGraph1.DefaultDataOrientation = DataOrientation.DataInColumns;
            waveformGraph1.PlotYMultiple(yValuesMatrix);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="yData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="yData"/> value at a particular index and its corresponding x value are special values.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.DefaultDataOrientation"/>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement"/>
            <lastupdated>6/23/2006 3:08:55 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYMultiple(System.Double[0:,0:],NationalInstruments.UI.DataOrientation,System.Double,System.Double)">
            <summary>
            Plots a 2D array of y values with the specified data orientation against 
            the specified starting x value. <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYMultiple(System.Double[0:,0:])"/>
            uses the specified value to increment x values.
            </summary>
            <param name="yData">
            The 2D array of y values to plot.
            </param>
            <param name="orientation">
            A <see cref="T:NationalInstruments.UI.DataOrientation"/> value that specifies the orientation of
            data in <paramref name="yData"/>.
            </param>
            <param name="start">
            The starting x value.
            </param>
            <param name="increment">
            The value to use to increment x values.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/> on  
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in 
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> using the index of rows 
            or columns of <paramref name="yData"/> based on the value of <paramref name="orientation"/>.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            </remarks>
            <example>
            The following example demonstrates plotting an array of y values
            represented as a 1D double array. The code can be used to plot a single data point across
            multiple plots. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.WaveformGraph"/> called <format type="monospace">waveformGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim yValues As Double() = {2, 4, 6, 8, 10}
            Dim yValuesMatrix As Double(,) = CType(NationalInstruments.DataConverter.Convert(yValues, GetType(Double(,))), Double(,))
            waveformGraph1.PlotYMultiple(yValuesMatrix, DataOrientation.DataInColumns, 1, 1)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] yValues = new double[5] { 2, 4, 6, 8, 10 };
            double[,] yValuesMatrix = (double[,]) NationalInstruments.DataConverter.Convert(yValues, typeof(double[,]));
            waveformGraph1.PlotYMultiple(yValuesMatrix, DataOrientation.DataInColumns, 1, 1);
            </code>
            </example>
            <example>The following example demonstrates plotting multiple y data sets orgainized in rows starting at an x value of 12.0 and incrementing at an interval of 3.0. 
            <code lang="VB.NET">
            Dim yData As Double(,) = New Double(2, 49) {}
            Dim amp As Double
             
            ' Create sinusoidal y data
            For row As Integer = 0 To yData.GetLength(0) - 1
                amp = RandNumberGenerator.NextDouble() * 10
                For col As Integer = 0 To yData.GetLength(1) - 1
                    yData(row, col) = amp * Math.Sin(2 * col * Math.PI / yData.GetLength(0)) + amp
                Next
            Next
             
            ' Set the X-Axis to display samples
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = samplesFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotY Then
                wvfmGraph.ClearData()
            End If
            ' Plot all elements of the yData array, incrementing
            ' X values by 3 with each value.  Because there are three
            ' rows of data, specify the DataOrientation to be in rows
            wvfmGraph.PlotYMultiple(yData, DataOrientation.DataInRows, 12.0, 3.0)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[,] yData = new double[3, 50];
            double amp;
             
            // Create sinusoidal y data
            for (int row = 0; row &lt; yData.GetLength(0); row++)
            {
                amp = RandNumberGenerator.NextDouble() * 10;
                for (int col = 0; col &lt; yData.GetLength(1); col++)
                {
                    yData[row, col] = amp * Math.Sin(2 * col * Math.PI / yData.GetLength(0)) + amp;
                }
            }
             
            // Set the X-Axis to display samples
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotY)
                wvfmGraph.ClearData();
            // Plot all elements of the yData array, incrementing
            // X values by 3 with each value.  Because there are three
            // rows of data, specify the DataOrientation to be in rows
            wvfmGraph.PlotYMultiple(yData, DataOrientation.DataInRows, 12d, 3d);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="yData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<paramref name="orientation"/> is not a valid 
            <see cref="T:NationalInstruments.UI.DataOrientation"/> value.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="yData"/> value at a particular index and its corresponding x value are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotX(System.Double[],System.Int32,System.Int32,System.Double,System.Double)"/>
            <lastupdated>10/5/2010 1:58:26 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYMultiple(System.Double[0:,0:],NationalInstruments.UI.DataOrientation,System.DateTime,System.TimeSpan)">
            <summary>
            Plots a 2D array of y values with the specified data orientation against 
            the specified <see cref="T:System.DateTime"/> as the starting x value. <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYMultiple(System.Double[0:,0:])"/>
            uses the specified <see cref="T:System.TimeSpan"/> to increment y values.
            </summary>
            <param name="yData">
            The 2D array of y values to plot.
            </param>
            <param name="orientation">
            A <see cref="T:NationalInstruments.UI.DataOrientation"/> value that specifies the orientation of
            data in <paramref name="yData"/>.
            </param>
            <param name="start">
            A <see cref="T:System.DateTime"/> that represents the starting x value.
            </param>
            <param name="increment">
            A <see cref="T:System.TimeSpan"/> that represents the value to use to increment x values.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/> on  
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in 
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> using the index of rows 
            or columns of <paramref name="yData"/> based on the value of <paramref name="orientation"/>.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            </remarks>
            <example>
            The following example demonstrates plotting an array of y values
            represented as a 1D double array. The code can be used to plot a single data point across
            multiple plots. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.WaveformGraph"/> called <format type="monospace">waveformGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim yValues As Double() = {2, 4, 6, 8, 10}
            Dim yValuesMatrix As Double(,) = CType(NationalInstruments.DataConverter.Convert(yValues, GetType(Double(,))), Double(,))
            waveformGraph1.PlotYMultiple(yValuesMatrix, DataOrientation.DataInColumns, DateTime.Now, TimeSpan.FromSeconds(1))
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] yValues = new double[5] { 2, 4, 6, 8, 10 };
            double[,] yValuesMatrix = (double[,]) NationalInstruments.DataConverter.Convert(yValues, typeof(double[,]));
            waveformGraph1.PlotYMultiple(yValuesMatrix, DataOrientation.DataInColumns, DateTime.Now, TimeSpan.FromSeconds(1));
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="yData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<paramref name="orientation"/> is not a valid 
            <see cref="T:NationalInstruments.UI.DataOrientation"/> value.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="yData"/> value at a particular index and its corresponding x value are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/>
            <lastupdated>9/15/2009 10:15:42 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYMultiple(System.Double[0:,0:],NationalInstruments.UI.DataOrientation,System.DateTime,System.TimeSpan,NationalInstruments.UI.PlotDateTimePrecisionMode)">
            <summary>
            Plots a 2D array of y values with the specified data orientation against 
            the specified <see cref="T:System.DateTime"/> as the starting x value with the specified <see cref="T:NationalInstruments.UI.PlotDateTimePrecisionMode"/>. <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYMultiple(System.Double[0:,0:])"/>
            uses the specified <see cref="T:System.TimeSpan"/> to increment y values.
            </summary>
            <param name="yData">
            The 2D array of y values to plot.
            </param>
            <param name="orientation">
            A <see cref="T:NationalInstruments.UI.DataOrientation"/> value that specifies the orientation of
            data in <paramref name="yData"/>.
            </param>
            <param name="start">
            A <see cref="T:System.DateTime"/> that represents the starting x value.
            </param>
            <param name="increment">
            A <see cref="T:System.TimeSpan"/> that represents the value to use to increment x values.
            </param>
            <param name="precisionMode">
            A <see cref="T:NationalInstruments.UI.PlotDateTimePrecisionMode"/> that represents the precision mode to use when plotting the y values.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/> on  
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in 
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> using the index of rows 
            or columns of <paramref name="yData"/> based on the value of <paramref name="orientation"/>.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            </remarks>
            <example>
            The following example demonstrates plotting an array of y values
            represented as a 1D double array. The code can be used to plot a single data point across
            multiple plots. The example assumes that a <see cref="T:NationalInstruments.UI.WindowsForms.WaveformGraph"/> called <format type="monospace">waveformGraph1</format>
            has been declared and initialized.
            <code lang="VB.NET">
            Dim yValues As Double() = {2, 4, 6, 8, 10}
            Dim yValuesMatrix As Double(,) = CType(NationalInstruments.DataConverter.Convert(yValues, GetType(Double(,))), Double(,))
            waveformGraph1.PlotYMultiple(yValuesMatrix, DataOrientation.DataInColumns, DateTime.Now, TimeSpan.FromSeconds(1), PlotDateTimePrecisionMode.Precise)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] yValues = new double[5] { 2, 4, 6, 8, 10 };
            double[,] yValuesMatrix = (double[,]) NationalInstruments.DataConverter.Convert(yValues, typeof(double[,]));
            waveformGraph1.PlotYMultiple(yValuesMatrix, DataOrientation.DataInColumns, DateTime.Now, TimeSpan.FromSeconds(1), PlotDateTimePrecisionMode.Precise);
            </code>
            </example>
            <example>The following example demonstrates plotting multiple y data sets orgainized in columns starting at an x value of <see cref="P:System.DateTime.Now" crefType="PartiallyQualified"/> and incrementing at an interval of 2.75 seconds. 
            <code lang="VB.NET">
            Dim yData As Double(,) = New Double(49, 2) {}
            Dim amp As Double
            Dim increment As TimeSpan = TimeSpan.FromSeconds(2.75)
            Dim stamp As DateTime = DateTime.Now
             
            ' Create sinusoidal y data
            For col As Integer = 0 To yData.GetLength(1) - 1
                amp = RandNumberGenerator.NextDouble() * 10
                For row As Integer = 0 To yData.GetLength(0) - 1
                    yData(row, col) = amp * Math.Sin(2 * row * Math.PI / yData.GetLength(0)) + amp
                Next
            Next
             
            ' Set the X-Axis to display time
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = timeFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotY Then
                wvfmGraph.ClearData()
            End If
            ' Plot all elements of the yData array, incrementing
            ' X values by 2.75 seconds with each value.  Because there are three
            ' columns of data, specify the DataOrientation to be in columns
            wvfmGraph.PlotYMultiple(yData, DataOrientation.DataInColumns, stamp, increment, PlotDateTimePrecisionMode.[Default])
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[,] yData = new double[50, 3];
            double amp;
            TimeSpan increment = TimeSpan.FromSeconds(2.75d);
            DateTime stamp = DateTime.Now;
             
            // Create sinusoidal y data
            for (int col = 0; col &lt; yData.GetLength(1); col++)
            {
                amp = RandNumberGenerator.NextDouble() * 10;
                for (int row = 0; row &lt; yData.GetLength(0); row++)
                {
                    yData[row, col] = amp * Math.Sin(2 * row * Math.PI / yData.GetLength(0)) + amp;
                }
            }
             
            // Set the X-Axis to display time
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = timeFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotY)
                wvfmGraph.ClearData();
            // Plot all elements of the yData array, incrementing
            // X values by 2.75 seconds with each value.  Because there are three
            // columns of data, specify the DataOrientation to be in columns
            wvfmGraph.PlotYMultiple(yData, DataOrientation.DataInColumns, stamp, increment, PlotDateTimePrecisionMode.Default);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="yData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<para>
            		<paramref name="orientation"/> is not a valid
            <see cref="T:NationalInstruments.UI.DataOrientation"/> value.
            </para>
            	<para>
            or
            </para>
            	<para>
            		<paramref name="precisionMode"/> is not a valid <see cref="T:NationalInstruments.UI.PlotDateTimePrecisionMode"/> value.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="yData"/> value at a particular index and its corresponding x value are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/>
            <lastupdated>10/5/2010 1:35:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)">
            <summary>
            Plots a single y value against a starting x value by appending the x and y values to the existing data.
            </summary>
            <param name="yData">
            The y value to append.
            </param>
            <remarks>
            	<para>
            This method calls 
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting x value if there is no existing data; otherwise, the 
            starting x value is determined by adding the
            <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement"/> value 
            of the plot to the last x value in the existing data.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that is 
            currently being used to plot data.</para>
            	<para>
            To successfully change the increment from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            	The increment is a positive value and it was a negative value in a previous call to
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The increment is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="yData"/> and its corresponding x value are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppendMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:14:41 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double,System.Double)">
            <summary>
            Plots a single y value against a starting x value by appending the x and y values to the existing data 
            using the specified value to increment x values.
            </summary>
            <param name="yData">
            The y value to append.
            </param>
            <param name="increment">
            The value to use to increment x values.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting x value if there is no existing data; otherwise, the 
            starting x value is determined by adding <paramref name="increment"/>
            to the last x value in the existing data.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that is 
            currently being used to plot data.</para>
            	<para>
            To successfully change <paramref name="increment"/> from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <example>The following example demonstrates appending a single y value with a y increment of 2.0 
            <code lang="VB.NET">
            Dim yData As Double = RandNumberGenerator.NextDouble()
             
            ' Set the X-Axis to display samples
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = samplesFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotY Then
                wvfmGraph.ClearData()
            End If
            ' plot random y value incrementing by 2
            wvfmGraph.PlotYAppend(yData, 2.0)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double yData = RandNumberGenerator.NextDouble();
             
            // Set the X-Axis to display samples
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotY)
                wvfmGraph.ClearData();
            // plot random y value incrementing by 2
            wvfmGraph.PlotYAppend(yData, 2d);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a positive value and it was a negative value in a previous call to
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="yData"/> and its corresponding x value are special values.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppendMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:23:34 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double,System.TimeSpan)">
            <summary>
            Plots a single y value against a starting x value by appending the x and y values to the existing data 
            using the specified <see cref="T:System.TimeSpan"/> to increment x values.
            </summary>
            <param name="yData">
            The y value to append.
            </param>
            <param name="increment">
            A <see cref="T:System.TimeSpan"/> that represents the value to use to increment x values.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting x value if there is no existing data; otherwise, the 
            starting x value is determined by adding <paramref name="increment"/>
            to the last x value in the existing data.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that is 
            currently being used to plot data.</para>
            	<para>
            To successfully change <paramref name="increment"/> from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <example>The following example demonstrates appending a single y value with a y increment of 2.0 seconds  
            <code lang="VB.NET">
            Dim yData As Double = RandNumberGenerator.NextDouble()
            Dim increment As TimeSpan = TimeSpan.FromSeconds(2.0)
             
            ' Set the X-Axis to display samples
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = timeFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotY Then
                wvfmGraph.ClearData()
            End If
            ' plot random y value incrementing by 2 seconds
            wvfmGraph.PlotYAppend(yData, increment)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double yData = RandNumberGenerator.NextDouble();
            TimeSpan increment = TimeSpan.FromSeconds(2d);
             
            // Set the X-Axis to display samples
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = timeFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotY)
                wvfmGraph.ClearData();
            // plot random y value incrementing by 2 seconds
            wvfmGraph.PlotYAppend(yData, increment);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a positive value and it was a negative value in a previous call to
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="yData"/> value at a particular index and its corresponding x value are special values.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppendMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:23:41 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double[])">
            <summary>
            Plots an array of y values against a starting x value by appending the x and y values to the existing data.
            </summary>
            <param name="yData">
            The y values to append.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting x value if there is no existing data; otherwise, the 
            starting x value is determined by adding the
            <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement"/> value 
            of the plot to the last x value in the existing data. The 
            <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement"/> value of the plot
            is used for incrementing x values.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that is 
            currently being used to plot data.</para>
            	<para>
            To successfully change the increment from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <example>The following example demonstrates appending an array of y values against the default starting x value using the default increment value. 
            <code lang="VB.NET">
            Dim yData As Double() = New Double(49) {}
            Dim amp As Double = RandNumberGenerator.NextDouble() * 10
             
            ' Create random y data
            For i As Integer = 0 To yData.Length - 1
                yData(i) = amp * Math.Sin(2 * i * Math.PI / yData.Length) + amp
            Next
             
            ' Set the X-Axis to display samples
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = samplesFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotY Then
                wvfmGraph.ClearData()
            End If
            ' plot random y values 
            wvfmGraph.PlotYAppend(yData)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] yData = new double[50];
            double amp = RandNumberGenerator.NextDouble() * 10;
             
            // Create random y data
            for (int i = 0; i &lt; yData.Length; i++)
                yData[i] = amp * Math.Sin(2 * i * Math.PI / yData.Length) + amp;
             
            // Set the X-Axis to display samples
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotY)
                wvfmGraph.ClearData();
            // plot random y values 
            wvfmGraph.PlotYAppend(yData);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="yData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            	The increment is a positive value and it was a negative value in a previous call to
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The increment is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="yData"/> value at a particular index and its corresponding x value are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppendMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:23:52 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double[],System.Double)">
            <summary>
            Plots an array of y values against a starting x value by appending the x and y values to the existing data 
            using the specified value to increment x values.
            </summary>
            <param name="yData">
            The y values to append.
            </param>
            <param name="increment">
            The value to use to increment x values.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting x value if there is no existing data; otherwise, the 
            starting x value is determined by adding <paramref name="increment"/>
            to the last x value in the existing data.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that is 
            currently being used to plot data.</para>
            	<para>
            To successfully change <paramref name="increment"/> from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="yData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a positive value and it was a negative value in a previous call to
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="yData"/> value at a particular index and its corresponding x value are special values.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppendMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:23:58 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double[],System.TimeSpan)">
            <summary>
            Plots an array of y values against a starting x value by appending the x and y values to the existing data 
            using the specified <see cref="T:System.TimeSpan"/> to increment x values.
            </summary>
            <param name="yData">
            The y values to append.
            </param>
            <param name="increment">
            A <see cref="T:System.TimeSpan"/> that represents the value used to increment x values.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting x value if there is no existing data; otherwise, the 
            starting x value is determined by adding <paramref name="increment"/>
            to the last x value in the existing data.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that is 
            currently being used to plot data.</para>
            	<para>
            To successfully change <paramref name="increment"/> from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="yData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a positive value and it was a negative value in a previous call to
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="yData"/> value at a particular index and its corresponding x value are special values.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppendMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:24:28 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double[],System.Int32,System.Int32,System.Double)">
            <summary>
            Plots a subset of an array of y values against a starting x value by appending the x and y values to the existing data 
            using the specified value to increment x values.
            </summary>
            <param name="yData">
            The y values to append.
            </param>
            <param name="startIndex">
            The index in <paramref name="yData"/> at which the plot data begins.
            </param>
            <param name="length">
            The number of elements, beginning at <paramref name="startIndex"/> in <paramref name="yData"/>, to plot.
            </param>
            <param name="increment">
            The value used to increment x values.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting x value if there is no existing data; otherwise, the 
            starting x value is determined by adding <paramref name="increment"/>
            to the last x value in the existing data.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that is 
            currently being used to plot data.</para>
            	<para>
            To successfully change <paramref name="increment"/> from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <example>The following example demonstrates appending a subset of an array of y  values incrementing with a value of 1.0. 
            <code lang="VB.NET">
            ' Create random y data
            Dim yData As Double() = New Double(49) {}
            Dim amp As Double = RandNumberGenerator.NextDouble() * 10
             
            For i As Integer = 0 To yData.Length - 1
                yData(i) = amp * Math.Sin(2 * i * Math.PI / yData.Length) + amp
            Next
             
            ' Set the X-Axis to display samples
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = samplesFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotY Then
                wvfmGraph.ClearData()
            End If
            'plot yData with an increment of 1.0
            wvfmGraph.PlotYAppend(yData, 0, yData.Length, 1.0)
            </code>
            </example>
            <example>
            	<code lang="C#">
            // Create random y data
            double[] yData = new double[50];
            double amp = RandNumberGenerator.NextDouble() * 10;
             
            for (int i = 0; i &lt; yData.Length; i++)
                yData[i] = amp * Math.Sin(2 * i * Math.PI / yData.Length) + amp;
             
            // Set the X-Axis to display samples
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotY)
                wvfmGraph.ClearData();
            //plot yData with an increment of 1.0
            wvfmGraph.PlotYAppend(yData, 0, yData.Length, 1d);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="yData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="startIndex"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="startIndex"/> is greater than or equal to the
            number of elements in <paramref name="yData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is greater than the number of elements
            from <paramref name="startIndex"/> to the end of <paramref name="yData"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a positive value and it was a negative value in a previous call to
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="yData"/> value at a particular index and its corresponding x value are special values.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppendMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:24:06 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double[],System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Plots a subset of an array of y values against a starting x value by appending the x and y values to 
            the existing data using the specified <see cref="T:System.TimeSpan"/> to increment x values.
            </summary>
            <param name="yData">
            The y values to append.
            </param>
            <param name="startIndex">
            The index in <paramref name="yData"/> at which the plot data begins.
            </param>
            <param name="length">
            The number of elements, beginning at <paramref name="startIndex"/> in <paramref name="yData"/>, to plot.
            </param>
            <param name="increment">
            A <see cref="T:System.TimeSpan"/> that represents the value used to increment x values.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting x value if there is no existing data; otherwise, the 
            starting x value is determined by adding <paramref name="increment"/>
            to the last x value in the existing data.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that is 
            currently being used to plot data.</para>
            	<para>
            To successfully change <paramref name="increment"/> from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="yData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="startIndex"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="startIndex"/> is greater than or equal to the
            number of elements in <paramref name="yData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is greater than the number of elements
            from <paramref name="startIndex"/> to the end of <paramref name="yData"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a positive value and it was a negative value in a previous call to
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="yData"/> value at a particular index and its corresponding x value are special values.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppendMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:24:13 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double[],System.Int32,System.Int32,System.TimeSpan,NationalInstruments.UI.PlotDateTimePrecisionMode)">
            <summary>
            Plots a subset of an array of y values against a starting x value with the specified <see cref="T:NationalInstruments.UI.PlotDateTimePrecisionMode"/>. <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)" crefType="Unqualified"/> appends the x and y values to 
            the existing data using the specified <see cref="T:System.TimeSpan"/> to increment x values.
            </summary>
            <param name="yData">
            The y values to append.
            </param>
            <param name="startIndex">
            The index in <paramref name="yData"/> at which the plot data begins.
            </param>
            <param name="length">
            The number of elements, beginning at <paramref name="startIndex"/> in <paramref name="yData"/>, to plot.
            </param>
            <param name="increment">
            A <see cref="T:System.TimeSpan"/> that represents the value to use to increment x values.
            </param>
            <param name="precisionMode">
            A <see cref="T:NationalInstruments.UI.PlotDateTimePrecisionMode"/> that represents the precision mode to use when plotting the y values.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting x value if there is no existing data; otherwise, the 
            starting x value is determined by adding <paramref name="increment"/>
            to the last x value in the existing data.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.IXYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that is 
            currently being used to plot data.</para>
            	<para>
            To successfully change <paramref name="increment"/> from a previously negative value to a positive value or 
            from a previously positive value to a negative value, call  
            <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot before changing the value. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/> of the plot to determine the polarity of
            the currently used increment.
            </para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <example>The following example demonstrates appending a subset of an array of y values with an increment of 1.0 seconds. 
            <code lang="VB.NET">
            ' Create random y data.
            Dim yData As Double() = New Double(49) {}
            Dim amp As Double = RandNumberGenerator.NextDouble() * 10
            Dim increment As TimeSpan = TimeSpan.FromSeconds(1.0)
             
            For i As Integer = 0 To yData.Length - 1
                yData(i) = amp * Math.Sin(2 * i * Math.PI / yData.Length) + amp
            Next
             
            ' Set the X-Axis to display samples.
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = timeFormatString
            ' Set the Y-Axis to display samples.
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotY Then
                wvfmGraph.ClearData()
            End If
            ' Plot yData starting at x value 4 with an increment of 1.0 
            ' seconds with the default precision mode
            wvfmGraph.PlotYAppend(yData, 0, yData.Length, increment, PlotDateTimePrecisionMode.[Default])
            </code>
            </example>
            <example>
            	<code lang="C#">
            // Create random y data
            double[] yData = new double[50];
            double amp = RandNumberGenerator.NextDouble() * 10;
            TimeSpan increment = TimeSpan.FromSeconds(1d);
             
            for (int i = 0; i &lt; yData.Length; i++)
                yData[i] = amp * Math.Sin(2 * i * Math.PI / yData.Length) + amp;
             
            // Set the X-Axis to display samples
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = timeFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotY)
                wvfmGraph.ClearData();
            // plot yData starting at x value 4 with an increment of 1.0 
            // seconds with the default precision mode
            wvfmGraph.PlotYAppend(yData, 0, yData.Length, increment, PlotDateTimePrecisionMode.Default);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="yData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="startIndex"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="startIndex"/> is greater than or equal to the
            number of elements in <paramref name="yData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is greater than the number of elements
            from <paramref name="startIndex"/> to the end of <paramref name="yData"/>.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<paramref name="precisionMode"/> is not a valid <see cref="T:NationalInstruments.UI.PlotDateTimePrecisionMode"/> value.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a positive value and it was a negative value in a previous call to
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="increment"/> is a negative value and it was a positive value in a 
            previous call to <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="yData"/> value at a particular index and its corresponding x value are special values.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotYAppend(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.Mode"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.IntervalPolarity"/>
            <seealso cref="M:NationalInstruments.UI.IGraph.ClearData"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppendMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:24:21 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)">
            <summary>
            Plots a single y value against the default starting x value.
            </summary>
            <param name="yData">
            The y value to plot.
            </param>
            <remarks>
            	<para>
            This method calls 
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value of the plot is used as
            the starting x value.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <example>The following example demonstrates plotting a single y value against the  default starting x value. 
            <code lang="VB.NET">
            Dim yData As Double = RandNumberGenerator.NextDouble()
             
            ' Set the X-Axis to display samples
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = samplesFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotY Then
                wvfmGraph.ClearData()
            End If
            ' plot random y value
            wvfmGraph.PlotY(yData)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double yData = RandNumberGenerator.NextDouble();
             
            // Set the X-Axis to display samples
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotY)
                wvfmGraph.ClearData();
            // plot random y value
            wvfmGraph.PlotY(yData);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="yData"/> and its corresponding x value are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:05:31 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double[])">
            <summary>
            Plots an array of y values against the default starting x value using the default increment value.</summary>
            <param name="yData">
            The array of y values to plot.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/> value 
            of the plot is used as the starting x value. 
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement"/> value 
            of the plot is used to increment x values.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <example>The following example demonstrates plotting an array of y values against the default starting x value using the default increment value. 
            <code lang="VB.NET">
            Dim yData As Double() = New Double(49) {}
            Dim amp As Double = RandNumberGenerator.NextDouble() * 10
             
            ' Create random y data
            For i As Integer = 0 To yData.Length - 1
                yData(i) = amp * Math.Sin(2 * i * Math.PI / yData.Length) + amp
            Next
             
            ' Set the X-Axis to display samples
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = samplesFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotY Then
                wvfmGraph.ClearData()
            End If
            ' plot random y values 
            wvfmGraph.PlotY(yData)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double[] yData = new double[50];
            double amp = RandNumberGenerator.NextDouble() * 10;
             
            // Create random y data
            for (int i = 0; i &lt; yData.Length; i++)
                yData[i] = amp * Math.Sin(2 * i * Math.PI / yData.Length) + amp;
             
            // Set the X-Axis to display samples
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotY)
                wvfmGraph.ClearData();
            // plot random y values 
            wvfmGraph.PlotY(yData);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="yData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="yData"/> value at a particular index and its corresponding x value are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultStart"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultIncrement"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:05:39 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double[],System.Double,System.Double)">
            <summary>
            Plots an array of y values against the specified starting x value using the specified value
            to increment x values.
            </summary>
            <param name="yData">
            The array of y values to plot.
            </param>
            <param name="start">
            The starting x value.
            </param>
            <param name="increment">
            The value to use to increment x values.
            </param>
            <remarks>
            	<para>
            This method calls 
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="yData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="yData"/> value at a particular index and its corresponding x value are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:05:53 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double[],System.DateTime,System.TimeSpan)">
            <summary>
            Plots an array of y values against the specified <see cref="T:System.DateTime"/> as the starting x value using the 
            specified <see cref="T:System.TimeSpan"/> to increment x values.
            </summary>
            <param name="yData">
            The array of y values to plot.
            </param>
            <param name="start">
            A <see cref="T:System.DateTime"/> that represents the starting x value.
            </param>
            <param name="increment">
            A <see cref="T:System.TimeSpan"/> that represents the value to use to increment x values.
            </param>
            <remarks>
            	<para>
            This method calls 
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="yData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="yData"/> value at a particular index and its corresponding x value are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:05:48 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double[],System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Plots a subset of an array of y values against the specified starting x value using the specified value
            to increment x values.
            </summary>
            <param name="yData">
            The array of y values to plot.
            </param>
            <param name="startIndex">
            The index in <paramref name="yData"/> at which the plot data begins.
            </param>
            <param name="length">
            The number of elements, beginning at <paramref name="startIndex"/> in <paramref name="yData"/>, to plot.
            </param>
            <param name="start">
            The starting x value.
            </param>
            <param name="increment">
            The value used to increment x values.
            </param>
            <remarks>
            	<para>
            This method calls 
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <example>The following example demonstrates plotting a subset of an array of y values starting at an x value of 4.0 and incrementing with a value of 1.0. 
            <code lang="VB.NET">
            ' Create random y data
            Dim yData As Double() = New Double(49) {}
            Dim amp As Double = RandNumberGenerator.NextDouble() * 10
             
            For i As Integer = 0 To yData.Length - 1
                yData(i) = amp * Math.Sin(2 * i * Math.PI / yData.Length) + amp
            Next
             
            ' Set the X-Axis to display samples
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = samplesFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotY Then
                wvfmGraph.ClearData()
            End If
            'plot yData starting at x value 4 with an increment of 1.0
            wvfmGraph.PlotY(yData, 0, yData.Length, 4.0, 1.0)
            </code>
            </example>
            <example>
            	<code lang="C#">
            // Create random y data
            double[] yData = new double[50];
            double amp = RandNumberGenerator.NextDouble() * 10;
             
            for (int i = 0; i &lt; yData.Length; i++)
                yData[i] = amp * Math.Sin(2 * i * Math.PI / yData.Length) + amp;
             
            // Set the X-Axis to display samples
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotY)
                wvfmGraph.ClearData();
            //plot yData starting at x value 4 with an increment of 1.0
            wvfmGraph.PlotY(yData, 0, yData.Length, 4d, 1d);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="yData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="startIndex"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="startIndex"/> is greater than or equal to the
            number of elements in <paramref name="yData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is greater than the number of elements
            from <paramref name="startIndex"/> to the end of <paramref name="yData"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="yData"/> value at a particular index and its corresponding x value are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:06:38 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double[],System.Int32,System.Int32,System.DateTime,System.TimeSpan)">
            <summary>
            Plots a subset of an array of y values against the specified <see cref="T:System.DateTime"/> as the starting x value using the 
            specified <see cref="T:System.TimeSpan"/> to increment x values.
            </summary>
            <param name="yData">
            The array of y values to plot.
            </param>
            <param name="startIndex">
            The index in <paramref name="yData"/> at which the plot data begins.
            </param>
            <param name="length">
            The number of elements, beginning at <paramref name="startIndex"/> in <paramref name="yData"/>, to plot.
            </param>
            <param name="start">
            A <see cref="T:System.DateTime"/> that represents the starting x value.
            </param>
            <param name="increment">
            A <see cref="T:System.TimeSpan"/> that represents the value used to increment x values.
            </param>
            <remarks>
            	<para>
            This method calls 
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <example>The following example demonstrates plotting a subset of an array of y values against the starting x value of <see cref="P:System.DateTime.Now" crefType="PartiallyQualified"/> and incrementing at 1.0 seconds. 
            <code lang="VB.NET">
            ' Create random y data.
            Dim yData As Double() = New Double(49) {}
            Dim amp As Double = RandNumberGenerator.NextDouble() * 10
            Dim stamp As DateTime = DateTime.Now
            Dim increment As TimeSpan = TimeSpan.FromSeconds(1.0)
             
            For i As Integer = 0 To yData.Length - 1
                yData(i) = amp * Math.Sin(2 * i * Math.PI / yData.Length) + amp
            Next
             
            ' Set the X-Axis to display samples
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = timeFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotY Then
                wvfmGraph.ClearData()
            End If
            'plot yData starting at x value 4 with an increment of 1.0
            wvfmGraph.PlotY(yData, 0, yData.Length, stamp, increment)
            </code>
            </example>
            <example>
            	<code lang="C#">
            // Create random y data
            double[] yData = new double[50];
            double amp = RandNumberGenerator.NextDouble() * 10;
            DateTime stamp = DateTime.Now;
            TimeSpan increment = TimeSpan.FromSeconds(1d);
             
            for (int i = 0; i &lt; yData.Length; i++)
                yData[i] = amp * Math.Sin(2 * i * Math.PI / yData.Length) + amp;
             
            // Set the X-Axis to display samples
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = timeFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
                        
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotY)
                wvfmGraph.ClearData();
            //plot yData starting at x value 4 with an increment of 1.0
            wvfmGraph.PlotY(yData, 0, yData.Length, stamp, increment);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="yData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="startIndex"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="startIndex"/> is greater than or equal to the
            number of elements in <paramref name="yData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is greater than the number of elements
            from <paramref name="startIndex"/> to the end of <paramref name="yData"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and <paramref name="yData"/> value at a particular index and its corresponding x value are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:06:03 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double[],System.Int32,System.Int32,System.DateTime,System.TimeSpan,NationalInstruments.UI.PlotDateTimePrecisionMode)">
            <summary>
            Plots a subset of an array of y values against the specified <see cref="T:System.DateTime"/> as the starting x value with the the specified <see cref="T:NationalInstruments.UI.PlotDateTimePrecisionMode"/>.
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/> uses the specified time span to increment x values.
            </summary>
            <param name="yData">
            The array of y values to plot.
            </param>
            <param name="startIndex">
            The index in <paramref name="yData"/> at which the plot data begins.
            </param>
            <param name="length">
            The number of elements, beginning at <paramref name="startIndex"/> in <paramref name="yData"/>, to plot.
            </param>
            <param name="start">
            A <see cref="T:System.DateTime"/> that represents the starting x value.
            </param>
            <param name="increment">
            A <see cref="T:System.TimeSpan"/> that represents the value to use to increment x values.
            </param>
            <param name="precisionMode">
            A <see cref="T:NationalInstruments.UI.PlotDateTimePrecisionMode"/> that represents the precision mode to use when plotting the y values.
            </param>
            <remarks>
            	<para>
            This method calls 
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/>
            on the plot reference.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="yData"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="startIndex"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="startIndex"/> is greater than or equal to the
            number of elements in <paramref name="yData"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is less than 0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="length"/> is greater than the number of elements
            from <paramref name="startIndex"/> to the end of <paramref name="yData"/>.
            </para>
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            	<paramref name="precisionMode"/> is not a valid <see cref="T:NationalInstruments.UI.PlotDateTimePrecisionMode"/> value.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.UI.CartesianPlot.ProcessSpecialValues"/> is <see langword="true"/>,
            and the <paramref name="yData"/> value at a particular index and its corresponding x value are special values.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotY(System.Double)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYMultiple(System.Double[0:,0:])"/>
            <lastupdated>9/23/2011 2:06:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})">
            <summary>
            Plots <see cref="T:NationalInstruments.AnalogWaveform`1"/> data using the default plot options.
            </summary>
            <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
            <param name="waveform">
            The <see cref="T:NationalInstruments.AnalogWaveform`1"/> to plot.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultWaveformPlotOptions"/> value of the 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> is used to plot the <see cref="T:NationalInstruments.AnalogWaveform`1"/>. 
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and the first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>
            on the plot reference.
            </para>
            	<note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="waveform"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultWaveformPlotOptions"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveforms``1(NationalInstruments.AnalogWaveform{``0}[])"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformsMultiple``1(NationalInstruments.AnalogWaveform{``0}[0:,0:])"/>
            <lastupdated>10/5/2010 1:57:47 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0},NationalInstruments.UI.AnalogWaveformPlotOptions)">
            <summary>
            Plots <see cref="T:NationalInstruments.AnalogWaveform`1"/> data using the specified plot options.
            </summary>
            <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
            <param name="waveform">
            The <see cref="T:NationalInstruments.AnalogWaveform`1"/> to plot.
            </param>
            <param name="options">
            The <see cref="T:NationalInstruments.UI.AnalogWaveformPlotOptions"/> that specifies whether the waveform is 
            plotted against time or against waveform sample units. This parameter
            also specifies whether the waveform data is <see cref="P:NationalInstruments.UI.AnalogWaveformPlotScaleMode.Raw"/>
            or <see cref="P:NationalInstruments.UI.AnalogWaveformPlotScaleMode.Scaled"/>.
            This parameter also specifies whether <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> or <see cref="T:NationalInstruments.WaveformTiming"/>
            is used while plotting the waveform data against time.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and the first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>
            on the plot reference.
            </para>
            	<note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <example>The following example demonstrates plotting an <see cref="T:NationalInstruments.AnalogWaveform`1"/> on a  <see cref="T:NationalInstruments.UI.WindowsForms.WaveformGraph" crefType="Unqualified"/> object. 
            <code lang="VB.NET">
            Dim waveform As AnalogWaveform(Of Double) = Nothing
            Dim plotOptions As New AnalogWaveformPlotOptions(AnalogWaveformPlotDisplayMode.Time, AnalogWaveformPlotScaleMode.Raw)
             
            GetRandomWaveformData(waveform)
             
            ' Set the X-Axis to display time
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = timeFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotWaveform Then
                wvfmGraph.ClearData()
            End If
            wvfmGraph.PlotWaveform(Of Double)(waveform, plotOptions)
            </code>
            </example>
            <example>
            	<code lang="C#">
            AnalogWaveform&lt;double&gt; waveform;
            AnalogWaveformPlotOptions plotOptions = new AnalogWaveformPlotOptions(AnalogWaveformPlotDisplayMode.Time, AnalogWaveformPlotScaleMode.Raw);
             
            GetRandomWaveformData(out waveform);
             
            // Set the X-Axis to display time
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = timeFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotWaveform)
                wvfmGraph.ClearData();
            wvfmGraph.PlotWaveform&lt;double&gt;(waveform, plotOptions);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="waveform"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="options"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveforms``1(NationalInstruments.AnalogWaveform{``0}[])"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformsMultiple``1(NationalInstruments.AnalogWaveform{``0}[0:,0:])"/>
            <lastupdated>10/6/2010 8:46:41 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})">
            <summary>
            Plots <see cref="T:NationalInstruments.AnalogWaveform`1"/> data  by 
            appending the waveform to the existing data.
            </summary>
            <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
            <param name="waveform">
            The <see cref="T:NationalInstruments.AnalogWaveform`1"/> to append.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            <see cref="T:NationalInstruments.UI.AnalogWaveformPlotOptions"/> are not  specified when appending data. The plot options that
            were used the first time data was added to the plot are used when appending the  to the plot. If the plot has no data,
            then the <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultWaveformPlotOptions"/> of the plot will be  used.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and the first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that  
            currently is used to plot data.
            </para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>
            on the plot reference.
            </para><note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <example>The following example demonstrates appending an <see cref="T:NationalInstruments.AnalogWaveform`1"/> to an  existing <see cref="T:NationalInstruments.UI.WindowsForms.WaveformGraph" crefType="Unqualified"/> plot. 
            <code lang="VB.NET">
            Dim waveform As AnalogWaveform(Of Double) = Nothing
             
            GetRandomWaveformData(waveform)
             
            ' Set the X-Axis to display time
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = timeFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotWaveform Then
                wvfmGraph.ClearData()
            End If
            Try
                wvfmGraph.PlotWaveformAppend(Of Double)(waveform)
            Catch ioe As InvalidOperationException
                wvfmGraph.ClearData()
                Debug.WriteLine(String.Format("Graph was cleared because InvalidOperationException occured.  Msg is: {0}{1}", Environment.NewLine, ioe.Message))
                wvfmGraph.PlotWaveformAppend(Of Double)(waveform)
            End Try
            </code>
            </example>
            <example>
            	<code lang="C#">
            AnalogWaveform&lt;double&gt; waveform;
             
            GetRandomWaveformData(out waveform);
             
            // Set the X-Axis to display time
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = timeFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotWaveform)
                wvfmGraph.ClearData();
            try
            {
                wvfmGraph.PlotWaveformAppend&lt;double&gt;(waveform);
            }
            catch (InvalidOperationException ioe)
            {
                wvfmGraph.ClearData();
                Debug.WriteLine(string.Format("Graph was cleared because InvalidOperationException occured.  Msg is: {0}{1}",
                    Environment.NewLine, ioe.Message));
                wvfmGraph.PlotWaveformAppend&lt;double&gt;(waveform);
            }
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="waveform"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultWaveformPlotOptions"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformsAppendMultiple``1(NationalInstruments.AnalogWaveform{``0}[0:,0:])"/>
            <lastupdated>10/5/2010 1:57:49 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveforms``1(NationalInstruments.AnalogWaveform{``0}[])">
            <summary>
            Plots a 1D array of <see cref="T:NationalInstruments.AnalogWaveform`1"/> data against the waveform sample units.
            </summary>
            <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
            <param name="waveforms">
            The 1D array of <see cref="T:NationalInstruments.AnalogWaveform`1"/> data to plot.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/> on 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultWaveformPlotOptions"/> value of the 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> is used to plot the <see cref="T:NationalInstruments.AnalogWaveform`1"/>
            on that <see cref="T:NationalInstruments.UI.WaveformPlot"/>.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and the first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="waveforms"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultWaveformPlotOptions"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformsMultiple``1(NationalInstruments.AnalogWaveform{``0}[0:,0:])"/>
            <lastupdated>10/5/2010 1:57:51 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveforms``1(NationalInstruments.AnalogWaveform{``0}[],NationalInstruments.UI.AnalogWaveformPlotOptions)">
            <summary>
            Plots a 1D array of <see cref="T:NationalInstruments.AnalogWaveform`1"/> data against the waveform sample units or against 
            time.
            </summary>
            <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
            <param name="waveforms">
            The 1D array of <see cref="T:NationalInstruments.AnalogWaveform`1"/> data to plot.
            </param>
            <param name="options">
            The <see cref="T:NationalInstruments.UI.AnalogWaveformPlotOptions"/> that specifies whether the waveform is 
            plotted against time or against waveform sample units. This parameter
            also specifies whether the waveform data is <see cref="P:NationalInstruments.UI.AnalogWaveformPlotScaleMode.Raw"/>
            or <see cref="P:NationalInstruments.UI.AnalogWaveformPlotScaleMode.Scaled"/>.
            This parameter also specifies whether <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> or <see cref="T:NationalInstruments.WaveformTiming"/>
            is used while plotting the waveform data against time.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/> on 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and the first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <example>The following example demonstrates plotting multiple <see cref="T:NationalInstruments.AnalogWaveform`1"/> to  a <see cref="T:NationalInstruments.UI.WindowsForms.WaveformGraph" crefType="Unqualified"/> object. 
            <code lang="VB.NET">
            Dim waveforms As AnalogWaveform(Of Double)() = Nothing
            Dim plotOptions As New AnalogWaveformPlotOptions(AnalogWaveformPlotDisplayMode.Time, AnalogWaveformPlotScaleMode.Raw)
             
            GetRandomWaveformData(waveforms, 3)
             
            ' Set the X-Axis to display time
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = timeFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotWaveform Then
                wvfmGraph.ClearData()
            End If
            wvfmGraph.PlotWaveforms(Of Double)(waveforms, plotOptions)
            </code>
            </example>
            <example>
            	<code lang="C#">
            AnalogWaveform&lt;double&gt;[] waveforms;
            AnalogWaveformPlotOptions plotOptions = new AnalogWaveformPlotOptions(AnalogWaveformPlotDisplayMode.Time, AnalogWaveformPlotScaleMode.Raw);
             
            GetRandomWaveformData(out waveforms, 3);
             
            // Set the X-Axis to display time
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = timeFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotWaveform)
                wvfmGraph.ClearData();
            wvfmGraph.PlotWaveforms&lt;double&gt;(waveforms, plotOptions);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="waveforms"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="options"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformsMultiple``1(NationalInstruments.AnalogWaveform{``0}[0:,0:])"/>
            <lastupdated>10/5/2010 1:57:52 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformsAppend``1(NationalInstruments.AnalogWaveform{``0}[])">
            <summary>
            Plots an array of <see cref="T:NationalInstruments.AnalogWaveform`1"/> data by appending the waveforms to the 
            existing data.
            </summary>
            <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
            <param name="waveforms">
            The array of <see cref="T:NationalInstruments.AnalogWaveform`1"/> data to append.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/> on 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            <see cref="T:NationalInstruments.UI.AnalogWaveformPlotOptions"/> are not  specified when appending data. The plot options that
            were used the first time data was added to the plot are used when appending the  to the plot. If the plot has no data,
            then the <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultWaveformPlotOptions"/> of the plot will be  used.
            </para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that  
            currently is used to plot data.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and the first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <example>The following example demonstrates appending multiple AnalogWaveforms to  existing WaveformGraph plots. 
            <code lang="VB.NET">
            Dim waveforms As AnalogWaveform(Of Double)() = Nothing
             
            GetRandomWaveformData(waveforms, 3)
             
            ' Set the X-Axis to display time
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = timeFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotWaveform Then
                wvfmGraph.ClearData()
            End If
            Try
                wvfmGraph.PlotWaveformsAppend(Of Double)(waveforms)
            Catch ioe As InvalidOperationException
                wvfmGraph.ClearData()
                Debug.WriteLine(String.Format("Graph was cleared because InvalidOperationException occured.  Msg is: {0}{1}", Environment.NewLine, ioe.Message))
                wvfmGraph.PlotWaveformsAppend(Of Double)(waveforms)
            End Try
            </code>
            </example>
            <example>
            	<code lang="C#">
            AnalogWaveform&lt;double&gt;[] waveforms;
             
            GetRandomWaveformData(out waveforms, 3);
             
            // Set the X-Axis to display time
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = timeFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotWaveform)
                wvfmGraph.ClearData();
            try
            {
                wvfmGraph.PlotWaveformsAppend&lt;double&gt;(waveforms);
            }
            catch (InvalidOperationException ioe)
            {
                wvfmGraph.ClearData();
                Debug.WriteLine(string.Format("Graph was cleared because InvalidOperationException occured.  Msg is: {0}{1}",
                    Environment.NewLine, ioe.Message));
                wvfmGraph.PlotWaveformsAppend&lt;double&gt;(waveforms);
            }
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="waveforms"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultWaveformPlotOptions"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformsAppendMultiple``1(NationalInstruments.AnalogWaveform{``0}[0:,0:])"/>
            <lastupdated>10/5/2010 1:57:53 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformsMultiple``1(NationalInstruments.AnalogWaveform{``0}[0:,0:])">
            <summary>
            Plots a 2D array of <see cref="T:NationalInstruments.AnalogWaveform`1"/> data against the waveform sample units.
            </summary>
            <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
            <param name="waveforms">
            The 2D array of <see cref="T:NationalInstruments.AnalogWaveform`1"/> data to plot.
            </param>
            <remarks>
            	<para>
            This method plots an array of  <see cref="T:NationalInstruments.AnalogWaveform`1"/> data on 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The rows of the <paramref name="waveforms"/> array represent separate plots, and the columns represent 
            <see cref="T:NationalInstruments.AnalogWaveform`1"/> data that is appended in each plot.
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultWaveformPlotOptions"/> value of the 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> is used to plot the <see cref="T:NationalInstruments.AnalogWaveform`1"/>
            on that <see cref="T:NationalInstruments.UI.WaveformPlot"/>.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and the first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="waveforms"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultWaveformPlotOptions"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveforms``1(NationalInstruments.AnalogWaveform{``0}[])"/>
            <lastupdated>10/5/2010 1:57:58 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformsMultiple``1(NationalInstruments.AnalogWaveform{``0}[0:,0:],NationalInstruments.UI.AnalogWaveformPlotOptions)">
            <summary>
            Plots a 2D array of <see cref="T:NationalInstruments.AnalogWaveform`1"/> data against the waveform sample units or against 
            time.
            </summary>
            <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
            <param name="waveforms">
            The 2D array of <see cref="T:NationalInstruments.AnalogWaveform`1"/> data to plot.
            </param>
            <param name="options">
            The <see cref="T:NationalInstruments.UI.AnalogWaveformPlotOptions"/> that specifies whether the waveform is 
            plotted against time or against waveform sample units. This parameter
            also specifies whether the waveform data is <see cref="P:NationalInstruments.UI.AnalogWaveformPlotScaleMode.Raw"/>
            or <see cref="P:NationalInstruments.UI.AnalogWaveformPlotScaleMode.Scaled"/>.
            This parameter also specifies whether <see cref="T:NationalInstruments.PrecisionWaveformTiming"/> or <see cref="T:NationalInstruments.WaveformTiming"/>
            is used while plotting the waveform data against time.
            </param>
            <remarks>
            	<para>
            This method plots an array of  <see cref="T:NationalInstruments.AnalogWaveform`1"/> data on 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The rows of the <paramref name="waveforms"/> array represent separate plots, and the columns represent 
            <see cref="T:NationalInstruments.AnalogWaveform`1"/> data that is appended in each plot.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and the first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <example>The following example demonstrates plotting multiple AnalogWaveforms to  a WaveformGraph object. 
            <code lang="VB.NET">
            Dim waveforms As AnalogWaveform(Of Double)(,) = Nothing
            Dim plotOptions As New AnalogWaveformPlotOptions(AnalogWaveformPlotDisplayMode.Time, AnalogWaveformPlotScaleMode.Raw)
             
            GetRandomWaveformData(waveforms, 2)
             
            ' Set the X-Axis to display time
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = timeFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotWaveform Then
                wvfmGraph.ClearData()
            End If
            wvfmGraph.PlotWaveformsMultiple(Of Double)(waveforms, plotOptions)
            </code>
            </example>
            <example>
            	<code lang="C#">
            AnalogWaveform&lt;double&gt;[,] waveforms;
            AnalogWaveformPlotOptions plotOptions = new AnalogWaveformPlotOptions(AnalogWaveformPlotDisplayMode.Time, AnalogWaveformPlotScaleMode.Raw);
             
            GetRandomWaveformData(out waveforms, 2);
             
            // Set the X-Axis to display time
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = timeFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotWaveform)
                wvfmGraph.ClearData();
            wvfmGraph.PlotWaveformsMultiple&lt;double&gt;(waveforms, plotOptions);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="waveforms"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="options"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveforms``1(NationalInstruments.AnalogWaveform{``0}[])"/>
            <lastupdated>10/5/2010 1:57:59 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformsAppendMultiple``1(NationalInstruments.AnalogWaveform{``0}[0:,0:])">
            <summary>
            Plots a 2D array of <see cref="T:NationalInstruments.AnalogWaveform`1"/> data by appending the waveforms against the existing data.
            </summary>
            <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
            <param name="waveforms">
            The 2D array of <see cref="T:NationalInstruments.AnalogWaveform`1"/> data to plot.
            </param>
            <remarks>
            	<para>
            This method appends an array of  <see cref="T:NationalInstruments.AnalogWaveform`1"/> data on 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The rows of the <paramref name="waveforms"/> array represent separate plots, and the columns represent 
            <see cref="T:NationalInstruments.AnalogWaveform`1"/> data that is appended in each plot.
            </para>
            	<para>
            		<see cref="T:NationalInstruments.UI.AnalogWaveformPlotOptions"/> are not  specified when appending data. The plot options that
            were used the first time data was added to the plot are used when appending the  to the plot. If the plot has no data,
            then the <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultWaveformPlotOptions"/> of the plot will be  used.
            </para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that  
            currently is used to plot data.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and the first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <example>The following example demonstrates appending multiple AnalogWaveforms to  existing WaveformGraph plots. 
            <code lang="VB.NET">
            Dim waveforms As AnalogWaveform(Of Double)(,) = Nothing
             
            GetRandomWaveformData(waveforms, 2)
             
            ' Set the X-Axis to display time
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = timeFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotWaveform Then
                wvfmGraph.ClearData()
            End If
            Try
                wvfmGraph.PlotWaveformsAppendMultiple(Of Double)(waveforms)
            Catch ioe As InvalidOperationException
                wvfmGraph.ClearData()
                Debug.WriteLine(String.Format("Graph was cleared because InvalidOperationException occured.  Msg is: {0}{1}", Environment.NewLine, ioe.Message))
                wvfmGraph.PlotWaveformsAppendMultiple(Of Double)(waveforms)
            End Try
            </code>
            </example>
            <example>
            	<code lang="C#">
            AnalogWaveform&lt;double&gt;[,] waveforms;
             
            GetRandomWaveformData(out waveforms, 2);
             
            // Set the X-Axis to display time
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = timeFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotWaveform)
                wvfmGraph.ClearData();
            try
            {
                wvfmGraph.PlotWaveformsAppendMultiple&lt;double&gt;(waveforms);
            }
            catch (InvalidOperationException ioe)
            {
                wvfmGraph.ClearData();
                Debug.WriteLine(string.Format("Graph was cleared because InvalidOperationException occured.  Msg is: {0}{1}",
                    Environment.NewLine, ioe.Message));
                wvfmGraph.PlotWaveformsAppendMultiple&lt;double&gt;(waveforms);
            }
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="waveforms"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultWaveformPlotOptions"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformsAppend``1(NationalInstruments.AnalogWaveform{``0}[])"/>
            <lastupdated>10/5/2010 1:57:57 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})">
            <summary>
            Plots <see cref="T:NationalInstruments.ComplexWaveform`1"/> data using default plot options.
            </summary>
            <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
            <param name="waveform">
            The <see cref="T:NationalInstruments.ComplexWaveform`1"/> to plot.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultComplexWaveformPlotOptions"/> value of the <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            is used to plot the <see cref="T:NationalInstruments.ComplexWaveform`1"/>. 
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and the first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>
            on the plot reference.
            </para>
            	<note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="waveform"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultComplexWaveformPlotOptions"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveforms``1(NationalInstruments.ComplexWaveform{``0}[])"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformsMultiple``1(NationalInstruments.ComplexWaveform{``0}[0:,0:])"/>
            <lastupdated>10/5/2010 1:57:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0},NationalInstruments.UI.ComplexWaveformPlotOptions)">
            <summary>
            Plots <see cref="T:NationalInstruments.ComplexWaveform`1"/> data using the specified 
            plot options.
            </summary>
            <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
            <param name="waveform">
            The <see cref="T:NationalInstruments.ComplexWaveform`1"/> to plot.
            </param>
            <param name="options">
            The <see cref="T:NationalInstruments.UI.ComplexWaveformPlotOptions"/> that specifies whether the waveform is 
            plotted against time or against waveform sample units. This parameter
            also specifies whether the waveform data is <see cref="P:NationalInstruments.UI.ComplexWaveformPlotScaleMode.Raw"/>
            or <see cref="P:NationalInstruments.UI.ComplexWaveformPlotScaleMode.Scaled"/> and specifies whether the part of complex data plotted on <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/> is <see cref="F:NationalInstruments.UI.ComplexDataPart.Real"/>,
            <see cref="F:NationalInstruments.UI.ComplexDataPart.Imaginary"/>, <see cref="F:NationalInstruments.UI.ComplexDataPart.Phase"/>, or <see cref="F:NationalInstruments.UI.ComplexDataPart.Magnitude"/>.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/> on 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and the first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <example>The following example demonstrates plotting a ComplexWaveform to  a WaveformGraph object. 
            <code lang="VB.NET">
            Dim waveform As ComplexWaveform(Of ComplexDouble) = Nothing
            Dim options As New ComplexWaveformPlotOptions(ComplexWaveformPlotDisplayMode.Time, ComplexWaveformPlotScaleMode.Raw, ComplexDataPart.Real)
             
            GetRandomComplexWaveformData(waveform)
             
            ' Set the X-Axis to display time
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = timeFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotComplexWaveform Then
                wvfmGraph.ClearData()
            End If
            wvfmGraph.PlotComplexWaveform(Of ComplexDouble)(waveform, options)
            </code>
            </example>
            <example>
            	<code lang="C#">
            ComplexWaveform&lt;ComplexDouble&gt; waveform;
            ComplexWaveformPlotOptions options = new ComplexWaveformPlotOptions(ComplexWaveformPlotDisplayMode.Time,
                                                                                ComplexWaveformPlotScaleMode.Raw,
                                                                                ComplexDataPart.Real);
             
            GetRandomComplexWaveformData(out waveform);
             
            // Set the X-Axis to display time
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = timeFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotComplexWaveform)
                wvfmGraph.ClearData();
            wvfmGraph.PlotComplexWaveform&lt;ComplexDouble&gt;(waveform, options);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="waveform"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="options"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveforms``1(NationalInstruments.ComplexWaveform{``0}[])"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformsMultiple``1(NationalInstruments.ComplexWaveform{``0}[0:,0:])"/>
            <lastupdated>10/5/2010 1:57:24 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})">
            <summary>
            Plots <see cref="T:NationalInstruments.ComplexWaveform`1"/> data  by 
            appending the waveform to the existing data.
            </summary>
            <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
            <param name="waveform">
            The <see cref="T:NationalInstruments.ComplexWaveform`1"/> to append.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/> on the first 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            <see cref="T:NationalInstruments.UI.ComplexWaveformPlotOptions"/> are not specified when appending data. The plot options that
            were used the first time data was added to the plot are used when  appending the to the plot. If the plot has no  data,
            then the <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultComplexWaveformPlotOptions"/> of the plot will be used.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and the first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that  
            currently is used to plot data.
            </para>
            	<para>
            To call <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/> on another plot in the
            <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> collection, use the indexer
            provided by <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/> to obtain a 
            reference to the plot, and then call <see cref="M:NationalInstruments.UI.WaveformPlot.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>
            on the plot reference.
            </para>
            	<note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <example>The following example demonstrates appending a ComplexWaveform to  an existing WaveformGraph plot. 
            <code lang="VB.NET">
            Dim waveform As ComplexWaveform(Of ComplexDouble) = Nothing
             
            GetRandomComplexWaveformData(waveform)
             
            ' Set the X-Axis to display time
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = timeFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotComplexWaveform Then
                wvfmGraph.ClearData()
            End If
             
            Try
                wvfmGraph.PlotComplexWaveformAppend(Of ComplexDouble)(waveform)
            Catch ioe As InvalidOperationException
                wvfmGraph.ClearData()
                Debug.WriteLine(String.Format("Graph was cleared because InvalidOperationException occured.  Msg is: {0}{1}", Environment.NewLine, ioe.Message))
                wvfmGraph.PlotComplexWaveformAppend(Of ComplexDouble)(waveform)
            End Try
            </code>
            </example>
            <example>
            	<code lang="C#">
            ComplexWaveform&lt;ComplexDouble&gt; waveform;
             
            GetRandomComplexWaveformData(out waveform);
             
            // Set the X-Axis to display time
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = timeFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotComplexWaveform)
                wvfmGraph.ClearData();
             
            try
            {
                wvfmGraph.PlotComplexWaveformAppend&lt;ComplexDouble&gt;(waveform);
            }
            catch (InvalidOperationException ioe)
            {
                wvfmGraph.ClearData();
                Debug.WriteLine(string.Format("Graph was cleared because InvalidOperationException occured.  Msg is: {0}{1}",
                    Environment.NewLine, ioe.Message));
                wvfmGraph.PlotComplexWaveformAppend&lt;ComplexDouble&gt;(waveform);
            }
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="waveform"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>.
            </para></exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultComplexWaveformPlotOptions"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformsAppend``1(NationalInstruments.ComplexWaveform{``0}[])"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformsAppendMultiple``1(NationalInstruments.ComplexWaveform{``0}[0:,0:])"/>
            <lastupdated>10/5/2010 1:57:24 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveforms``1(NationalInstruments.ComplexWaveform{``0}[])">
            <summary>
            Plots a 1D array of <see cref="T:NationalInstruments.ComplexWaveform`1"/> data using default plot options.
            </summary>
            <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
            <param name="waveforms">
            The 1D array of <see cref="T:NationalInstruments.ComplexWaveform`1"/> data to plot.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/> on <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultComplexWaveformPlotOptions"/> value of the <see cref="T:NationalInstruments.UI.WaveformPlot"/> 
            is used to plot the <see cref="T:NationalInstruments.ComplexWaveform`1"/> on that <see cref="T:NationalInstruments.UI.WaveformPlot"/>.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and the first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="waveforms"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultComplexWaveformPlotOptions"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformsMultiple``1(NationalInstruments.ComplexWaveform{``0}[0:,0:])"/>
            <lastupdated>10/5/2010 1:57:25 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveforms``1(NationalInstruments.ComplexWaveform{``0}[],NationalInstruments.UI.ComplexWaveformPlotOptions)">
            <summary>
            Plots a 1D array of <see cref="T:NationalInstruments.ComplexWaveform`1"/> data using the specified 
            plot options.
            </summary>
            <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
            <param name="waveforms">
            The 1D array of <see cref="T:NationalInstruments.ComplexWaveform`1"/> data to plot.
            </param>
            <param name="options">
            The <see cref="T:NationalInstruments.UI.ComplexWaveformPlotOptions"/> that specifies whether the waveform is 
            plotted against time or against waveform sample units. This parameter
            also specifies whether the waveform data is <see cref="P:NationalInstruments.UI.ComplexWaveformPlotScaleMode.Raw"/>
            or <see cref="P:NationalInstruments.UI.ComplexWaveformPlotScaleMode.Scaled"/> and specifies whether the part of complex data plotted on <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/> is <see cref="F:NationalInstruments.UI.ComplexDataPart.Real"/>,
            <see cref="F:NationalInstruments.UI.ComplexDataPart.Imaginary"/>, <see cref="F:NationalInstruments.UI.ComplexDataPart.Phase"/>, or <see cref="F:NationalInstruments.UI.ComplexDataPart.Magnitude"/>.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/> on 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and the first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <example>The following example demonstrates plotting multiple ComplexWaveforms to  a WaveformGraph object. 
            <code lang="VB.NET">
            Dim waveforms As ComplexWaveform(Of ComplexDouble)() = Nothing
            Dim options As New ComplexWaveformPlotOptions(ComplexWaveformPlotDisplayMode.Time, ComplexWaveformPlotScaleMode.Raw, ComplexDataPart.Real)
             
            GetRandomComplexWaveformData(waveforms, 2)
             
            ' Set the X-Axis to display time
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = timeFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotComplexWaveform Then
                wvfmGraph.ClearData()
            End If
            wvfmGraph.PlotComplexWaveforms(Of ComplexDouble)(waveforms, options)
            </code>
            </example>
            <example>
            	<code lang="C#">
            ComplexWaveform&lt;ComplexDouble&gt;[] waveforms;
            ComplexWaveformPlotOptions options = new ComplexWaveformPlotOptions(ComplexWaveformPlotDisplayMode.Time,
                                                                                ComplexWaveformPlotScaleMode.Raw,
                                                                                ComplexDataPart.Real);
             
            GetRandomComplexWaveformData(out waveforms, 2);
             
            // Set the X-Axis to display time
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = timeFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotComplexWaveform)
                wvfmGraph.ClearData();
            wvfmGraph.PlotComplexWaveforms&lt;ComplexDouble&gt;(waveforms, options);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="waveforms"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="options"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformsMultiple``1(NationalInstruments.ComplexWaveform{``0}[0:,0:])"/>
            <lastupdated>10/5/2010 1:57:40 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformsAppend``1(NationalInstruments.ComplexWaveform{``0}[])">
            <summary>
            Plots an array of <see cref="T:NationalInstruments.ComplexWaveform`1"/> data by appending the waveforms to the 
            existing data.
            </summary>
            <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
            <param name="waveforms">
            The array of <see cref="T:NationalInstruments.ComplexWaveform`1"/> data to append.
            </param>
            <remarks>
            	<para>
            This method calls
            <see cref="M:NationalInstruments.UI.WaveformPlot.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/> on 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            <see cref="T:NationalInstruments.UI.ComplexWaveformPlotOptions"/> are not specified when appending data. The plot options that
            were used the first time data was added to the plot are used when  appending the to the plot. If the plot has no  data,
            then the <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultComplexWaveformPlotOptions"/> of the plot will be used.
            </para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> to determine the category of the method that  
            currently is used to plot data.
            </para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/> on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> on the plot to determine the category of the method that  
            currently is used to plot data.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and the first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <example>The following example demonstrates appending multiple ComplexWaveforms to  existing WaveformGraph plots. 
            <code lang="VB.NET">
            Dim waveforms As ComplexWaveform(Of ComplexDouble)() = Nothing
             
            GetRandomComplexWaveformData(waveforms, 2)
             
            ' Set the X-Axis to display time
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = timeFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotComplexWaveform Then
                wvfmGraph.ClearData()
            End If
            Try
                wvfmGraph.PlotComplexWaveformsAppend(Of ComplexDouble)(waveforms)
            Catch ioe As InvalidOperationException
                wvfmGraph.ClearData()
                Debug.WriteLine(String.Format("Graph was cleared because InvalidOperationException occured.  Msg is: {0}{1}", Environment.NewLine, ioe.Message))
                wvfmGraph.PlotComplexWaveformsAppend(Of ComplexDouble)(waveforms)
            End Try
            </code>
            </example>
            <example>
            	<code lang="C#">
            ComplexWaveform&lt;ComplexDouble&gt;[] waveforms;
             
            GetRandomComplexWaveformData(out waveforms, 2);
             
            // Set the X-Axis to display time
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = timeFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotComplexWaveform)
                wvfmGraph.ClearData();
            try
            {
                wvfmGraph.PlotComplexWaveformsAppend&lt;ComplexDouble&gt;(waveforms);
            }
            catch (InvalidOperationException ioe)
            {
                wvfmGraph.ClearData();
                Debug.WriteLine(string.Format("Graph was cleared because InvalidOperationException occured.  Msg is: {0}{1}",
                    Environment.NewLine, ioe.Message));
                wvfmGraph.PlotComplexWaveformsAppend&lt;ComplexDouble&gt;(waveforms);
            }
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="waveforms"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>.
            </para></exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultComplexWaveformPlotOptions"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformsAppendMultiple``1(NationalInstruments.ComplexWaveform{``0}[0:,0:])"/>
            <lastupdated>10/5/2010 1:57:41 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformsMultiple``1(NationalInstruments.ComplexWaveform{``0}[0:,0:])">
            <summary>
            Plots a 2D array of <see cref="T:NationalInstruments.ComplexWaveform`1"/> data using default plot options.
            </summary>
            <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
            <param name="waveforms">
            The 2D array of <see cref="T:NationalInstruments.ComplexWaveform`1"/> data to plot.
            </param>
            <remarks>
            	<para>
            This method plots an array of  <see cref="T:NationalInstruments.ComplexWaveform`1"/> data on 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The rows in the <paramref name="waveforms"/> array represent separate plots, and the columns represent 
            <see cref="T:NationalInstruments.ComplexWaveform`1"/> data that is appended in each plot.
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultComplexWaveformPlotOptions"/> value of the <see cref="T:NationalInstruments.UI.WaveformPlot"/> 
            is used to plot the <see cref="T:NationalInstruments.ComplexWaveform`1"/> on that <see cref="T:NationalInstruments.UI.WaveformPlot"/>.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and the first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="waveforms"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultComplexWaveformPlotOptions"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveforms``1(NationalInstruments.ComplexWaveform{``0}[])"/>
            <lastupdated>10/5/2010 1:57:43 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformsMultiple``1(NationalInstruments.ComplexWaveform{``0}[0:,0:],NationalInstruments.UI.ComplexWaveformPlotOptions)">
            <summary>
            Plots a 2D array of <see cref="T:NationalInstruments.ComplexWaveform`1"/> data using the specified 
            plot options.
            </summary>
            <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
            <param name="waveforms">
            The 2D array of <see cref="T:NationalInstruments.ComplexWaveform`1"/> data to plot.
            </param>
            <param name="options">
            The <see cref="T:NationalInstruments.UI.ComplexWaveformPlotOptions"/> that specifies whether the waveform is 
            plotted against time or against waveform sample units. This parameter
            also specifies whether the waveform data is <see cref="P:NationalInstruments.UI.ComplexWaveformPlotScaleMode.Raw"/>
            or <see cref="P:NationalInstruments.UI.ComplexWaveformPlotScaleMode.Scaled"/> and specifies whether the part of complex data plotted on <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/> is <see cref="F:NationalInstruments.UI.ComplexDataPart.Real"/>,
            <see cref="F:NationalInstruments.UI.ComplexDataPart.Imaginary"/>, <see cref="F:NationalInstruments.UI.ComplexDataPart.Phase"/>, or <see cref="F:NationalInstruments.UI.ComplexDataPart.Magnitude"/>.</param>
            <remarks>
            	<para>
            This method plots an array of  <see cref="T:NationalInstruments.ComplexWaveform`1"/> data on 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The rows in the <paramref name="waveforms"/> array represent separate plots, and the columns represent 
            <see cref="T:NationalInstruments.ComplexWaveform`1"/> data that is appended in each plot.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and the first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.IXYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <example>The following example demonstrates plotting multiple ComplexWaveforms to  a WaveformGraph object. 
            <code lang="VB.NET">
            Dim waveforms As ComplexWaveform(Of ComplexDouble)(,) = Nothing
            Dim options As New ComplexWaveformPlotOptions(ComplexWaveformPlotDisplayMode.Time, ComplexWaveformPlotScaleMode.Raw, ComplexDataPart.Real)
             
            GetRandomComplexWaveformData(waveforms, 2)
             
            ' Set the X-Axis to display time
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = timeFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotComplexWaveform Then
                wvfmGraph.ClearData()
            End If
            wvfmGraph.PlotComplexWaveformsMultiple(Of ComplexDouble)(waveforms, options)
            </code>
            </example>
            <example>
            	<code lang="C#">
            ComplexWaveform&lt;ComplexDouble&gt;[,] waveforms;
            ComplexWaveformPlotOptions options = new ComplexWaveformPlotOptions(ComplexWaveformPlotDisplayMode.Time,
                                                                                ComplexWaveformPlotScaleMode.Raw,
                                                                                ComplexDataPart.Real);
             
            GetRandomComplexWaveformData(out waveforms, 2);
             
            // Set the X-Axis to display time
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = timeFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotComplexWaveform)
                wvfmGraph.ClearData();
            wvfmGraph.PlotComplexWaveformsMultiple&lt;ComplexDouble&gt;(waveforms, options);
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="waveforms"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="options"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveform``1(NationalInstruments.ComplexWaveform{``0})"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveforms``1(NationalInstruments.ComplexWaveform{``0}[])"/>
            <lastupdated>10/5/2010 1:57:44 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformsAppendMultiple``1(NationalInstruments.ComplexWaveform{``0}[0:,0:])">
            <summary>
            Plots a 2D array of <see cref="T:NationalInstruments.ComplexWaveform`1"/> data by appending the waveforms against the existing data.
            </summary>
            <typeparam name="TData">
            The underlying type of the waveform. 
            </typeparam>
            <param name="waveforms">
            The 2D array of <see cref="T:NationalInstruments.ComplexWaveform`1"/> data to plot.
            </param>
            <remarks>
            	<para>
            This method appends an array of  <see cref="T:NationalInstruments.ComplexWaveform`1"/> data on 
            <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>.
            The rows in the <paramref name="waveforms"/> array represent separate plots, and the columns represent 
            <see cref="T:NationalInstruments.ComplexWaveform`1"/> data that is appended in each plot.
            </para>
            	<para>
            		<see cref="T:NationalInstruments.UI.ComplexWaveformPlotOptions"/> are not specified when appending data. The plot options that
            were used the first time data was added to the plot are used when  appending the to the plot. If the plot has no  data,
            then the <see cref="P:NationalInstruments.UI.WaveformPlot.DefaultComplexWaveformPlotOptions"/> of the plot will be used.
            </para>
            	<para>
            To prevent an exception from being thrown, call <see cref="M:NationalInstruments.UI.Plot.ClearData"/>	on the plot
            after calling <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>, but before calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>. Refer to 
            <see cref="P:NationalInstruments.UI.WaveformPlot.Mode"/> to determine the category of the method that  
            currently is used to plot data.
            </para>
            	<para>
            If there are not enough plots available in <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.Plots"/>,
            additional <see cref="T:NationalInstruments.UI.WaveformPlot"/> instances are created and added to
            the collection as required. The implicitly created <see cref="T:NationalInstruments.UI.WaveformPlot"/>
            instances are associated with the first <see cref="T:NationalInstruments.UI.XAxis"/> and the first
            <see cref="T:NationalInstruments.UI.YAxis"/> in <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>, respectively. If
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> or <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            are empty, an additional <see cref="T:NationalInstruments.UI.XAxis"/> or <see cref="T:NationalInstruments.UI.YAxis"/>
            is created and added to the collection.
            	</para>
            	<note type="note">
            Refer to <see keyword="2994d786-c5c7-4666-ab23-4c83129fe39c" keywordType="msdn">Generics in the .NET Framework</see> for more information about generics.
            </note>
            </remarks>
            <example>The following example demonstrates appending multiple ComplexWaveforms to  existing WaveformGraph plots. 
            <code lang="VB.NET">
            Dim waveforms As ComplexWaveform(Of ComplexDouble)(,) = Nothing
             
            GetRandomComplexWaveformData(waveforms, 2)
             
            ' Set the X-Axis to display time
            wvfmGraph.XAxes(0).MajorDivisions.LabelFormat = timeFormatString
            ' Set the Y-Axis to display samples
            wvfmGraph.YAxes(0).MajorDivisions.LabelFormat = samplesFormatString
             
            If wvfmGraph.Plots(0).Mode &lt;&gt; WaveformPlotMode.PlotComplexWaveform Then
                wvfmGraph.ClearData()
            End If
            Try
                wvfmGraph.PlotComplexWaveformsAppendMultiple(Of ComplexDouble)(waveforms)
            Catch ioe As InvalidOperationException
                wvfmGraph.ClearData()
                Debug.WriteLine(String.Format("Graph was cleared because InvalidOperationException occured.  Msg is: {0}{1}", Environment.NewLine, ioe.Message))
                wvfmGraph.PlotComplexWaveformsAppendMultiple(Of ComplexDouble)(waveforms)
            End Try
            </code>
            </example>
            <example>
            	<code lang="C#">
            ComplexWaveform&lt;ComplexDouble&gt;[,] waveforms;
             
            GetRandomComplexWaveformData(out waveforms, 2);
             
            // Set the X-Axis to display time
            wvfmGraph.XAxes[0].MajorDivisions.LabelFormat = timeFormatString;
            // Set the Y-Axis to display samples
            wvfmGraph.YAxes[0].MajorDivisions.LabelFormat = samplesFormatString;
             
            if (wvfmGraph.Plots[0].Mode != WaveformPlotMode.PlotComplexWaveform)
                wvfmGraph.ClearData();
            try
            {
                wvfmGraph.PlotComplexWaveformsAppendMultiple&lt;ComplexDouble&gt;(waveforms);
            }
            catch (InvalidOperationException ioe)
            {
                wvfmGraph.ClearData();
                Debug.WriteLine(string.Format("Graph was cleared because InvalidOperationException occured.  Msg is: {0}{1}",
                    Environment.NewLine, ioe.Message));
                wvfmGraph.PlotComplexWaveformsAppendMultiple&lt;ComplexDouble&gt;(waveforms);
            }
            </code>
            </example>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="waveforms"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> of the plot is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/> is called after calling
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotX(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotXAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotY(System.Double)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotYAppend(System.Double)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveform``1(NationalInstruments.AnalogWaveform{``0})"/>, or
            <see cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotWaveformAppend``1(NationalInstruments.AnalogWaveform{``0})"/>.
            </para></exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is not <see langword="null"/>,
            and the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of the plot is
            different from the <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.UI.WaveformPlot.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>
            <seealso cref="P:NationalInstruments.UI.WaveformPlot.DefaultComplexWaveformPlotOptions"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformAppend``1(NationalInstruments.ComplexWaveform{``0})"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotComplexWaveformsAppend``1(NationalInstruments.ComplexWaveform{``0}[])"/>
            <lastupdated>10/5/2010 1:57:42 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.WaveformGraph.PlotLineColorGeneratorChanged">
            <summary>
            Occurs when the <see cref="P:NationalInstruments.UI.WindowsForms.ScatterGraph.PlotLineColorGenerator" crefType="Unqualified"/> property  is changed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <lastupdated>6/11/2009 6:27:10 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.WaveformGraph.UseColorGeneratorChanged">
            <summary>
            Occurs when the <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.UseColorGenerator"/> property  is changed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <lastupdated>6/11/2009 6:27:13 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingMethodChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingMethod"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingMethod"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.OnBindingMethodChanged(System.EventArgs)"/>
            <lastupdated>6/26/2003 12:37:09 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingStartChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingStart"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingStart"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.OnBindingStartChanged(System.EventArgs)"/>
            <lastupdated>6/26/2003 12:37:16 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingIncrementChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingIncrement"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingIncrement"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.OnBindingIncrementChanged(System.EventArgs)"/>
            <lastupdated>6/26/2003 12:37:00 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingDataOrientationChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingDataOrientation"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.BindingDataOrientation"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.OnBindingDataOrientationChanged(System.EventArgs)"/>
            <lastupdated>6/26/2003 12:36:54 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.WaveformGraph.DefaultDataOrientationChanged">
            <summary>
            Occurs when the value of <see cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.DefaultDataOrientation"/>
            changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.WaveformGraph.DefaultDataOrientation"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.WaveformGraph.OnDefaultDataOrientationChanged(System.EventArgs)"/>
            <lastupdated>6/26/2003 12:37:22 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.UI.WindowsForms.XYGraph">
            <summary>
            Provides an <see langword="abstract"/> base class for Measurement Studio Windows Forms graphs that plot data on a set of x and y axes.
            </summary>
            <threadsafety safety="control"/>
            <remarks>
            	<para>
            		<see cref="T:NationalInstruments.UI.WindowsForms.XYGraph"/> accepts data as a <see cref="T:System.Double"/>.
            </para>
            	<para>
            		<see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> and <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            collections allow multiple x and y axes to coexist on a single graph. You can use multiple axes to plot multiple sets of 
            data that are scaled differently from each other. The
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.XAxesChanged"/> event occurs when the 
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> collection is modified through an add, remove, insert,
            or clear operation. The <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.YAxesChanged"/> event
            occurs when the <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/> collection
            is similarly modified.
            	</para>
            	<para>
            		<see cref="T:NationalInstruments.UI.WindowsForms.XYGraph"/> raises <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.XAxisRangeChanged"/> when the
            <see cref="P:NationalInstruments.UI.Scale.Range"/> on an <see cref="T:NationalInstruments.UI.XAxis"/>,
            contained in its <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> collection, changes. Similarly,
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.YAxisRangeChanged"/> occurs when the 
             <see cref="P:NationalInstruments.UI.Scale.Range"/>
            on a <see cref="T:NationalInstruments.UI.YAxis"/>, contained in its <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            collection, changes.
            </para>
            	<para>
            Custom drawn plots are supported through the <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawPlot"/>
            and <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawPlot"/> events. 
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawPlot"/> occurs before the plot is drawn.
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawPlot"/> occurs after the plot is drawn.
            Use these events to participate in the drawing of a plot that is contained in the 
            plot collection.
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.PlotDataChanged"/> occurs when a new set of data is plotted.
            </para>
            	<para>
            Plot area cursors are supported. You can use cursors to annotate plots and the plot area.
            <see cref="T:NationalInstruments.UI.WindowsForms.XYGraph"/> accepts multiple cursors through the
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.Cursors"/> collection. 
            The <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.CursorsChanged"/> event occurs when the
            <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.Cursors"/> collection is modified through
            an add, remove, insert, or clear operation. <see cref="T:NationalInstruments.UI.WindowsForms.XYGraph"/>
            raises <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeMoveCursor"/> before an
            <see cref="T:NationalInstruments.UI.XYCursor"/> is moved and 
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterMoveCursor"/> after the cursor
            has completed moving.
            	</para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.GetPlotAt(System.Int32,System.Int32)"/> returns the plot
            at the specified location in client coordinates along with the data value and the index
            to the data value. To provide additional functionality when the end user performs interactive actions on 
            the plot using the mouse in the plot area of the graph, use 
            <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.GetPlotAt(System.Int32,System.Int32)"/> in conjunction with
            the plot area mouse events such as <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            and <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>.
            </para>
            	<note type="note">
            For more information about the XY graph control, refer to <see keyword="UsingNINETGraphWinForms" keywordType="mstudio">Using the Measurement Studio Windows Forms Graph .NET Controls</see>.
            </note>
            </remarks>
            <lastupdated>6/26/2006 2:22:54 PM</lastupdated>
            <updatedby>Staci McCormick</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.UI.WindowsForms.XYGraph"/> class.
            </summary>
            <lastupdated>7/1/2003 12:11:06 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes">
            <summary>
            Gets the collection of x axes on the graph.
            </summary>
            <value>
            An <see cref="T:NationalInstruments.UI.XAxisCollection"/> that contains the
            <see cref="T:NationalInstruments.UI.XAxis"/> objects on the graph.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:NationalInstruments.UI.XAxis"/>
            <lastupdated>9/27/2011 11:09:13 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes">
            <summary>
            Gets the collection of y axes on the graph.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.UI.YAxisCollection"/> that contains the
            <see cref="T:NationalInstruments.UI.YAxis"/> objects on the graph.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:NationalInstruments.UI.YAxis"/>
            <lastupdated>9/27/2011 11:09:21 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.XYGraph.Cursors">
            <summary>
            Gets the collection of plot area cursors on the graph.
            </summary>
            <value>
            An <see cref="T:NationalInstruments.UI.XYCursorCollection"/> that contains the
            <see cref="T:NationalInstruments.UI.XYCursor"/> objects on the graph.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:NationalInstruments.UI.XYCursor"/>
            <lastupdated>9/27/2011 11:09:06 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.UI.WindowsForms.XYGraph.Annotations">
            <summary>
            Gets the collection of annotations on the graph.
            </summary>
            <value>
            An <see cref="T:NationalInstruments.UI.XYAnnotationCollection"/> that contains the
            <see cref="T:NationalInstruments.UI.XYAnnotation"/> objects on the graph.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="T:NationalInstruments.UI.XYAnnotation"/>
            <lastupdated>9/27/2011 11:09:00 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.UI.WindowsForms.XYGraph"/> 
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.UI.WindowsForms.XYGraph"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            </remarks>
            <seealso cref="M:System.IDisposable.Dispose"/>
            <seealso cref="T:System.IDisposable"/>
            <lastupdated>7/1/2003 12:07:11 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.ZoomAroundPoint(System.Single,NationalInstruments.UI.XYPlot,System.Double,System.Double)">
            <summary>
            Zooms around the specified data point with the specified zoom factor and reference plot.
            </summary>
            <param name="zoomFactor">
            The percentage to zoom by.
            </param>
            <param name="referencePlot">
            An <see cref="T:NationalInstruments.UI.XYPlot"/> to use as the context for <paramref name="xData"/>
            and <paramref name="yData"/>.
            </param>
            <param name="xData">
            The x data value to zoom around.
            </param>
            <param name="yData">
            The y data value to zoom around.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            The <paramref name="zoomFactor"/> is less than or equal to 0.0.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="zoomFactor"/> is <see cref="F:System.Single.NaN"/>,
            <see cref="F:System.Single.NegativeInfinity"/>, or
            <see cref="F:System.Single.PositiveInfinity"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="referencePlot"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:NationalInstruments.UI.WindowsForms.XYGraph"/> is not the
            <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <paramref name="referencePlot"/>.
            </exception>
            <remarks>
             A <paramref name="zoomFactor"/>
            value less than 1.0 indicates a zoom out, and a value greater than 1.0 indicates a zoom in. For example, a <paramref name="zoomFactor"/>
            value of 0.8 zooms out by 80%, and a value of 1.5 zooms in by 150%. If <paramref name="zoomFactor"/> is set to 1.0, the plot
            area is not zoomed because a value of 1.0 zooms by 100% of the view.
            	<para>
            The <paramref name="xData"/> and <paramref name="yData"/> values are 
            mapped to client coordinates using the <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> and 
            <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> properties, respectively, of <paramref name="referencePlot"/>.
            <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> and <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> act 
            as the scale for mapping. The client coordinates are mapped to virtual coordinates using 
            <see cref="M:NationalInstruments.UI.WindowsForms.Graph.PointToVirtual(System.Drawing.Point)"/>. The virtual coordinates are used to call 
            <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.ZoomAroundPoint(System.Single,NationalInstruments.UI.XYPlot,System.Double,System.Double)"/>.
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.ZoomAroundPoint(System.Single,NationalInstruments.UI.XYPlot,System.Double,System.Double)"/> determines if
            an animated visual cue is drawn based on the value of 
            <see cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/>.
            </para>
            	<para>
            Calling <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.ZoomAroundPoint(System.Single,NationalInstruments.UI.XYPlot,System.Double,System.Double)"/> raises the
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.Zoom"/> event with 
            <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> set to 
            <see cref="F:NationalInstruments.UI.Action.Programmatic"/>.
            </para>
            	<para>
            Refer to <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/> for
            information about zooming interactively.
            </para>
            </remarks>
            <example>The following example demonstrates zooming in by 125% around a point  on an <see cref="T:NationalInstruments.UI.WindowsForms.XYGraph" crefType="Unqualified"/> object.  The point to zoom around is determined  by handling the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown" crefType="Unqualified"/> event. 
            <code lang="VB.NET">
            Public Sub XYGraph_PlotAreaMouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
                Dim virtualPoint As PointF
                Dim xPos As Double, yPos As Double
                Dim rangeMin As Double, rangeMax As Double
                Dim zoomFactor As Single = 1.25F
             
                ' only zoom in when the left mouse button is clicked
                If e.Button = MouseButtons.Left Then
                    ' get the virtual position of the mouse click so that we can 
                    ' map to data coordinates on the graph.
                    virtualPoint = xyGraph.PointToVirtual(e.Location)
             
                    rangeMin = xyGraph.XAxes(0).Range.Minimum
                    rangeMax = xyGraph.XAxes(0).Range.Maximum
                    xPos = (rangeMax - rangeMin) * virtualPoint.X + rangeMin
             
                    rangeMin = xyGraph.YAxes(0).Range.Minimum
                    rangeMax = xyGraph.YAxes(0).Range.Maximum
                    yPos = (rangeMax - rangeMin) * virtualPoint.Y + rangeMin
             
                    xyGraph.ZoomAroundPoint(zoomFactor, xyPlot, xPos, yPos)
                End If
            End Sub
            </code>
            </example>
            <example>
            	<code lang="C#">
            public void XYGraph_PlotAreaMouseDown(object sender, MouseEventArgs e)
            {
                PointF virtualPoint;
                double xPos, yPos;
                double rangeMin, rangeMax;
                float zoomFactor = 1.25f;
             
                // only zoom in when the left mouse button is clicked
                if (e.Button == MouseButtons.Left)
                {
                    // get the virtual position of the mouse click so that we can 
                    // map to data coordinates on the graph.
                    virtualPoint = xyGraph.PointToVirtual(e.Location);
             
                    rangeMin = xyGraph.XAxes[0].Range.Minimum;
                    rangeMax = xyGraph.XAxes[0].Range.Maximum;
                    xPos = (rangeMax - rangeMin) * virtualPoint.X + rangeMin;
             
                    rangeMin = xyGraph.YAxes[0].Range.Minimum;
                    rangeMax = xyGraph.YAxes[0].Range.Maximum;
                    yPos = (rangeMax - rangeMin) * virtualPoint.Y + rangeMin;
             
                    xyGraph.ZoomAroundPoint(zoomFactor, xyPlot, xPos, yPos);
                }
            }
            </code>
            </example>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomFactor"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.ZoomXY(NationalInstruments.UI.XYPlot,System.Double,System.Double,System.Double,System.Double)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.UndoZoomPan"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ResetZoomPan"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.PointToVirtual(System.Drawing.Point)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.Zoom"/>
            <lastupdated>10/16/2010 4:22:09 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.ZoomXY(NationalInstruments.UI.XYPlot,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Zooms to the region of the plot area specified by the x location, y location, region width, region height, and
            reference plot.
            </summary>
            <param name="referencePlot">
            An <see cref="T:NationalInstruments.UI.XYPlot"/> to use as the context for <paramref name="xData"/>,
            <paramref name="yData"/>, <paramref name="width"/>, and <paramref name="height"/>.
            </param>
            <param name="xData">
            The x data value of the corner of the plot area region to zoom.
            </param>
            <param name="yData">
            The y data value of the corner of the plot area region to zoom.
            </param>
            <param name="width">
            The width in data units of the plot area region to zoom.
            </param>
            <param name="height">
            The height in data units of the plot area region to zoom.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="referencePlot"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<see cref="T:NationalInstruments.UI.WindowsForms.XYGraph"/> is not the
            <see cref="P:NationalInstruments.UI.ControlEntity.Owner"/> of <paramref name="referencePlot"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="xData"/>, <paramref name="yData"/>, <paramref name="width"/> or <paramref name="height"/> is
            <see cref="F:System.Single.NaN"/>,
            <see cref="F:System.Single.NegativeInfinity"/>, or
            <see cref="F:System.Single.PositiveInfinity"/>.
            </para>
            </exception>
            <remarks>
            	<para>
            The <paramref name="xData"/> is the left edge
            of the selection if the x-axis associated with <paramref name="referencePlot"/> is not
            inverted. Otherwise, <paramref name="xData"/> is the right edge of the selection. Similarly,
            <paramref name="yData"/> is the bottom edge of the selection if the y-axis associated with
            <paramref name="referencePlot"/> is not inverted. Otherwise, <paramref name="yData"/> is the 
            top edge of the selection.
            </para>
            	<para>
            The <paramref name="xData"/> and <paramref name="yData"/> values are 
            mapped to client coordinates using the <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> and 
            <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> properties, respectively, of <paramref name="referencePlot"/>.
            <see cref="P:NationalInstruments.UI.XYPlot.XAxis"/> and <see cref="P:NationalInstruments.UI.XYPlot.YAxis"/> act 
            as the scale for mapping. The client coordinates are mapped to virtual coordinates using 
            <see cref="M:NationalInstruments.UI.WindowsForms.Graph.RectangleToVirtual(System.Drawing.Rectangle)"/>. Use the virtual coordinates to call 
            <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.ZoomXY(NationalInstruments.UI.XYPlot,System.Double,System.Double,System.Double,System.Double)"/>.
            </para>
            	<para>
            		<see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.ZoomXY(NationalInstruments.UI.XYPlot,System.Double,System.Double,System.Double,System.Double)"/> determines if
            an animated visual cue is drawn based on the value of 
            <see cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/>.
            </para>
            	<para>
            Calling <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.ZoomXY(NationalInstruments.UI.XYPlot,System.Double,System.Double,System.Double,System.Double)"/> raises the
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.Zoom"/> event with 
            <see cref="P:NationalInstruments.UI.ActionEventArgs.Action"/> set to 
            <see cref="F:NationalInstruments.UI.Action.Programmatic"/>.
            </para>
            	<para>
            Refer to <see cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/> for
            information about zooming interactively.
            </para>
            </remarks>
            <example>The following example demonstrates zooming to a specifically sized rectangle on an <see cref="T:NationalInstruments.UI.WindowsForms.XYGraph" crefType="Unqualified"/> plot. 
            <code lang="VB.NET">
            Dim leftXPoint As Double = 2.0
            Dim bottomYPoint As Double = 3.0
            Dim height As Double = 2.0
            Dim width As Double = 3.0
             
            xyGraph.ZoomXY(xyPlot, leftXPoint, bottomYPoint, width, height)
            </code>
            </example>
            <example>
            	<code lang="C#">
            double leftXPoint = 2d;
            double bottomYPoint = 3d;
            double height = 2d;
            double width = 3d;
                        
            xyGraph.ZoomXY(xyPlot, leftXPoint, bottomYPoint, width, height);
            </code>
            </example>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ZoomAroundPoint(System.Single)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.UndoZoomPan"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.ResetZoomPan"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.Graph.RectangleToVirtual(System.Drawing.Rectangle)"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.ZoomAnimation"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.Zoom"/>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.Graph.InteractionMode"/>
            <lastupdated>10/5/2010 1:56:10 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.HitTest(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:NationalInstruments.UI.XYGraphHitTestInfo"/> that specifies
            where on the control the specified point is located.
            </summary>
            <param name="x">
            The horizontal location of the point to be hit-tested, in client coordinates.
            </param>
            <param name="y">
            The vertical location of the point to be hit-tested, in client coordinates.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.UI.XYGraphHitTestInfo"/> that specifies where on
            the control the <paramref name="x"/> and <paramref name="y"/> coordinate is located.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            When hit-testing a coordinate inside the plot area of the graph, 
            <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.HitTest(System.Int32,System.Int32)"/> respects the
            z-order of objects within the plot area. If a cursor, plot, and annotation
            overlap at a particular coordinate, <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.HitTest(System.Int32,System.Int32)"/>
            will test for cursor, plot, and annotation in that order.
            <para>
            		If <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.HitTest(System.Int32,System.Int32)"/> indicates an object exists, you can use 
            <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.GetCursorAt(System.Int32,System.Int32)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.GetPlotAt(System.Int32,System.Int32)"/>, 
            <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.GetAnnotationAt(System.Int32,System.Int32)"/>,
            <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.GetXAxisAt(System.Int32,System.Int32)"/>,
            and <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.GetYAxisAt(System.Int32,System.Int32)"/> to obtain
            a reference to the object.
            </para>
            </remarks>
            <example>The following example demonstrates using the <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/> method to determine where a user clicked on an <see cref="T:NationalInstruments.UI.WindowsForms.XYGraph" crefType="Unqualified"/> object. 
            <code lang="VB.NET">
            Public Sub XYGraph_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
                Dim hitTestRegion As XYGraphHitTestInfo
                Dim plot As XYPlot
                Dim index As Integer
                Dim randomColor As Color = Color.FromArgb(RandNumberGenerator.[Next](255), RandNumberGenerator.[Next](255), RandNumberGenerator.[Next](255))
             
                hitTestRegion = xyGraph.HitTest(e.X, e.Y)
                Select Case hitTestRegion
                    Case XYGraphHitTestInfo.Annotation
                        Dim annot As XYPointAnnotation = TryCast(xyGraph.GetAnnotationAt(e.X, e.Y), XYPointAnnotation)
                        annot.ShapeFillColor = randomColor
                        Debug.WriteLine("Annotation selected")
                        Debug.WriteLine(String.Format("Annotation X position: {0}, Annotation Y position {1}", annot.XPosition.ToString(), annot.YPosition.ToString()))
                        Exit Select
                    Case XYGraphHitTestInfo.Cursor
                        Dim cursor As XYCursor = xyGraph.GetCursorAt(e.X, e.Y)
                        cursor.Color = randomColor
                        Debug.WriteLine("Cursor selected")
                        Debug.WriteLine(String.Format("Cursor X position: {0}, Cursor Y position: {1}", cursor.XPosition.ToString(), cursor.YPosition.ToString()))
                        Exit Select
                    Case XYGraphHitTestInfo.ErrorBand
                        Dim xVal As Double, yVal As Double, xErrData As Double, yErrData As Double
                        Dim xErrString As String, yErrString As String
             
                        plot = xyGraph.GetErrorBandAt(e.X, e.Y, xErrData, yErrData, index)
                        plot.LineColor = randomColor
                        xVal = CDbl(plot.GetXData().GetValue(index))
                        yVal = CDbl(plot.GetYData().GetValue(index))
             
                        If xErrData &gt; xVal Then
                            xErrString = "upper bound is " &amp; xErrData.ToString(CultureInfo.CurrentCulture)
                        ElseIf xErrData &lt; xVal Then
                            xErrString = "lower bound is " &amp; xErrData.ToString(CultureInfo.CurrentCulture)
                        Else
                            xErrString = "is not set"
                        End If
             
                        If yErrData &gt; yVal Then
                            yErrString = "upper bound is " &amp; yErrData.ToString(CultureInfo.CurrentCulture)
                        ElseIf yErrData &lt; yVal Then
                            yErrString = "lower bound is " &amp; yErrData.ToString(CultureInfo.CurrentCulture)
                        Else
                            yErrString = "is not set"
                        End If
             
                        Debug.WriteLine(String.Format("The x error data {0}{1}The y error data {2}", xErrString, Environment.NewLine, yErrString))
                        Exit Select
                    Case XYGraphHitTestInfo.Plot
                        Dim xData As Double, yData As Double
             
                        plot = xyGraph.GetPlotAt(e.X, e.Y, xData, yData, index)
                        plot.LineColor = randomColor
                        Debug.WriteLine(String.Format("Data point {0} is located at ({1}, {2})", index, xData, yData))
                        Exit Select
                    Case XYGraphHitTestInfo.PlotArea
                        Debug.WriteLine("Plot area was clicked")
                        Exit Select
                    Case XYGraphHitTestInfo.XAxis
                        Dim xAxis As XAxis = xyGraph.GetXAxisAt(e.X, e.Y)
                        xAxis.CaptionBackColor = randomColor
                        Debug.WriteLine("XAxis Selected")
                        Debug.WriteLine(String.Format("X-Axis range minimum: {0}, X-Axis range maximum: {1}", xAxis.Range.Minimum, xAxis.Range.Maximum))
                        Exit Select
                    Case XYGraphHitTestInfo.YAxis
                        Dim yAxis As YAxis = xyGraph.GetYAxisAt(e.X, e.Y)
                        yAxis.CaptionBackColor = randomColor
                        Debug.WriteLine("Y-Axis was clicked")
                        Debug.WriteLine(String.Format("Y-Axis range minimum: {0}, Y-Axis range maximum: {1}", yAxis.Range.Minimum, yAxis.Range.Maximum))
                        Exit Select
                    Case XYGraphHitTestInfo.None
                        Debug.WriteLine("Unknown graph area was clicked")
                        Exit Select
                End Select
            End Sub
            </code>
            </example>
            <example>The following example demonstrates using the HitTest method to determine where a user clicked on a XYGraph object. 
            <code lang="C#">
            public void XYGraph_MouseDown(object sender, MouseEventArgs e)
            {
                XYGraphHitTestInfo hitTestRegion;
                XYPlot plot;
                int index;
                Color randomColor = Color.FromArgb(RandNumberGenerator.Next(255),
                                                    RandNumberGenerator.Next(255),
                                                    RandNumberGenerator.Next(255));
             
                hitTestRegion = xyGraph.HitTest(e.X, e.Y);
                switch (hitTestRegion)
                {
                    case XYGraphHitTestInfo.Annotation:
                        XYPointAnnotation annot = xyGraph.GetAnnotationAt(e.X, e.Y) as XYPointAnnotation;
                        annot.ShapeFillColor = randomColor;
                        Debug.WriteLine("Annotation selected");
                        Debug.WriteLine(string.Format("Annotation X position: {0}, Annotation Y position {1}",
                                                    annot.XPosition.ToString(), annot.YPosition.ToString()));
                        break;
                    case XYGraphHitTestInfo.Cursor:
                        XYCursor cursor = xyGraph.GetCursorAt(e.X, e.Y);
                        cursor.Color = randomColor;
                        Debug.WriteLine("Cursor selected");
                        Debug.WriteLine(string.Format("Cursor X position: {0}, Cursor Y position: {1}",
                                                    cursor.XPosition.ToString(), cursor.YPosition.ToString()));
                        break;
                    case XYGraphHitTestInfo.ErrorBand:
                        double xVal, yVal, xErrData, yErrData;
                        string xErrString, yErrString;
                        
                        plot = xyGraph.GetErrorBandAt(e.X, e.Y, out xErrData, out yErrData, out index);
                        plot.LineColor = randomColor;
                        xVal = (double)plot.GetXData().GetValue(index);
                        yVal = (double)plot.GetYData().GetValue(index);
             
                        if (xErrData &gt; xVal)
                            xErrString = "upper bound is " + xErrData.ToString(CultureInfo.CurrentCulture);
                        else if (xErrData &lt; xVal)
                            xErrString = "lower bound is " + xErrData.ToString(CultureInfo.CurrentCulture);
                        else
                            xErrString = "is not set";
             
                        if (yErrData &gt; yVal)
                            yErrString = "upper bound is " + yErrData.ToString(CultureInfo.CurrentCulture);
                        else if (yErrData &lt; yVal)
                            yErrString = "lower bound is " + yErrData.ToString(CultureInfo.CurrentCulture);
                        else
                            yErrString = "is not set";
             
                        Debug.WriteLine(string.Format("The x error data {0}{1}The y error data {2}",
                                                        xErrString, Environment.NewLine, yErrString));
                        break;
                    case XYGraphHitTestInfo.Plot:
                        double xData, yData;
             
                        plot = xyGraph.GetPlotAt(e.X, e.Y, out xData, out yData, out index);
                        plot.LineColor = randomColor;
                        Debug.WriteLine(string.Format("Data point {0} is located at ({1}, {2})", index, xData, yData));
                        break;
                    case XYGraphHitTestInfo.PlotArea:
                        Debug.WriteLine("Plot area was clicked");
                        break;
                    case XYGraphHitTestInfo.XAxis:
                        XAxis xAxis = xyGraph.GetXAxisAt(e.X, e.Y);
                        xAxis.CaptionBackColor = randomColor;
                        Debug.WriteLine("XAxis Selected");
                        Debug.WriteLine(string.Format("X-Axis range minimum: {0}, X-Axis range maximum: {1}",
                            xAxis.Range.Minimum, xAxis.Range.Maximum));
                        break;
                    case XYGraphHitTestInfo.YAxis:
                        YAxis yAxis = xyGraph.GetYAxisAt(e.X, e.Y);
                        yAxis.CaptionBackColor = randomColor;
                        Debug.WriteLine("Y-Axis was clicked");
                        Debug.WriteLine(string.Format("Y-Axis range minimum: {0}, Y-Axis range maximum: {1}",
                            yAxis.Range.Minimum, yAxis.Range.Maximum));
                        break;
                    case XYGraphHitTestInfo.None:
                        Debug.WriteLine("Unknown graph area was clicked");
                        break;
                }
            }
            </code>
            </example>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.GetAnnotationAt(System.Int32,System.Int32)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.GetCursorAt(System.Int32,System.Int32)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.GetPlotAt(System.Int32,System.Int32)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.GetXAxisAt(System.Int32,System.Int32)"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.GetYAxisAt(System.Int32,System.Int32)"/>
            <lastupdated>10/5/2010 1:54:18 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.GetCursorAt(System.Int32,System.Int32)">
            <summary>
            Gets the cursor at the specified location.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for a cursor.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for a cursor.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.XYCursor"/> at the specified location. If 
            there is no cursor at the specified location, the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            <para>
            For an example of <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.GetCursorAt(System.Int32,System.Int32)" crefType="Unqualified"/>, refer to <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/>.
            </para>
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>10/3/2010 6:27:33 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.GetAnnotationAt(System.Int32,System.Int32)">
            <summary>
            Gets the annotation at the specified location.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for an annotation.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for an annotation.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.XYAnnotation"/> at the specified location. If 
            there is no annotation at the specified location, the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            <para>
            For an example of <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.GetAnnotationAt(System.Int32,System.Int32)" crefType="Unqualified"/>, refer to <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/>.
            </para>
            	<note type="note">
            The arrow of the annotation is not used to determine if an annotation is located at the specified coordinates.
            </note>
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>10/3/2010 6:27:06 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.GetPlotAt(System.Int32,System.Int32)">
            <summary>
            Gets the plot at the specified location.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for a plot.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for a plot.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.XYPlot"/> at the specified location. If 
            there is no plot at the specified location, the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>7/28/2006 4:38:28 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.GetPlotAt(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets the plot at the specified location along with the index to the corresponding 
            x and y data value.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for a plot.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for a plot.
            </param>
            <param name="index">
            Upon return, contains the index to the data value at the specified location.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.XYPlot"/> at the specified location. If 
            there is no plot at the specified location, <paramref name="index"/> is set to 
            <entity value="ndash"/>1, and the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>7/28/2006 4:39:26 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.GetPlotAt(System.Int32,System.Int32,System.Double@,System.Double@)">
            <summary>
            Gets the plot at the specified location along with the corresponding x and y 
            data value.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for a plot.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for a plot.
            </param>
            <param name="xData">
            Upon return, contains the x data value at the specified location.
            </param>
            <param name="yData">
            Upon return, contains the y data value at the specified location.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.XYPlot"/> at the specified location. If 
            there is no plot at the specified location, <paramref name="xData"/> and
            <paramref name="yData"/> are set to <see cref="F:System.Double.NaN"/>, and the method 
            returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            <para>
            For an example of <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.GetPlotAt(System.Int32,System.Int32)" crefType="Unqualified"/>, refer to <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/>.
            </para>
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>10/3/2010 6:30:47 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.GetPlotAt(System.Int32,System.Int32,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Gets the plot at the specified location along with the corresponding x and y 
            data value and the index to the x and y data value.
            </summary>
            <param name="x">
            The x-coordinate of the location in client coordinates to search for a plot.
            </param>
            <param name="y">
            The y-coordinate of the location in client coordinates to search for a plot.
            </param>
            <param name="xData">
            Upon return, contains the x data value at the specified location.
            </param>
            <param name="yData">
            Upon return, contains the y data value at the specified location.
            </param>
            <param name="index">
            Upon return, contains the index to the data value at the specified location.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.XYPlot"/> at the specified location. If 
            there is no plot at the specified location, <paramref name="xData"/> and
            <paramref name="yData"/> are set to <see cref="F:System.Double.NaN"/>, 
            <paramref name="index"/> is set to <entity value="ndash"/>1, and the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>7/28/2006 4:39:07 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.GetErrorBandAt(System.Int32,System.Int32)">
            <summary>
            Gets the plot associated with the error point at the specified location.
            </summary>
            <param name="x">
            The x-coordinate of the location in client coordinates to search for an error point.
            </param>
            <param name="y">
            The y-coordinate of the location in client coordinates to search for an error point.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.XYPlot"/> of the error point at the specified location. 
            If there is no error point at the specified location, 
            the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>7/28/2006 4:36:25 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.GetErrorBandAt(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets the plot associated with the error point at the specified location along with 
            the index of the error value.
            </summary>
            <param name="x">
            The x-coordinate of the location in client coordinates to search for an error point.
            </param>
            <param name="y">
            The y-coordinate of the location in client coordinates to search for an error point.
            </param>
            <param name="index">
            Upon return, contains the index to the error data value at the specified location.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.XYPlot"/> of the error point at the specified location. 
            If there is no error point at the specified location, 
            <paramref name="index"/> is set to <entity value="ndash"/>1, 
            and the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>7/28/2006 4:38:05 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.GetErrorBandAt(System.Int32,System.Int32,System.Double@,System.Double@)">
            <summary>
            Gets the plot associated with the error point at the specified location along with 
            the corresponding x and y coordinates of the error value.
            </summary>
            <param name="x">
            The x-coordinate of the location in client coordinates to search for an error point.
            </param>
            <param name="y">
            The y-coordinate of the location in client coordinates to search for an error point.
            </param>
            <param name="xErrorData">
            Upon return, contains the x-coordinate for the error point at the specified location.
            </param>
            <param name="yErrorData">
            Upon return, contains the y-coordinate for the error point at the specified location.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.XYPlot"/> of the error point at the specified location. 
            If there is no error point at the specified location, 
            <paramref name="xErrorData"/> and <paramref name="yErrorData"/> are set to <see cref="F:System.Double.NaN"/>, 
            and the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            <para>
            For an example of <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.GetErrorBandAt(System.Int32,System.Int32)" crefType="Unqualified"/>, refer to <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/>.
            </para>
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>10/3/2010 6:30:18 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.GetErrorBandAt(System.Int32,System.Int32,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Gets the plot associated with the error point at the specified location along with 
            the corresponding x and y coordinates of the error value and the index of the error value.
            </summary>
            <param name="x">
            The x-coordinate of the location in client coordinates to search for an error point.
            </param>
            <param name="y">
            The y-coordinate of the location in client coordinates to search for an error point.
            </param>
            <param name="xErrorData">
            Upon return, contains the x-coordinate for the error point at the specified location.
            </param>
            <param name="yErrorData">
            Upon return, contains the y-coordinate for the error point at the specified location.
            </param>
            <param name="index">
            Upon return, contains the index to the error data value at the specified location.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.XYPlot"/> of the error point at the specified location. 
            If there is no error point at the specified location, 
            <paramref name="xErrorData"/> and <paramref name="yErrorData"/> are set to <see cref="F:System.Double.NaN"/>, 
            <paramref name="index"/> is set to <entity value="ndash"/>1, 
            and the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            You can pass the <see cref="P:System.Windows.Forms.MouseEventArgs.X"/> and 
            <see cref="P:System.Windows.Forms.MouseEventArgs.Y"/> coordinates from the 
            <see cref="T:System.Windows.Forms.MouseEventArgs"/> event argument of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>, or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/> events as
            the <paramref name="x"/> and <paramref name="y"/> parameters.
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.HitTest(System.Int32,System.Int32)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseDown"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseMove"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseUp"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.PlotAreaMouseWheel"/>
            <lastupdated>7/28/2006 4:37:37 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.GetXAxisAt(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:NationalInstruments.UI.XAxis"/> at the specified location.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for an axis.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for an axis.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.XAxis"/> at the specified location. If 
            there is no axis at the specified location, the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            For an example of <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.GetXAxisAt(System.Int32,System.Int32)" crefType="Unqualified"/>, refer to <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/>.
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.HitTest(System.Int32,System.Int32)"/>
            <lastupdated>10/3/2010 6:28:47 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.GetYAxisAt(System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:NationalInstruments.UI.YAxis"/> at the specified location.
            </summary>
            <param name="x">
            The x-coordinate of the location, in client coordinates, to search for an axis.
            </param>
            <param name="y">
            The y-coordinate of the location, in client coordinates, to search for an axis.
            </param>
            <returns>
            The <see cref="T:NationalInstruments.UI.YAxis"/> at the specified location. If 
            there is no axis at the specified location, the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            For an example of <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.GetYAxisAt(System.Int32,System.Int32)" crefType="Unqualified"/>, refer to <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.HitTest(System.Int32,System.Int32)" crefType="Unqualified"/>.
            </remarks>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.HitTest(System.Int32,System.Int32)"/>
            <lastupdated>10/5/2010 1:58:27 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.DrawOriginLines(NationalInstruments.UI.ComponentDrawArgs)">
            <summary>
            Draws the origin lines in the plot area of the graph.
            </summary>
            <param name="args">
            A <see cref="T:NationalInstruments.UI.ComponentDrawArgs"/> that contains the drawing data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="args"/> is <see langword="null"/>.
            </exception>
            <remarks>
            	Use <see cref="M:NationalInstruments.UI.WindowsForms.XYGraph.DrawOriginLines(NationalInstruments.UI.ComponentDrawArgs)"/>
            to draw the origin lines while custom
            drawing the plot area. To custom draw the plot area, attach an event handler
            to <see cref="E:NationalInstruments.UI.WindowsForms.Graph.BeforeDrawPlotArea"/> or
            <see cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea"/>.
            </remarks>
            <example>The following example demonstrates drawing the origin lines of an <see cref="T:NationalInstruments.UI.WindowsForms.XYGraph" crefType="Unqualified"/> object to a .png image file in response to the <see cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea" crefType="Unqualified"/> event. 
            <code lang="VB.NET">
            Public Sub XYGraph_AfterDrawPlotArea(ByVal sender As Object, ByVal e As AfterDrawEventArgs)
                Dim imageFileName As String = "XYGraphOriginLinesImage.png"
                Using bmp As New Bitmap(xyGraph.PlotAreaBounds.Width, xyGraph.PlotAreaBounds.Height)
                    Dim g As Graphics = Graphics.FromImage(bmp)
                    Dim args As New ComponentDrawArgs(g, New Rectangle(0, 0, bmp.Width, bmp.Height))
             
                    xyGraph.DrawOriginLines(args)
                    bmp.Save(imageFileName, ImageFormat.Png)
                End Using
                Debug.WriteLine(String.Format("file {0} has been saved", imageFileName))
            End Sub
            </code>
            </example>
            <example>
            	<code lang="C#">
            public void XYGraph_AfterDrawPlotArea(object sender, AfterDrawEventArgs e)
            {
                string imageFileName = "XYGraphOriginLinesImage.png";
                using (Bitmap bmp = new Bitmap(xyGraph.PlotAreaBounds.Width, xyGraph.PlotAreaBounds.Height))
                {
                    Graphics g = Graphics.FromImage(bmp);
                    ComponentDrawArgs args = new ComponentDrawArgs(g, new Rectangle(0, 0, bmp.Width, bmp.Height));
             
                    xyGraph.DrawOriginLines(args);
                    bmp.Save(imageFileName, ImageFormat.Png);
                }
                Debug.WriteLine(string.Format("file {0} has been saved", imageFileName));
            }
            </code>
            </example>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.BeforeDrawPlotArea"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.Graph.AfterDrawPlotArea"/>
            <lastupdated>10/5/2010 1:58:27 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.OnBeforeDrawPlot(NationalInstruments.UI.BeforeDrawXYPlotEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawPlot"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.BeforeDrawXYPlotEventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawPlot"/>
            <lastupdated>7/13/2004 5:34:38 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.OnAfterDrawPlot(NationalInstruments.UI.AfterDrawXYPlotEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawPlot"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterDrawXYPlotEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawPlot"/>
            <lastupdated>7/13/2004 5:33:36 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.OnXAxesChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.XAxesChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.ComponentModel.CollectionChangeEventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.XYGraph.XAxesChanged"/>
            <lastupdated>7/13/2004 5:35:27 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.OnAfterMoveCursor(NationalInstruments.UI.AfterMoveXYCursorEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterMoveCursor"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterMoveXYCursorEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterMoveCursor"/>
            <lastupdated>7/13/2004 5:34:00 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.OnAfterDrawCursor(NationalInstruments.UI.AfterDrawXYCursorEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawCursor"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterDrawXYCursorEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>7/13/2004 5:33:28 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.OnBeforeMoveCursor(NationalInstruments.UI.BeforeMoveXYCursorEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeMoveCursor"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.BeforeMoveXYCursorEventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeMoveCursor"/>
            <lastupdated>7/13/2004 5:35:04 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.OnBeforeDrawCursor(NationalInstruments.UI.BeforeDrawXYCursorEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawCursor"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.BeforeDrawXYCursorEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>7/13/2004 5:34:29 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.OnCursorsChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.CursorsChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.ComponentModel.CollectionChangeEventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.XYGraph.CursorsChanged"/>
            <lastupdated>7/13/2004 5:35:12 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.OnAnnotationsChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AnnotationsChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.ComponentModel.CollectionChangeEventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AnnotationsChanged"/>
            <lastupdated>7/13/2004 5:34:09 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.OnAfterDrawPointAnnotation(NationalInstruments.UI.AfterDrawXYPointAnnotationEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawPointAnnotation"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterDrawXYPointAnnotationEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>7/13/2004 5:33:45 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.OnBeforeDrawPointAnnotation(NationalInstruments.UI.BeforeDrawXYPointAnnotationEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawPointAnnotation"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.BeforeDrawXYPointAnnotationEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>7/13/2004 5:34:47 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.OnAfterDrawRangeAnnotation(NationalInstruments.UI.AfterDrawXYRangeAnnotationEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawRangeAnnotation"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterDrawXYRangeAnnotationEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>7/13/2004 5:33:52 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.OnBeforeDrawRangeAnnotation(NationalInstruments.UI.BeforeDrawXYRangeAnnotationEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawRangeAnnotation"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.BeforeDrawXYRangeAnnotationEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>7/13/2004 5:34:55 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.OnAfterDragAnnotationCaption(NationalInstruments.UI.AfterDragXYAnnotationCaptionEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDragAnnotationCaption"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.AfterDragXYAnnotationCaptionEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>7/13/2004 5:33:20 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.OnBeforeDragAnnotationCaption(NationalInstruments.UI.BeforeDragXYAnnotationCaptionEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDragAnnotationCaption"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.BeforeDragXYAnnotationCaptionEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>7/13/2004 5:34:18 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.OnXAxisRangeChanged(NationalInstruments.UI.XAxisEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.XAxisRangeChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.XAxisEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.XYGraph.XAxisRangeChanged"/>
            <seealso cref="P:NationalInstruments.UI.Scale.Range"/>
            <lastupdated>7/13/2004 5:35:36 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.OnYAxesChanged(System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.YAxesChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.ComponentModel.CollectionChangeEventArgs"/> that contains
            the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.XYGraph.YAxesChanged"/>
            <lastupdated>7/13/2004 5:35:44 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.OnYAxisRangeChanged(NationalInstruments.UI.YAxisEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.YAxisRangeChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.UI.YAxisEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.XYGraph.YAxisRangeChanged"/>
            <seealso cref="P:NationalInstruments.UI.Scale.Range"/>
            <lastupdated>7/13/2004 5:35:51 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.UI.WindowsForms.XYGraph.OnPlotDataChanged(NationalInstruments.UI.XYPlotDataChangedEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.PlotDataChanged"/> event.
            </summary>
            <param name="e">
            An <see cref="T:NationalInstruments.UI.XYPlotDataChangedEventArgs"/> that contains the
            event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.XYGraph.PlotDataChanged"/>
            <lastupdated>7/13/2004 5:35:20 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.XYGraph.XAxesChanged">
            <summary>
            Occurs when the content of the <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> collection
            changes.
            </summary>
            <remarks>
            The content of the <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> collection changes
            through an add, remove, insert, or clear operation on the collection.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.OnXAxesChanged(System.ComponentModel.CollectionChangeEventArgs)"/>
            <lastupdated>6/30/2003 9:19:37 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.XYGraph.XAxisRangeChanged">
            <summary>
            Occurs when the range of an x-axis in the <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> collection
            of the graph changes.
            </summary>
            <remarks>
            Only x axes contained  in the <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.XAxes"/> collection raise the 
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.XAxisRangeChanged"/> event.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.OnXAxisRangeChanged(NationalInstruments.UI.XAxisEventArgs)"/>
            <seealso cref="P:NationalInstruments.UI.Scale.Range"/>
            <lastupdated>7/10/2003 1:44:42 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.XYGraph.YAxesChanged">
            <summary>
            Occurs when the content of the <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/> collection
            changes.
            </summary>
            <remarks>
            The content of the <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/> collection changes
            through an add, remove, insert, or clear operation on the collection.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.OnYAxesChanged(System.ComponentModel.CollectionChangeEventArgs)"/>
            <lastupdated>6/30/2003 9:20:14 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.XYGraph.YAxisRangeChanged">
            <summary>
            Occurs when the range of a y-axis in the <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/> collection
            of the graph changes.
            </summary>
            <remarks>
            Only y axes contained  in the <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.YAxes"/> collection raise the 
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.YAxisRangeChanged"/> event.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.Scale.Range"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.OnYAxisRangeChanged(NationalInstruments.UI.YAxisEventArgs)"/>
            <lastupdated>7/10/2003 1:45:03 PM</lastupdated>
            <updatedby>Beth Parrott</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawPlot">
            <summary>
            Occurs before a plot is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawPlot"/> 
            to participate in the drawing of the plot. Only plots contained in the graph plot collection
            raise <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawPlot"/> before the plot begins
            drawing. Set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
             property of the event argument to <see langword="true"/> to cancel drawing of the
            plot. If you set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawPlot"/> is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawPlot"/> event is not raised for that plot. You must provide all of the
            implementation for drawing the plot if <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <see langword="true"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.OnBeforeDrawPlot(NationalInstruments.UI.BeforeDrawXYPlotEventArgs)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawPlot"/>
            <lastupdated>11/11/2003 10:31:04 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawPlot">
            <summary>
            Occurs after a plot is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawPlot"/> to participate in the drawing of the plot.
            Only plots contained in the graph plot collection raise
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawPlot"/> after the plot has
            completed drawing. Use <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawPlot"/> in conjunction with custom drawing 
            to further annotate the plot. If you set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property
            to <see langword="true"/> in the event arguments of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawPlot"/> event, this event is not raised for that plot.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.OnAfterDrawPlot(NationalInstruments.UI.AfterDrawXYPlotEventArgs)"/>
            <seealso cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawPlot"/>
            <lastupdated>11/11/2003 10:29:40 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterMoveCursor">
            <summary>
            Occurs after a cursor has been moved.
            </summary>
            <remarks>
            Only cursors contained in the <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.Cursors"/> collection 
            raise the <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterMoveCursor"/> event after 
            the the cursor has completed moving. If you set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property
            to <see langword="true"/> in the event arguments of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeMoveCursor"/> event, this event is not raised for that cursor.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.OnAfterMoveCursor(NationalInstruments.UI.AfterMoveXYCursorEventArgs)"/>
            <lastupdated>11/11/2003 10:29:57 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawCursor">
            <summary>
            Occurs after a cursor is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawCursor"/> to participate in the drawing of the cursor.
            Only cursors contained in the <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.Cursors"/> collection raise
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawCursor"/> after the cursor has
            completed drawing. Use <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawCursor"/> in conjunction with custom drawing 
            to further annotate the cursor. If you set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property
            to <see langword="true"/> in the event arguments of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawCursor"/> event, this event is not raised for that cursor.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>11/11/2003 10:29:06 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeMoveCursor">
            <summary>
            Occurs before a cursor is moved.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeMoveCursor"/> to prevent the cursor from moving to
            specific values or range of values. Only cursors contained in the <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.Cursors"/> collection raise 
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeMoveCursor"/> before the cursor begins moving. Set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
             property of the event argument to <see langword="true"/> to prevent the cursor from moving.
            If you set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeMoveCursor"/> is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterMoveCursor"/> event is not raised for that cursor. You must provide all of the
            implementation for drawing the cursor if <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <see langword="true"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.OnBeforeMoveCursor(NationalInstruments.UI.BeforeMoveXYCursorEventArgs)"/>
            <lastupdated>11/11/2003 10:32:08 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawCursor">
            <summary>
            Occurs before a cursor is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawCursor"/> 
            to participate in the drawing of the cursor. Only cursors contained in the <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.Cursors"/> collection
            raise <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawCursor"/> before the cursor begins
            drawing. Set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            property of the event argument to <see langword="true"/> to cancel drawing of the
            cursor. If you set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawCursor"/> is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawCursor"/> event is not raised for that cursor. You must provide all of the
            implementation for drawing the cursor if <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <see langword="true"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>11/11/2003 10:30:32 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.XYGraph.CursorsChanged">
            <summary>
            Occurs when the content of the <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.Cursors"/> collection
            changes.
            </summary>
            <remarks>
            The content of the <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.Cursors"/> collection changes
            through an add, remove, insert, or clear operation on the collection.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.XYGraph.Cursors"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.OnCursorsChanged(System.ComponentModel.CollectionChangeEventArgs)"/>
            <lastupdated>6/30/2003 9:18:59 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.XYGraph.AnnotationsChanged">
            <summary>
            Occurs when the content of the <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.Annotations"/> collection
            changes.
            </summary>
            <remarks>
            The content of the <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.Annotations"/> collection changes
            through an add, remove, insert, or clear operation on the collection.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.UI.WindowsForms.XYGraph.Annotations"/>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.OnAnnotationsChanged(System.ComponentModel.CollectionChangeEventArgs)"/>
            <lastupdated>7/9/2004 6:29:05 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawPointAnnotation">
            <summary>
            Occurs before a point annotation is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawPointAnnotation"/> 
            to participate in the drawing of the point annotation. Only point annotations contained in the <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.Annotations"/> collection
            raise <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawPointAnnotation"/> before the point annotation begins
            drawing. Set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            property of the event argument to <see langword="true"/> to cancel drawing of the
            point annotation. If you set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawPointAnnotation"/> is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawPointAnnotation"/> event is not raised for that point annotation. You must provide all of the
            implementation for drawing the point annotation if <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <see langword="true"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>4/27/2004 3:55:55 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawPointAnnotation">
            <summary>
            Occurs after a point annotation is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawPointAnnotation"/> to participate in the drawing of the point annotation.
            Only point annotations contained in the <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.Annotations"/> collection raise
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawPointAnnotation"/> after the annotation has
            completed drawing. Use <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawPointAnnotation"/> in conjunction with custom drawing 
            to further annotate the point annotation. If you set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property
            to <see langword="true"/> in the event arguments of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawPointAnnotation"/> event, this event is not raised for that annotation.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.OnAfterDrawPointAnnotation(NationalInstruments.UI.AfterDrawXYPointAnnotationEventArgs)"/>
            <lastupdated>4/27/2004 3:55:01 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawRangeAnnotation">
            <summary>
            Occurs before a range annotation is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawRangeAnnotation"/> 
            to participate in the drawing of the range annotation. Only range annotations contained in the <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.Annotations"/> collection
            raise <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawRangeAnnotation"/> before the range annotation begins
            drawing. Set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
            property of the event argument to <see langword="true"/> to cancel drawing of the
            range annotation. If you set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawRangeAnnotation"/> is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawRangeAnnotation"/> event is not raised for that range annotation. You must provide all of the
            implementation for drawing the range annotation if <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> is set to <see langword="true"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>4/27/2004 3:56:03 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawRangeAnnotation">
            <summary>
            Occurs after a range annotation is drawn.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawRangeAnnotation"/> to participate in the drawing of the range annotation.
            Only range annotations contained in the <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.Annotations"/> collection raise
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawRangeAnnotation"/> after the annotation has
            completed drawing. Use <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDrawRangeAnnotation"/> in conjunction with custom drawing 
            to further annotate the range annotation. If you set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property
            to <see langword="true"/> in the event arguments of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDrawRangeAnnotation"/> event, this event is not raised for that annotation.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.OnAfterDrawRangeAnnotation(NationalInstruments.UI.AfterDrawXYRangeAnnotationEventArgs)"/>
            <lastupdated>4/27/2004 3:55:06 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDragAnnotationCaption">
            <summary>
            Occurs before an annotation caption is dragged.
            </summary>
            <remarks>
            Use <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDragAnnotationCaption"/> to prevent the annotation caption from being dragged to
            specific values or a range of values. Only annotations contained in the <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.Annotations"/> collection raise 
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDragAnnotationCaption"/> before the annotation caption begins moving. Set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>
             property of the event argument to <see langword="true"/> to prevent the annotation caption from being dragged.
            If you set <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/>  to <see langword="true"/>,
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDragAnnotationCaption"/> is always raised; however, the 
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDragAnnotationCaption"/> event is not raised for that annotation.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed. </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.OnBeforeDragAnnotationCaption(NationalInstruments.UI.BeforeDragXYAnnotationCaptionEventArgs)"/>
            <lastupdated>7/9/2004 6:29:30 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDragAnnotationCaption">
            <summary>
            Occurs after an annotation caption has been dragged.
            </summary>
            <remarks>
            Only annotations contained in the <see cref="P:NationalInstruments.UI.WindowsForms.XYGraph.Annotations"/> collection 
            raise the <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.AfterDragAnnotationCaption"/> event after 
            the annotation caption has been dragged. If you set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property
            to <see langword="true"/> in the event arguments of the 
            <see cref="E:NationalInstruments.UI.WindowsForms.XYGraph.BeforeDragAnnotationCaption"/> event, this event is not raised for that annotation.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <seealso cref="M:NationalInstruments.UI.WindowsForms.XYGraph.OnAfterDragAnnotationCaption(NationalInstruments.UI.AfterDragXYAnnotationCaptionEventArgs)"/>
            <lastupdated>7/9/2004 6:28:51 PM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.UI.WindowsForms.XYGraph.PlotDataChanged">
            <summary>
            Occurs when a new set of data is plotted on a plot that is contained in the graph plot collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>6/30/2003 9:19:17 AM</lastupdated>
            <updatedby>Jennifer Smith</updatedby>
            <approved>True</approved>
        </member>
    </members>
</doc>
