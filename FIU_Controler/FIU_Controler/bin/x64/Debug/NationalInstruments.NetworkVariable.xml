<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NationalInstruments.NetworkVariable</name>
    </assembly>
    <members>
        <member name="M:NationalInstruments.Internal.Design.TimeSpanUI.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NationalInstruments.Internal.Design.TimeSpanUI.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NationalInstruments.Internal.Design.UnsitedObjectProvider.IsUnsitedObjectProvider(System.Object)">
            <exclude/>
            <lastupdated>2/12/2003 1:13:44 PM</lastupdated>
            <updatedby>Elton Wells</updatedby>
            <approved>False</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.BindingConnectionBehavior">
            <summary>
            Specifies the behavior of a Windows Forms
            <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/> when it
            connects to a network variable for the first time.
            </summary>
            <seealso cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/>
            <seealso cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.ConnectionBehavior"/>
            <lastupdated>10/2/2009 6:00:42 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.BindingConnectionBehavior.DoNothing">
            <summary>
            The binding does not automatically read or write a value upon connection. After connection, the binding can read or write a value.
            </summary>
            <seealso cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/>
            <seealso cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.ConnectionBehavior"/>
            <lastupdated>9/30/2009 4:31:24 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.BindingConnectionBehavior.Read">
            <summary>
            The binding reads the current value of the network variable after it connects.
            </summary>
            <seealso cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/>
            <seealso cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.ConnectionBehavior"/>
            <lastupdated>10/2/2009 6:00:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.BindingConnectionBehavior.Write">
            <summary>
            The binding writes an <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.InitialValue" crefType="Unqualified"/> to the network variable after it connects.
            </summary>
            <seealso cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/>
            <seealso cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.ConnectionBehavior"/>
            <lastupdated>9/30/2009 4:34:53 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.Internal.NetworkVariableStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.Internal.NetworkVariableStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.Internal.NetworkVariableStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.Internal.NetworkVariableStrings.AddMachineString">
            <summary>
              Looks up a localized string similar to Add Machine.
            </summary>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.Internal.NetworkVariableStrings.BrowserDialogTitle">
            <summary>
              Looks up a localized string similar to Select Network Item.
            </summary>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.Internal.NetworkVariableStrings.CancelButtonString">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.Internal.NetworkVariableStrings.LocationString">
            <summary>
              Looks up a localized string similar to Location.
            </summary>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.Internal.NetworkVariableStrings.NetworkNeighborhoodString">
            <summary>
              Looks up a localized string similar to Network Neighborhood.
            </summary>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.Internal.NetworkVariableStrings.OKButtonString">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.Internal.NetworkVariableStrings.RegisterMachineDialogTitle">
            <summary>
              Looks up a localized string similar to Add Machine.
            </summary>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.Internal.NetworkVariableStrings.RegisterMachineLabel">
            <summary>
              Looks up a localized string similar to Machine Name or IP Address.
            </summary>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.Internal.NetworkVariableStrings.RemoveMachineString">
            <summary>
              Looks up a localized string similar to Remove.
            </summary>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.Internal.NetworkVariableStrings.ToolBarAddMachine">
            <summary>
              Looks up a localized string similar to Add Machine.
            </summary>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.Internal.NetworkVariableStrings.ToolBarCollapseAll">
            <summary>
              Looks up a localized string similar to Collapse All.
            </summary>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.Internal.NetworkVariableStrings.ToolBarExpandAll">
            <summary>
              Looks up a localized string similar to Expand All.
            </summary>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.Internal.NetworkVariableStrings.ToolBarRefresh">
            <summary>
              Looks up a localized string similar to Refresh.
            </summary>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.Internal.WindowsForms.RegisterMachineDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.Internal.WindowsForms.RegisterMachineDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.Internal.WindowsForms.RegisterMachineDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.Internal.WindowsForms.BrowserDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.Internal.ServerDataInformation.Unconnected">
            ===================================================================
            <exclude/>
            <summary>
            Represents the information for when a NetworkVariableData&lt;TValue&gt;
            is needed but the reader was unable to connect.
            </summary>
            ===================================================================
        </member>
        <member name="T:NationalInstruments.NetworkVariable.SubscriberConnectionBehavior">
            <summary>
            Specifies the connection behavior of a <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1"/>.
            </summary>
            <lastupdated>10/2/2009 6:01:15 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.SubscriberConnectionBehavior.DoNothing">
            <summary>
            No action is taken when the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1"/>
            connects.
            </summary>
            <lastupdated>10/2/2009 6:01:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.SubscriberConnectionBehavior.UpdateOnConnect">
            <summary>
            When the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1"/> connects,
            the current value of the network variable is published through the
            <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1.DataUpdated"/>
            event.
            </summary>
            <lastupdated>10/2/2009 6:01:18 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.GetSubitemsCompletedEventArgs">
            <summary>
            Provides data for the <see cref="E:NationalInstruments.NetworkVariable.Browser.GetSubitemsCompleted"/>
            event.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            The <see cref="E:NationalInstruments.NetworkVariable.Browser.GetSubitemsCompleted"/> event occurs
            after an asynchronous browsing operation is complete.  If an exception or error occurs, the
            <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property contains the
            exception information.  If the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/>
            property is <see langword="null"/>, the
            <see cref="P:NationalInstruments.NetworkVariable.GetSubitemsCompletedEventArgs.Items"/>
            property contains the results of the browse operation.
            </remarks>
            <lastupdated>3/25/2008 5:35:49 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.GetSubitemsCompletedEventArgs.#ctor(NationalInstruments.NetworkVariable.BrowserItem[],System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.NetworkVariable.GetSubitemsCompletedEventArgs"/>
            class with the specified data, error, whether the operation is cancelled, and user-supplied state object.
            </summary>
            <param name="items">
            An array of <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> objects that are the
            result of the asynchronous browsing operation.
            </param>
            <param name="error">
            An <see cref="T:System.Exception"/> or an object derived from the exception that represents any errors that occur
            during the asynchronous browse operation.
            </param>
            <param name="canceled">
            A value indicating whether the asynchronous operation is canceled.
            </param>
            <param name="userState">
            The user-supplied state object.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="error"/> is <see langword="null"/> and <paramref name="items"/> is <see langword="null"/>.
            </exception>
            <seealso cref="E:NationalInstruments.NetworkVariable.Browser.GetSubitemsCompleted"/>
            <seealso cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitemsAsync(NationalInstruments.NetworkVariable.BrowserItem,System.Object)"/>
            <lastupdated>3/25/2008 3:22:33 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.GetSubitemsCompletedEventArgs.Items">
            <summary>
            Gets the results of an asynchronous browse operation.
            </summary>
            <value>
            An array of <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> objects that are
            the subitems found by the browse operation.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property is not <see langword="null"/>.
            </exception>
            <seealso cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitemsAsync(NationalInstruments.NetworkVariable.BrowserItem,System.Object)"/>
            <lastupdated>3/25/2008 3:21:01 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.Browser">
            <summary>
            Provides methods to discover information about what network variable items are available on the
            network.
            </summary>
            <remarks>
            	<para>
            The <see cref="T:NationalInstruments.NetworkVariable.Browser"/> class discovers items
            that cannot be accessed by other classes in the network variable class libraries. <see cref="T:NationalInstruments.NetworkVariable.Browser"/> overcomes
            the limitations of the browsing functionality provided by  the 
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/> class, and you can use the class to discover
            network variable items on remote machines.  However, all information discovered by the
            <see cref="T:NationalInstruments.NetworkVariable.Browser"/> class is read-only, and you can use the class only
            to determine the type and name of a network variable item.
            </para>
            	<para>
            The browser treats the elements of the network variable hierarchy as items.  For example, 
            machines, processes, and network variables are considered individual items by the browser.
            Items are represented by <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/>
            objects.   Some items, such as processes, can contain other items.  You can browse for these
            items by calling one of the overloads of 
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitems(NationalInstruments.NetworkVariable.BrowserItem)"/> with a parameter that
            represents the item you are interested in. When this documentation refers to an item, this
            term can apply to any network variable item unless otherwise specified.
            </para>
            	<note type="note">
            Network variable processes that have not been started are not visible to the
            <see cref="T:NationalInstruments.NetworkVariable.Browser"/> class.  
            </note>
            	<note type="caution">
            Using the <see cref="T:NationalInstruments.NetworkVariable.Browser"/> class simultaneously with
            the creation functionality provided by the 
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/>,
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/>,
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariable"/>,
            and <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> classes can lead to undesired
            results.  If you instantiate a <see cref="T:NationalInstruments.NetworkVariable.Browser"/>,
            then create a process or variable, the <see cref="T:NationalInstruments.NetworkVariable.Browser"/>
            might throw a <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableException"/> that
            indicates "The socket was closed by the remote peer." There is an unpredictable delay between when 
            an item is created and when it is available for browsing.  National Instruments recommends you create instances of
            the <see cref="T:NationalInstruments.NetworkVariable.Browser"/> class after any
            creation operations have completed to avoid this error.
            </note>
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>9/16/2008 11:07:16 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.Browser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.NetworkVariable.Browser"/> class.
            </summary>
            <lastupdated>3/25/2008 2:58:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.Browser.Finalize">
            <exclude/>
            <lastupdated>10/8/2009 9:02:24 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.Browser.LocalRoot">
            <summary>
            Gets a <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> object that represents the
            local machine.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> that represents the local
            machine.
            </value>
            <remarks>
            If you wish to browse items on the local machine, call 
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitems(NationalInstruments.NetworkVariable.BrowserItem)"/> or
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitemsAsync(NationalInstruments.NetworkVariable.BrowserItem,System.Object)"/>
            and pass this item as an argument.  This is more convenient than using
            <see cref="P:NationalInstruments.NetworkVariable.Browser.RemoteRoot"/> and searching through
            the subitems of <see cref="P:NationalInstruments.NetworkVariable.Browser.RemoteRoot"/>  for the local machine.
            </remarks>
            <lastupdated>3/25/2008 2:57:26 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.Browser.RemoteRoot">
            <summary>
            Gets a <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> object that represents
            the root of the browsing hierarchy.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> object that is the root of
            the browsing hierarchy.
            </value>
            <remarks>
            If you call <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitems(NationalInstruments.NetworkVariable.BrowserItem)"/> or
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitemsAsync(NationalInstruments.NetworkVariable.BrowserItem,System.Object)"/> with this item as
            the parameter, the returned items represent all accessible machines.
            </remarks>
            <lastupdated>3/25/2008 2:57:52 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.Browser.SynchronizeCallbacks">
            <summary>
            Gets or sets a value that indicates how events and callback delegates are invoked.
            </summary>
            <value>
            	<see langword="true"/> if events and callbacks are invoked through the
            <see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)"/> or
            <see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)"/> methods; otherwise
            events and callbacks are invoked directly.  The default value is <see langword="true"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            In some cases, callbacks and event handlers are executed from a different thread than the rest of
            the program.  Therefore, you must take care when accessing objects that have thread affinity, such
            as Windows Forms controls, from these callbacks and event handlers.  For more information, refer to
            <see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>.
            </remarks>
            <lastupdated>3/25/2008 2:58:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.Browser.GetItem(System.String)">
            <summary>
            Gets a <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> that represents the item at
            the specified location.
            </summary>
            <param name="location">
            The location of the network variable item.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> that represents the network
            variable item.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="location"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="location"/> is an empty string.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The path specified by <paramref name="location"/> is invalid.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            No item was found at the path specified by <paramref name="location"/>.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error.  Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            If you do not want an exception to be thrown when the item at the path does not exist, use
            <see cref="M:NationalInstruments.NetworkVariable.Browser.TryGetItem(System.String,NationalInstruments.NetworkVariable.BrowserItem@)"/>.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, the name of 
            <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> objects must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If the returned 
            <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> object
            has a name that contains unmappable characters, the unmappable characters are replaced with a
            substitution character.  For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.</note>
            </remarks>
            <lastupdated>10/2/2009 3:48:20 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.Browser.TryGetItem(System.String,NationalInstruments.NetworkVariable.BrowserItem@)">
            <summary>
            Gets a <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> that represents the item at
            the specified location.  A return value indicates if the item was found.
            </summary>
            <param name="location">
            The location of the network variable item.
            </param>
            <param name="item">
            When this method returns and the item was found, contains a 
            <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> that represents the network
            variable item.  Otherwise, it will be <see langword="null"/>.
            </param>
            <returns>
            	<see langword="true"/> if the item was found; otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="location"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The path specified by <paramref name="location"/> is invalid.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error.  Check the exception's 
            <see cref="P:System.Exception.Message"/> property for more information.
            </exception>
            <remarks>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, <paramref name="location"/> must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character. If the returned 
            <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> object
            has a name that contains unmappable characters, the unmappable characters are replaced with a
            substitution character. If <paramref name="location"/> contains unmappable
            characters, the substitution causes <see cref="T:NationalInstruments.NetworkVariable.Browser"/> to
            find the wrong item or behave as if the item is not found.   For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 3:50:03 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.Browser.ToString">
            <summary>
            Gets the string representation of a <see cref="T:NationalInstruments.NetworkVariable.Browser"/>
            object.
            </summary>
            <returns>
            A string representation of a <see cref="T:NationalInstruments.NetworkVariable.Browser"/> object.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <lastupdated>3/25/2008 3:11:41 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.Browser.IsDisposed">
            <summary>
            Gets a value indicating whether the object has been disposed.
            </summary>
            <value>
            	<see langword="true"/> if the object has been disposed.
            </value>
            <lastupdated>3/25/2008 2:56:24 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.Browser.Dispose">
            <summary>
            Releases the resources used by a <see cref="T:NationalInstruments.NetworkVariable.Browser"/>
            object.
            </summary>
            <remarks>
            Call <see cref="M:NationalInstruments.NetworkVariable.Browser.Dispose"/> when you are finished
            with a <see cref="T:NationalInstruments.NetworkVariable.Browser"/> object.  After this method
            has been called, the <see cref="T:NationalInstruments.NetworkVariable.Browser"/> is in an
            unusable state, and you cannot access <see cref="T:NationalInstruments.NetworkVariable.Browser"/>  properties or methods.
            </remarks>
            <lastupdated>3/25/2008 2:59:06 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.Browser.GetRegisteredMachineNames">
            <summary>
            Gets a list of machine names that have been registered for browsing.
            </summary>
            <returns>
            An array of machine names.
            </returns>
            <remarks>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, the machine name must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.
            If the machine name contains unmappable characters, the value returned by this method may contain substitution characters.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <seealso cref="M:NationalInstruments.NetworkVariable.Browser.RegisterMachine(System.String)"/>
            <seealso cref="M:NationalInstruments.NetworkVariable.Browser.UnregisterMachine(System.String)"/>
            <lastupdated>10/2/2009 3:49:01 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.Browser.RegisterMachine(System.String)">
            <summary>
            Registers a machine with the browser.
            </summary>
            <param name="machineName">
            The name or IP address of a machine to register.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="machineName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            Normally, the <see cref="T:NationalInstruments.NetworkVariable.Browser"/> class only returns
            machines that are in your local subnet.  If you want to browse machines that are not part of
            your local network, use this method to register the machine first.  After the machine is 
            registered, the <see cref="T:NationalInstruments.NetworkVariable.Browser"/> class and the
            <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog"/>
            list the registered machine as if it were part of your local subnet.
            </para>
            	<note type="note">
            The <see cref="M:NationalInstruments.NetworkVariable.Browser.RegisterMachine(System.String)"/> method performs no
            validation.  If the specified machine name is invalid or no machine with the specified name or
            IP address can be reached, the
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitems(NationalInstruments.NetworkVariable.BrowserItem)"/> method returns a
            <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> for that machine, but attempts to
            browse the machine's items will fail.
            </note>
            </remarks>
            <seealso cref="M:NationalInstruments.NetworkVariable.Browser.UnregisterMachine(System.String)"/>
            <lastupdated>10/2/2009 5:59:20 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.Browser.UnregisterMachine(System.String)">
            <summary>
            Unregisters a machine.
            </summary>
            <param name="machineName">
            The name or IP address of a machine that should be unregistered.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="machineName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            If no machine with the specified name or IP address has been registered, <see cref="M:NationalInstruments.NetworkVariable.Browser.UnregisterMachine(System.String)"/> does nothing.
            </para>
            	<para>
            Machines that exist on the local subnet cannot be unregistered; if <paramref name="machineName"/>
            specifies a machine on the local subnet, <see cref="M:NationalInstruments.NetworkVariable.Browser.UnregisterMachine(System.String)"/> does nothing.
            	</para>
            </remarks>
            <lastupdated>10/2/2009 5:59:25 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.Browser.GetSubitems(NationalInstruments.NetworkVariable.BrowserItem)">
            <summary>
            Gets the subitems of a specific item.
            </summary>
            <param name="parent">
            The <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> that has subitems listed.
            </param>
            <returns>
            An array of <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> objects that represent
            the subitems of <paramref name="parent"/>.  This array has zero elements if there are no subitems.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="parent"/> is null.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.TimeoutException">
            	<para>
            The browse operation timed out.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The specified item could not be found.
            </para>
            </exception>
            <remarks>
            	<para>
            Network variable processes that have not been started are unavailable to the 
            <see cref="T:NationalInstruments.NetworkVariable.Browser"/> class; you cannot browse these items.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, the name of 
            <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> objects must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character. If <paramref name="parent"/> has a name that contains unmappable
            characters or if any of the returned <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> objects
            have a name that contains unmappable characters, the unmappable characters are replaced with a
            substitution character.  For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <example>
            The following example application demonstrates using the 
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitems(NationalInstruments.NetworkVariable.BrowserItem)"/> method to view all network
            variables that are currently accessible.
            <code lang="VB.NET">
            Imports NationalInstruments.NetworkVariable
             
            Module ListVariablesExample
             
                Sub Main()
                    Dim browser As New Browser()
                    ListVariables(browser, browser.RemoteRoot)
                    browser.Dispose()
                End Sub
             
                Sub ListVariables(ByVal browser As Browser, ByVal rootItem As BrowserItem)
                    If rootItem.ItemType = BrowserItemType.Item Then
                        Console.WriteLine(rootItem.Path)
                    Else
                        Dim items() As BrowserItem = browser.GetSubitems(rootItem)
             
                        For Each item As BrowserItem In items
                            ListVariables(browser, item)
                        Next
                    End If
                End Sub
             
            End Module
            </code>
            </example>
            <example>
            	<code lang="C#">
            using System;
            using NationalInstruments.NetworkVariable;
             
            class ListVariablesExample
            {
                static void Main(string[] args)
                {
                    Browser browser = new Browser();
                    ListVariables(browser, Browser.LocalRoot);
                    browser.Dispose();
                }
             
                static void ListVariables(Browser browser, BrowserItem rootItem)
                {
                    if (rootItem.ItemType == BrowserItemType.Item)
                    {
                        Console.WriteLine(rootItem.Path);
                    }
                    else
                    {
                        BrowserItem[] items = browser.GetSubitems(rootItem);
             
                        foreach (BrowserItem item in items)
                        {
                            ListVariables(browser, item);
                        }
                    }
                }
            }
            </code>
            </example>
            <seealso cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitemsAsync(NationalInstruments.NetworkVariable.BrowserItem,System.Object)"/>
            <lastupdated>10/2/2009 3:49:16 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.Browser.GetSubitems(System.String)">
            <summary>
            Gets the subitems of the network variable item at the specified path.
            </summary>
            <param name="path">
            The path of a network variable item.
            </param>
            <returns>
            An array of <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> objects that
            represent the subitems of the item at <paramref name="path"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="path"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The item specified by <paramref name="path"/> does not exist.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.TimeoutException">
            The browse operation timed out.
            </exception>
            <remarks>
            	<para>
            This method is more convenient than the overload of
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitems(NationalInstruments.NetworkVariable.BrowserItem)"/> that takes a
            <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> parameter when you want to
            browse an item that is under several other items.  
            </para>
            	<para>
            The <paramref name="path"/> parameter is expected to be in a format similar to that of network
            share items.  The following table demonstrates some valid paths.
            <list type="table">
            			<listheader>
            				<term>Path</term>
            				<description>Item path represents</description>
            			</listheader>
            			<item>
            				<term>
            					<c>\\LineMonitor</c>
            				</term>
            				<description>
            A machine named "LineMonitor".
            </description>
            			</item>
            			<item>
            				<term>
            					<c>\\localhost\TestProc</c>
            				</term>
            				<description>
            A process on the local machine named "TestProc".
            </description>
            			</item>
            			<item>
            				<term>
            					<c>\\DataCollector01\Temperature\Sensor01</c>
            				</term>
            				<description>
            A variable named "Sensor01" in a process named "Temperature" on a machine named "DataCollector01".
            </description>
            			</item>
            			<item>
            				<term>
            					<c>\\192.168.1.15\Temperature\Sensor01</c>
            				</term>
            				<description>
            A variable named "Sensor01" in a process named "Temperature" on a machine that has the IP address
            <c>192.168.1.15</c>.
            </description>
            			</item>
            		</list>
            	</para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, the name of 
            <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> objects must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character. If any of the returned 
            <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> objects
            have a name that contains unmappable characters, the unmappable characters are replaced with a
            substitution character. If <paramref name="path"/> contains unmappable
            characters, the substitution may cause the <see cref="T:NationalInstruments.NetworkVariable.Browser"/> class
            to find the wrong item or report that the item is not found.   For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <example>
            The following example demonstrates browsing network variable items by using the path to the
            parent item.
            <code lang="VB.NET">
            Dim browser As New Browser()
            Dim children As BrowserItem() = browser.GetSubitems("\\\\127.0.0.1\\System")
            browser.Dispose()
             
            If children.Length = 0 Then
                Console.WriteLine("There are no items in the System process.")
            Else
                Console.WriteLine("Items in the System process:")
                For Each item As BrowserItem In children
                    Console.WriteLine(item.Path)
                Next
            End If
            </code>
            </example>
            <example>
            	<code lang="C#">
            Browser browser = new Browser();
            BrowserItem[] children = browser.GetSubitems("\\\\127.0.0.1\System");
            browser.Dispose();
             
            if (children.Length == 0)
            {
                Console.WriteLine("There are no items in the System process.");
            }
            else
            {
                Console.WriteLine("Items in the System process:");
                foreach (BrowserItem item in children)
                {
                    Console.WriteLine(item.Path);
                }
            }
            </code>
            </example>
            <lastupdated>10/2/2009 3:49:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.NetworkVariable.Browser.GetSubitemsCompleted">
            <summary>
            Occurs when an asynchronous browsing operation is complete.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            An attempt was made to access the 
            <see cref="P:NationalInstruments.NetworkVariable.GetSubitemsCompletedEventArgs.Items"/>
            property when there has been an error.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            The <see cref="E:NationalInstruments.NetworkVariable.Browser.GetSubitemsCompleted"/> event occurs
            when one of the <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitemsAsync(NationalInstruments.NetworkVariable.BrowserItem,System.Object)"/>
            methods is complete.  The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.UserState"/>
            property contains the value that is passed as the argument to 
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitemsAsync(NationalInstruments.NetworkVariable.BrowserItem,System.Object)"/> and can be used to identify
            which operation has completed.  If an exception is thrown by the operation, the
            <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property contains the
            exception information, otherwise <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/>  is <see langword="null"/>.
            </remarks>
            <lastupdated>3/25/2008 4:39:15 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.Browser.GetSubitemsAsync(NationalInstruments.NetworkVariable.BrowserItem,System.Object)">
            <summary>
            Asynchronously gets the subitems of the specified network variable item.
            </summary>
            <param name="parent">
            The <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> that has subitems listed.
            </param>
            <param name="userState">
            An object that is passed to the method that is invoked when the asynchronous operation completes.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="parent"/> is null.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            Use this method when you do not want a browsing operation to block.  Each call to this method
            executes the <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitems(NationalInstruments.NetworkVariable.BrowserItem)"/> method
            on a thread pool thread.  When the operation completes, the 
            <see cref="E:NationalInstruments.NetworkVariable.Browser.GetSubitemsCompleted"/> event is raised.
            Use the <see cref="T:NationalInstruments.NetworkVariable.GetSubitemsCompletedEventArgs"/> argument
            provided by this event to determine which operation completed and the results of the operation.
            The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.UserState"/>
            property identifies which operation completed.  If an exception is thrown by the browse
            operation, the exception is stored in the
            <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/>
            property.  If this property is <see langword="null"/>, then 
            <see cref="P:NationalInstruments.NetworkVariable.GetSubitemsCompletedEventArgs.Items"/> 
            contains the subitems of <paramref name="parent"/>.
            </para>
            	<para>
            The <paramref name="userState"/> parameter enables you to identify which operation raised the
            <see cref="E:NationalInstruments.NetworkVariable.Browser.GetSubitemsCompleted"/> event if you
            have made multiple calls to
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitemsAsync(NationalInstruments.NetworkVariable.BrowserItem,System.Object)"/>.  <paramref name="userState"/> 
            can be <see langword="null"/>.  When multiple calls to
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitemsAsync(NationalInstruments.NetworkVariable.BrowserItem,System.Object)"/> are made, the order in which
            the calls complete is undefined.  When you handle the
            <see cref="E:NationalInstruments.NetworkVariable.Browser.GetSubitemsCompleted"/> event, the object
            specified by <paramref name="userState"/> is stored in the
            <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.UserState"/> property
            of the event handler's <see cref="T:NationalInstruments.NetworkVariable.GetSubitemsCompletedEventArgs"/>
            argument.  National Instruments recommends that you pass a unique object as the <paramref name="userState"/> 
            parameter for each call to 
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitemsAsync(NationalInstruments.NetworkVariable.BrowserItem,System.Object)"/>, or it is impossible
            to determine which call has completed.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, the name of 
            <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> objects must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character. If <paramref name="parent"/> has a name that contains unmappable
            characters or if any of the returned <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> objects
            have a name that contains unmappable characters, the unmappable characters are replaced with a
            substitution character.  For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <example>
            The following example application demonstrates how to start two simultaneous browse operations
            and determine which operation has completed.  To execute it, create a new console application
            and paste the following code in the generated class.
            <code lang="VB.NET">
            Imports NationalInstruments.NetworkVariable
            Imports System.Threading
             
            Module Module1
             
                ' These objects are used to identify the individual operations.
                Private ReadOnly _machinesId As New Object()
                Private ReadOnly _processesId As New Object()
             
                Private _flag As New AutoResetEvent(False)
             
                Sub Main()
                    Dim eventsCounted As Integer = 0
             
                    Dim browser As New Browser()
                    AddHandler browser.GetSubitemsCompleted, AddressOf HandleBrowseCompleted
             
                    browser.GetSubitemsAsync(browser.RemoteRoot, _machinesId)
                    browser.GetSubitemsAsync(browser.LocalRoot, _processesId)
             
                    ' Wait until both events have been handled.
                    While eventsCounted &lt; 2
                        _flag.WaitOne()
                        eventsCounted += 1
                    End While
             
                    browser.Dispose()
                End Sub
             
                Private Sub HandleBrowseCompleted(ByVal sender As Object, ByVal e As GetSubitemsCompletedEventArgs)
                    If e.Error Is Nothing Then
                        Dim message As String
             
                        ' Output a message based on which operation has completed.
                        If e.UserState Is _machinesId Then
                            message = String.Format("There are {0} machines available.", e.Items.Length)
                        Else
                            message = String.Format("There are {0} processes on this machine.", e.Items.Length)
                        End If
             
                        Console.WriteLine(message)
                    Else
                        Console.WriteLine("There was an error:")
                        Console.WriteLine(e.Error.ToString())
                    End If
             
                    _flag.Set()
                End Sub
             
            End Module
            </code>
            </example>
            <example>
            	<code lang="C#">
            using System;
            using System.Threading;
            using NationalInstruments.NetworkVariable;
             
             
            namespace NationalInstruments.NetworkVariable.BrowseSample
            {
                static class Program
                {
                    // These objects will be used to identify the two asynchronous
                    // browsing operations.
                    private static object _machinesId = new object();
                    private static object _processesId = new object();
             
                    private static AutoResetEvent _flag = new AutoResetEvent(false);
             
                    [STAThread()]
                    static void Main()
                    {
                        int eventsCounted = 0;
             
                        Browser browser = new Browser();
                        browser.GetSubitemsCompleted += HandleBrowseCompleted;
             
                        // Start the asynchronous operations
                        browser.GetSubitemsAsync(Browser.RemoteRoot, _machinesId);
                        browser.GetSubitemsAsync(Browser.LocalRoot, _processesId);
             
                        _flag.Reset();
             
                        // wait until both events have completed to exit.
                        while (eventsCounted &lt; 2)
                        {
                            _flag.WaitOne();
                            eventsCounted++;
                        }
             
                        browser.Dispose();
                    }
             
                    private static void HandleBrowseCompleted(object sender, GetSubitemsCompletedEventArgs e)
                    {
                        if (e.Error == null)
                        {
                            // print a different message depending on which event has completed.
                            string message;
             
                            if (e.UserState == _machinesId)
                            {
                                message = String.Format("There are {0} machines available.", e.Items.Length);
                            }
                            else
                            {
                                message = String.Format("There are {0} processes on this machine.", e.Items.Length);
                            }
             
                            Console.WriteLine(message);
                        }
                        else
                        {
                            Console.WriteLine("An error happened:");
                            Console.WriteLine(e.Error.ToString());
                        }
             
                        _flag.Set();
                    }
                }
            }
            </code>
            </example>
            <lastupdated>10/2/2009 3:49:42 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.Browser.GetSubitemsAsync(System.String,System.Object)">
            <summary>
            Asynchronously gets the subitems of the network variable item at the specified path.
            </summary>
            <param name="path">
            The path to a network variable item.
            </param>
            <param name="userState">
            An object that uniquely identifies a browse operation.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="path"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            An operation that uses the same <paramref name="userState"/> is already in progress.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            The <paramref name="path"/> parameter is expected to be in a format similar to that of network
            share items.  The following table demonstrates some valid paths.
            <list type="table">
            			<listheader>
            				<term>Path</term>
            				<description>Item path represents</description>
            			</listheader>
            			<item>
            				<term>
            					<c>\\LineMonitor</c>
            				</term>
            				<description>
            A machine named "LineMonitor".
            </description>
            			</item>
            			<item>
            				<term>
            					<c>\\localhost\TestProc</c>
            				</term>
            				<description>
            A process on the local machine named "TestProc".
            </description>
            			</item>
            			<item>
            				<term>
            					<c>\\DataCollector01\Temperature\Sensor01</c>
            				</term>
            				<description>
            A variable named "Sensor01" in a process named "Temperature" on a machine named "DataCollector01".
            </description>
            			</item>
            			<item>
            				<term>
            					<c>\\192.168.1.16\Temperature\Sensor01</c>
            				</term>
            				<description>
            A variable named "Sensor01" in a process named "Temperature" on a machine that has an IP address of 
            192.168.1.16.
            </description>
            			</item>
            		</list>
            	</para>
            	<para>
            Use this method when you do not want a browsing operation to block.  Each call to this method
            executes the <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitems(NationalInstruments.NetworkVariable.BrowserItem)"/> method
            on a thread pool thread.  When the operation completes, the 
            <see cref="E:NationalInstruments.NetworkVariable.Browser.GetSubitemsCompleted"/> event is raised.
            Use the <see cref="T:NationalInstruments.NetworkVariable.GetSubitemsCompletedEventArgs"/> argument
            provided by this event to determine which operation completed and the results of the operation.
            The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.UserState"/>
            property identifies which operation completed.  If an exception is thrown by the browse
            operation, the exception is stored in the
            <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/>
            property.  If this property is <see langword="null"/>, then the
            <see cref="P:NationalInstruments.NetworkVariable.GetSubitemsCompletedEventArgs.Items"/> collection contains the subitems of the item represented by <paramref name="path"/>.
            </para>
            	<para>
            The <paramref name="userState"/> parameter enables you to identify which operation raised the
            <see cref="E:NationalInstruments.NetworkVariable.Browser.GetSubitemsCompleted"/> event if you
            have made multiple calls to
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitemsAsync(NationalInstruments.NetworkVariable.BrowserItem,System.Object)"/>.  <paramref name="userState"/> 
            can be <see langword="null"/>.  When multiple calls to
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitemsAsync(NationalInstruments.NetworkVariable.BrowserItem,System.Object)"/> are made, the order in which
            the calls complete is undefined.  When you handle the
            <see cref="E:NationalInstruments.NetworkVariable.Browser.GetSubitemsCompleted"/> event, the object
            specified by <paramref name="userState"/> is stored in the
            <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.UserState"/> property
            of the event handler's <see cref="T:NationalInstruments.NetworkVariable.GetSubitemsCompletedEventArgs"/>
            argument.  National Instruments recommends that you pass a unique object as the <paramref name="userState"/> 
            parameter for each call to 
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitemsAsync(NationalInstruments.NetworkVariable.BrowserItem,System.Object)"/>, or it is impossible
            to determine which call has completed.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, the name of 
            <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> objects must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If any of the returned 
            <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> objects
            have a name that contains unmappable characters, the unmappable characters are replaced with a
            substitution character. If <paramref name="path"/> contains unmappable
            characters, the substitution may cause the <see cref="T:NationalInstruments.NetworkVariable.Browser"/> class
            to find the wrong item or report that the item is not found.   For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>3/14/2011 3:49:08 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.NetworkVariableBindingBase">
            <summary>
            Provides an <see langword="abstract"/> base class for bindings.
            </summary>
            <threadsafety safety="safe"/>
            <remarks>
            Use <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.Location"/> to 
            set the path name of the network variable. Use <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.ConnectionStatus"/> to determine the
            current connection status of the network variable. Use <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.BindingMode"/>
            to determine if the binding can read or read and write to the network variable.
            </remarks>
            <lastupdated>10/22/2006 8:37:30 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.Name">
            <summary>
            Gets or sets the name used to bind network variables to controls.  
            </summary>
            <value>
            The name of the binding. The default value <see cref="F:System.String.Empty"/>. However, the Visual Studio Designer
            chooses a default name, such as "Binding1."
            </value>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <remarks>
            Each binding must have a unique name.
            </remarks>
            <lastupdated>10/16/2006 12:20:20 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.Location">
            <summary>
            Gets or sets the path name of the network variable.
            </summary>
            <value>
            The path name of the network variable. The default value is <see cref="F:System.String.Empty"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <remarks>
            	<para>
            The format of the <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.Location"/> is similar
            to the format of items on network shares and is not case-sensitive. The following are examples:
            <list type="bullet">
            			<item>
            				<description>
            					<format type="monospace">\\localhost\my_process\my_variable</format>
            				</description>
            			</item>
            			<item>
            				<description><format type="monospace">
            \\192.168.1.100\my_process\my_variable</format>
            				</description>
            			</item>
            			<item>
            				<description><format type="monospace">
            \\test_machine.my_network.com\my_process\my_variable</format>
            				</description>
            			</item>
            			<item>
            				<description>
            					<item>
            						<description><format type="monospace">
            \\localhost\system\my_variable</format>
            						</description>
            					</item>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            If you specify a new variable in the system process, such as <format type="monospace">\\localhost\system\my_variable</format>, then the variable
            is implicitly created and can hold values of any type.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If the process name or variable name contains characters that cannot be
            converted using the system default code page, trying to call methods, get properties, or set properties
            may throw an exception.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 3:50:47 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.BindingMode">
            <summary>
            Gets or sets the permission mode of the network variable connection.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBindingMode"/> of the network variable connection.
            The default value is <see cref="F:NationalInstruments.NetworkVariable.NetworkVariableBindingMode.Read"/>.
            </value>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The specified value is not a <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBindingMode"/> value.
            </exception>
            <lastupdated>10/23/2006 7:04:09 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.ConnectionTimeout">
            <summary>
            Gets or sets the timeout for connecting to the network variable.
            </summary>
            <value>
            The timeout for connecting to the network variable. The default value is 10 seconds.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		value is less than or equal to zero.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            The total milliseconds of the value is greater than the maximum integer value.
            </para>
            </exception>
            <remarks>
            	<para>
            		<see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.ConnectionTimeout"/> is an 
            ambient property. If <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.ConnectionTimeout"/> is set to
            <see cref="F:System.TimeSpan.Zero"/>, then the <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.ConnectionTimeout"/>
            value is the connection timeout of the data source.
            </para>
            	<para>
            To specify a timeout of forever, use <see cref="F:System.TimeSpan.MaxValue"/>.
            </para>
            </remarks>
            <lastupdated>10/16/2006 12:18:13 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.WriteTimeout">
            <summary>
            Gets or sets the timeout for writing to the network variable.
            </summary>
            <value>
            The timeout for writing to the network variable. The default value is 10 seconds.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		value is less than or equal to zero.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            The total milliseconds of the value is greater than the maximum integer value.
            </para>
            </exception>
            <remarks>
            	<para>
            		<see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.WriteTimeout"/> is an 
            ambient property. If <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.WriteTimeout"/> is set to
            <see cref="F:System.TimeSpan.Zero"/>, then the <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.WriteTimeout"/>
            value is the write timeout of the data source.
            </para>
            	<para>
            You use <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.WriteTimeout"/> only if
            <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.BindingMode"/> is set to
            <see cref="F:NationalInstruments.NetworkVariable.NetworkVariableBindingMode.ReadWrite"/>. To specify a timeout of forever, use <see cref="F:System.TimeSpan.MaxValue"/>.
            </para>
            </remarks>
            <lastupdated>10/16/2006 12:20:39 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.DefaultReadValue">
            <summary>
            Gets or sets the value that the data source returns
            if a read cannot be successfully completed from the network variable.
            </summary>
            <value>
            The value that the data 
            source returns if a read cannot be successfully completed from the network variable. The default value
            is <see langword="null"/>.
            </value>
            <remarks>
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If the value contains characters that cannot be
            converted using the system default code page, the value that is returned may contain substitution
            characters.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	
            </remarks>
            <lastupdated>10/2/2009 3:50:40 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.ConvertDefaultReadValue(System.String)">
            <exclude/>
            <lastupdated>10/7/2006 4:17:59 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.ConnectionStatus">
            <summary>
            Gets the current status of the connection to the network variable.
            </summary>
            <value>
            The current status of the connection to the network variable.
            The default value is <see cref="F:NationalInstruments.NetworkVariable.ConnectionStatus.Disconnected"/>.
            </value>
            <lastupdated>10/4/2006 9:54:55 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.</summary>
            <returns>
            Returns a string representation of the object.
            </returns>
            <lastupdated>10/7/2006 4:18:18 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.BindingStatusUpdatedEventArgs`1">
            <summary>
            Provides data for binding updated
            events.
            </summary>
            <threadsafety safety="safe"/>
            <typeparam name="TBinding">
            The associated binding class.
            </typeparam>
            <seealso cref="E:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.BindingStatusUpdated"/>
            <seealso cref="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.BindingStatusUpdated"/>
            <lastupdated>3/26/2007 1:53:32 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.BindingStatusUpdatedEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of <see cref="T:NationalInstruments.NetworkVariable.BindingStatusUpdatedEventArgs`1"/>
            with the specified binding.
            </summary>
            <param name="binding">
            The binding that corresponds to the updated connection status.
            </param>
            <lastupdated>10/4/2006 9:45:47 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.BindingStatusUpdatedEventArgs`1.Binding">
            <summary>
            Gets the binding that corresponds to the updated connection status.
            </summary>
            <value>
            A binding that corresponds to the updated connection status.
            </value>
            <lastupdated>10/9/2006 1:12:49 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.BindingStatusUpdatedEventArgs`1.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
            <lastupdated>10/4/2006 9:45:56 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.BufferedSubscriberDataStatus">
            <summary>
            Defines the buffer status when you read a <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> item from the buffer.
            </summary>
            <lastupdated>10/4/2006 9:50:22 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.BufferedSubscriberDataStatus.New">
            <summary>
            The read data is new.
            </summary>
            <lastupdated>10/4/2006 9:48:15 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.BufferedSubscriberDataStatus.None">
            <summary>
            No data.
            </summary>
            <lastupdated>10/9/2006 4:46:49 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.BufferedSubscriberDataStatus.Stale">
            <summary>
            The data is stale because the buffer is read faster than it is filled.
            </summary>
            <lastupdated>10/16/2006 12:13:38 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.BufferedSubscriberDataStatus.Dropped">
            <summary>
            The buffer overflowed because to the buffer is filling up faster than it is read.
            </summary>
            <lastupdated>10/16/2006 12:12:55 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.ConnectCompletedEventArgs">
            <summary>
            Provides data for the <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectCompleted"/> event.
            </summary>
            <threadsafety safety="safe"/>
            <lastupdated>10/22/2006 8:36:49 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ConnectCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.NetworkVariable.ConnectCompletedEventArgs"/>
            class with the specified error, whether the operation is canceled, and the state object.
            </summary>
            <param name="error">
            Any error that occurs during the asynchronous operation.
            </param>
            <param name="canceled">
            A value indicating whether the asynchronous operation is cancelled.
            </param>
            <param name="userState">
            The optional user-supplied state object.
            </param>
            <lastupdated>10/4/2006 9:52:03 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.ConnectionStatus">
            <summary>
            Specifies the status of a network connection.
            </summary>
            <lastupdated>10/4/2006 9:52:31 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.ConnectionStatus.Connecting">
            <summary>
            The connection is trying to connect.
            </summary>
            <lastupdated>10/4/2006 9:52:47 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.ConnectionStatus.Connected">
            <summary>
            The connection is connected.
            </summary>
            <lastupdated>10/9/2006 4:46:36 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.ConnectionStatus.Disconnected">
            <summary>
            The connection is disconnected.
            </summary>
            <lastupdated>10/9/2006 4:46:31 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.DataUpdatedEventArgs`1">
            <summary>
            Provides data for the <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1.DataUpdated"/>
            event.
            </summary>
            <threadsafety safety="safe"/>
            <typeparam name="TValue">
            The type of the variable that is read. The following types are supported by <typeparamref name="TValue"/>:
            <see cref="T:System.Object"/>;
            <see cref="T:System.Byte"/>, <see cref="T:System.Byte"/>[], <see cref="T:System.Byte"/>[,];
            <see cref="T:System.UInt16"/>, <see cref="T:System.UInt16"/>[], <see cref="T:System.UInt16"/>[,];
            <see cref="T:System.UInt32"/>, <see cref="T:System.UInt32"/>[], <see cref="T:System.UInt32"/>[,];
            <see cref="T:System.UInt64"/>, <see cref="T:System.UInt64"/>[], <see cref="T:System.UInt64"/>[,];
            <see cref="T:System.SByte"/>, <see cref="T:System.SByte"/>[], <see cref="T:System.SByte"/>[,];
            <see cref="T:System.Int16"/>, <see cref="T:System.Int16"/>[], <see cref="T:System.Int16"/>[,];
            <see cref="T:System.Int32"/>, <see cref="T:System.Int32"/>[], <see cref="T:System.Int32"/>[,];
            <see cref="T:System.Int64"/>, <see cref="T:System.Int64"/>[], <see cref="T:System.Int64"/>[,];
            <see cref="T:System.Boolean"/>, <see cref="T:System.Boolean"/>[], <see cref="T:System.Boolean"/>[,];
            <see cref="T:System.Single"/>, <see cref="T:System.Single"/>[], <see cref="T:System.Single"/>[,];
            <see cref="T:System.Double"/>, <see cref="T:System.Double"/>[], <see cref="T:System.Double"/>[,];
            <see cref="T:System.String"/>, <see cref="T:System.String"/>[], <see cref="T:System.String"/>[,]; and
            <see cref="T:NationalInstruments.AnalogWaveform`1"/>, <see cref="T:NationalInstruments.AnalogWaveform`1"/>[].
            			</typeparam>
            <lastupdated>10/27/2006 1:59:33 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.DataUpdatedEventArgs`1.#ctor(NationalInstruments.NetworkVariable.NetworkVariableData{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.NetworkVariable.DataUpdatedEventArgs`1"/>
            class with the specified data.
            </summary>
            <param name="data">
            The <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> that contains information about
            the read data.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <lastupdated>10/4/2006 9:53:43 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.DataUpdatedEventArgs`1.Data">
            <summary>
            Gets a <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> that contains information about
            the read data.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> that contains information about
            the read data.
            </value>
            <lastupdated>10/9/2006 1:13:18 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.BrowserItem">
            <summary>
            Represents a network variable item.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            To the <see cref="T:NationalInstruments.NetworkVariable.Browser"/> class, everything in the network
            variable hierarchy, from machines to variables, is an item with similar properties.  The 
            <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> class represents all types of
            network variable items.  To determine what kind of item a 
            <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> object represents, check the 
            <see cref="P:NationalInstruments.NetworkVariable.BrowserItem.ItemType"/> property of the object.
            </remarks>
            <seealso cref="T:NationalInstruments.NetworkVariable.Browser"/>
            <seealso cref="T:NationalInstruments.NetworkVariable.BrowserItemType"/>
            <lastupdated>3/25/2008 3:16:18 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.BrowserItem.Path">
            <summary>
            Gets the path to a network variable item.
            </summary>
            <value>
            A string that represents the path to a network variable item.
            </value>
            <remarks>
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, the name of 
            <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> objects must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character. If the name contains unmappable characters, the unmappable characters
            are replaced by substitution characters.  For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	
            </remarks>
            <lastupdated>10/2/2009 3:50:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.BrowserItem.ParentItem">
            <summary>
            Gets a <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> that represents the item
            that contains this item.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> object that represents the
            parent of the current object.
            </value>
            <remarks>
            If you are iterating over the parent items of an item, be sure to stop iteration if you reach
            an item with a parent that has <see cref="F:NationalInstruments.NetworkVariable.BrowserItemType.Root"/>
            as the <see cref="P:NationalInstruments.NetworkVariable.BrowserItem.ItemType"/>.  The only items
            that are of this type are <see cref="P:NationalInstruments.NetworkVariable.Browser.LocalRoot"/>
            and <see cref="P:NationalInstruments.NetworkVariable.Browser.RemoteRoot"/>, and neither has a logical
            parent.  The value of <see cref="P:NationalInstruments.NetworkVariable.BrowserItem.ParentItem"/>
            for items with an <see cref="P:NationalInstruments.NetworkVariable.BrowserItem.ItemType"/>
            of <see cref="F:NationalInstruments.NetworkVariable.BrowserItemType.Root"/> is undefined.
            </remarks>
            <example>
            The following example demonstrates a method that examines the parent items of a
            <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> to determine the machine on
            which it is hosted.
            <code lang="VB.NET">
            Public Function GetMachineName(ByVal item As BrowserItem) As String
                While item.ParentItem.ItemType &lt;&gt; BrowserItemType.Root
                    item = item.ParentItem
                End While
             
                If item.ParentItem Is Browser.RemoteRoot Then
                    ' If the parent item is the remote root, then the 
                    ' current item must be a machine
                    Return item.Name
                ElseIf item.ParentItem Is Browser.LocalRoot Then
                    ' If the parent item is the local root, then the
                    ' parent item is a machine
                    Return item.ParentItem.Name
                End If
             
                Return ""
            End Function
            </code>
            </example>
            <example>
            	<code lang="C#">
             
            public string GetMachineName(BrowserItem item)
            {
                while (item.ParentItem.ItemType != BrowserItemType.Root)
                {
                    item = item.ParentItem;
                }
             
                if (item.ParentItem == Browser.RemoteRoot)
                {
                    // If the parent item is the remote root, then the
                    // current item must be a machine
                    return item.Name;
                }
                else if (item.ParentItem == Browser.LocalRoot)
                {
                    // if the parent item is the local root, then the parent
                    // item represents the machine
                    return item.ParentItem.Name;
                }
             
                return "";
            }
            </code>
            </example>
            <seealso cref="P:NationalInstruments.NetworkVariable.Browser.LocalRoot"/>
            <seealso cref="P:NationalInstruments.NetworkVariable.Browser.RemoteRoot"/>
            <lastupdated>3/25/2008 3:18:03 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.BrowserItem.ItemType">
            <summary>
            Gets a value that indicates what kind of network variable item this object represents.
            </summary>
            <value>
            A member of the <see cref="T:NationalInstruments.NetworkVariable.BrowserItemType"/> enumeration
            that describes the type of network variable item this object represents.
            </value>
            <seealso cref="T:NationalInstruments.NetworkVariable.BrowserItemType"/>
            <lastupdated>3/25/2008 3:17:01 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.BrowserItem.IsRegistered">
            <summary>
            Gets a value that indicates if an item that represents a machine is a registered machine.
            </summary>
            <value>
            	<see langword="true"/> if the item represents a registered machine.
            </value>
            <remarks>
            	<para>
            The value of this property is always false for items that do not have an
            <see cref="P:NationalInstruments.NetworkVariable.BrowserItem.ItemType"/> of 
            <see cref="F:NationalInstruments.NetworkVariable.BrowserItemType.Machine"/>.
            </para>
            </remarks>
            <seealso cref="M:NationalInstruments.NetworkVariable.Browser.RegisterMachine(System.String)"/>
            <seealso cref="M:NationalInstruments.NetworkVariable.Browser.UnregisterMachine(System.String)"/>
            <lastupdated>3/25/2008 3:16:44 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.BrowserItem.IsLeaf">
            <summary>
            Gets a value that indicates whether this item is a leaf item.
            </summary>
            <value>
            	<see langword="true"/> if the item has no child items.
            </value>
            <lastupdated>3/25/2008 3:16:25 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.BrowserItem.GetVariableType">
            <summary>
            Gets the type of an object that represents a network variable.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of the network variable.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The item is not a network variable.
            </exception>
            <remarks>
            This method is only valid when <see cref="P:NationalInstruments.NetworkVariable.BrowserItem.ItemType"/>
            has the <see cref="F:NationalInstruments.NetworkVariable.BrowserItemType.Item"/> value.
            </remarks>
            <lastupdated>3/25/2008 3:18:33 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.BrowserItem.Name">
            <summary>
            Gets the name of the network variable item.
            </summary>
            <value>
            The name of the network variable item.
            </value>
            <remarks>
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, the name of 
            <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> objects must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character. If the name contains unmappable characters, the unmappable characters
            are replaced by substitution characters.  For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	
            </remarks>
            <lastupdated>10/2/2009 3:50:16 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.BrowserItem.ToString">
            <summary>
            Gets a string that represents an object.
            </summary>
            <returns>
            A string that represents a <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> object.
            </returns>
            <lastupdated>3/25/2008 3:18:38 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.BrowserItemType">
            <summary>
            Specifies the type of network variable item that a 
            <see cref="T:NationalInstruments.NetworkVariable.BrowserItem"/> represents.
            </summary>
            <lastupdated>3/25/2008 5:25:11 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.BrowserItemType.Undefined">
            <summary>
            The type of the item is undefined.
            </summary>
            <lastupdated>3/25/2008 5:26:19 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.BrowserItemType.Machine">
            <summary>
            A machine.
            </summary>
            <lastupdated>3/25/2008 5:26:00 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.BrowserItemType.Process">
            <summary>
            A process.
            </summary>
            <lastupdated>3/25/2008 5:26:03 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.BrowserItemType.Folder">
            <summary>
            A folder.
            </summary>
            <lastupdated>3/25/2008 5:25:15 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.BrowserItemType.Item">
            <summary>
            A network variable.
            </summary>
            <lastupdated>3/25/2008 5:25:57 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.BrowserItemType.Range">
            <summary>
            A range item.
            </summary>
            <lastupdated>3/25/2008 5:26:07 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.BrowserItemType.ImplicitItem">
            <summary>
            An implicit item. To connect to this item, specify the path name of the parent item.
            </summary>
            <remarks>
            	<note type="note">
            This is different from network variables that are created implicitly; the 
            <see cref="T:NationalInstruments.NetworkVariable.Browser"/> class reports a type of
            <see cref="F:NationalInstruments.NetworkVariable.BrowserItemType.Item"/> for network variables.
            </note>
            </remarks>
            <lastupdated>9/16/2008 10:50:14 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.BrowserItemType.Root">
            <summary>
            The root of a network variable structure.
            </summary>
            <lastupdated>3/25/2008 5:26:12 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.NetworkVariableStringConverter">
            <summary>
            Provides methods that assist with reading and writing <see cref="T:System.String"/> values that contain characters that are not supported
            by <see cref="N:NationalInstruments.NetworkVariable"/>.
            </summary>
            <remarks>
            	<para>
            This class is intended for use in advanced scenarios where you need to transfer <see cref="T:System.String"/> values between
            machines that have different system default code pages.  Having different system default code pages can cause a loss of data.  For more information about the causes
            and symptoms of this data loss, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            </para>
            	<para>
            To use this class, you must use a network variable that you configure to use a <see cref="T:System.Byte"/>  array instead of a
            <see cref="T:System.String"/>.  When you need to write a <see cref="T:System.String"/> value to the network variable, use the
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.GetBytes(System.String)"/> method to convert the value into an array,
            and then write the array.  When you read the array from the network variable, use the 
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.GetString(System.Byte[])"/> method to convert the array back into a
            <see cref="T:System.String"/>.  <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableStringConverter"/> uses
            <see cref="F:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.DefaultEncoding"/>, an
            <see cref="T:System.Text.Encoding"/> that supports Unicode characters, to convert the values unless you specify a different
            <see cref="T:System.Text.Encoding"/>.  If you are using network variables to transfer information between a
            Measurement Studio application and LabVIEW or LabWindows/CVI, your LabVIEW or LabWindows/CVI application must include code to convert between
            strings and byte arrays using the appropriate encoding.
            </para>
            	<note type="note">
            The <see cref="T:System.Text.Encoding"/> used to convert a <see cref="T:System.String"/> into a <see cref="T:System.Byte"/> array
            must be the same as the <see cref="T:System.Text.Encoding"/> used to convert the <see cref="T:System.Byte"/> array back into a
            <see cref="T:System.String"/>, or data may be lost.
            </note>
            </remarks>
            <lastupdated>10/15/2009 6:23:41 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.DefaultEncoding">
            <summary>
            The default encoding used by <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableStringConverter"/>
            to convert <see cref="T:System.String"/> values to <see cref="T:System.Byte"/> arrays and back to <see cref="T:System.String"/> values.
            </summary>
            <remarks>
            The encoding used for the value of <see cref="F:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.DefaultEncoding"/>
            is <see cref="P:System.Text.Encoding.UTF8"/>.
            </remarks>
            <lastupdated>10/15/2009 6:24:01 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.RequiresConversion(System.String)">
            <summary>
            Determines if you must convert a <see cref="T:System.String"/> to a <see cref="T:System.Byte"/> array, to prevent data loss, before using it with a network variable.
            </summary>
            <param name="value">
            The string to test.
            </param>
            <returns>
            	<see langword="true"/> if the string will lose data if written to a network variable; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            	<para>
            Use this method to determine if you can write a string to a network variable without data loss.  If 
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.RequiresConversion(System.String)"/> returns <see langword="true"/>,
            you can prevent data loss by using a network variable configured to use a <see cref="T:System.Byte"/> array and using the
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.GetBytes(System.String)"/> method to convert the string into a
            <see cref="T:System.Byte"/> array.  You can convert the <see cref="T:System.Byte"/> array back to a string with the
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.GetString(System.Byte[])"/> method.  Refer to
            <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see> for more
            information.
            </para>
            </remarks>
            <lastupdated>10/16/2009 12:35:04 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.GetBytes(System.String)">
            <summary>
            Converts a <see cref="T:System.String"/> to a <see cref="T:System.Byte"/> array that you can send
            to a network variable without data loss.
            </summary>
            <param name="value">
            The string to convert.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="value"/> is null.
            </exception>
            <exception cref="T:System.Text.EncoderFallbackException">
            	<see cref="F:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.DefaultEncoding"/>
            cannot convert <see paramref="value"/> to a <see cref="T:System.Byte"/> array without a loss of data.
            </exception>
            <returns>
            A <see cref="T:System.Byte"/> array that represents the string using <see cref="F:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.DefaultEncoding"/>.
            </returns>
            <remarks>
            	<para>
            Use the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.RequiresConversion(System.String)"/> property  to determine if you must convert a string to prevent data loss.  To send strings with no data loss, use a network variable and configure the variable type as a <see cref="T:System.Byte"/> array; then use the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.GetBytes(System.String)"/> method
            to convert the string into a <see cref="T:System.Byte"/> array.  After the value is read, you can convert the <see cref="T:System.Byte"/> array back to the original <see cref="T:System.String"/> with the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.GetString(System.Byte[])"/>
            method. Refer to
            <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see> for more
            information.
            </para>
            	<para>
            This overload uses the encoding specified by the <see cref="F:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.DefaultEncoding"/>
            property.
            </para>
            </remarks>
            <lastupdated>10/15/2009 6:25:02 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.GetBytes(System.String,System.Text.Encoding)">
            <summary>
            Converts a <see cref="T:System.String"/> to a <see cref="T:System.Byte"/> array that you can send
            to a network variable without data loss and with the specified <see cref="T:System.Text.Encoding"/>.
            </summary>
            <param name="value">
            The string to convert.
            </param>
            <param name="encoding">
            The <see cref="T:System.Text.Encoding"/> to use when converting <paramref name="value"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="value"/> is <see langword="null"/>.
            </para>
            	<para> - or - </para>
            	<para>
            		<paramref name="encoding"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.Text.EncoderFallbackException">
            	<paramref name="encoding"/>
            cannot convert <see paramref="value"/> to a <see cref="T:System.Byte"/> array without a loss of data.
            </exception>
            <returns>
            A <see cref="T:System.Byte"/> array that represents the string using <see cref="F:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.DefaultEncoding"/>.
            </returns>
            <remarks>
            	<para>
            Use the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.RequiresConversion(System.String)"/> property  to determine if you must convert a string to prevent data loss.  To send strings with no data loss, use a network variable and configure the variable type as a <see cref="T:System.Byte"/> array; then use the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.GetBytes(System.String)"/> method
            to convert the string into a <see cref="T:System.Byte"/> array.  After the value is read, you can convert the <see cref="T:System.Byte"/> array back to the original <see cref="T:System.String"/> with the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.GetString(System.Byte[])"/>
            method. Refer to
            <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see> for more
            information.
            </para>
            	<para>
            You must use the same <see cref="T:System.Text.Encoding"/> when you call <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.GetString(System.Byte[])"/>
            and <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.GetBytes(System.String)"/>, or the string may not be converted properly.
            </para>
            </remarks>
            <lastupdated>10/15/2009 6:25:46 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.GetString(System.Byte[])">
            <summary>
            Converts a <see cref="T:System.Byte"/> array into a <see cref="T:System.String"/> using
            <see cref="F:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.DefaultEncoding"/>.
            </summary>
            <param name="bytes">
            The array to convert.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="bytes"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
            	<see cref="F:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.DefaultEncoding"/> cannot
            convert <paramref name="bytes"/> into a string without a loss of data.
            </exception>
            <returns>
            The string that <paramref name="bytes"/> represents.
            </returns>
            <remarks>
            	<para>
            Use the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.RequiresConversion(System.String)"/> property  to determine if you must convert a string to prevent data loss.  To send strings with no data loss, use a network variable and configure the variable type as a <see cref="T:System.Byte"/> array; then use the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.GetBytes(System.String)"/> method
            to convert the string into a <see cref="T:System.Byte"/> array.  After the value is read, you can convert the <see cref="T:System.Byte"/> array back to the original <see cref="T:System.String"/> with the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.GetString(System.Byte[])"/>
            method. Refer to
            <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see> for more
            information.
            </para>
            	<para>
            This overload uses <see cref="F:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.DefaultEncoding"/> to
            convert <paramref name="bytes"/> into a string.
            </para>
            </remarks>
            <lastupdated>10/15/2009 6:26:08 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.GetString(System.Byte[],System.Text.Encoding)">
            <summary>
            Converts a <see cref="T:System.Byte"/> array into a <see cref="T:System.String"/> with the specified
            <see cref="T:System.Text.Encoding"/>.
            </summary>
            <param name="bytes">
            The array to convert.
            </param>
            <param name="encoding">
            The <see cref="T:System.Text.Encoding"/> to use when converting <paramref name="bytes"/> into a <see cref="T:System.String"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="bytes"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Text.DecoderFallbackException">
            	<paramref name="encoding"/> cannot
            convert <paramref name="bytes"/> into a string without a loss of data.
            </exception>
            <returns>
            The string that <paramref name="bytes"/> represents.
            </returns>
            <remarks>
            	<para>
            Use the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.RequiresConversion(System.String)"/> property  to determine if you must convert a string to prevent data loss.  To send strings with no data loss, use a network variable and configure the variable type as a <see cref="T:System.Byte"/> array; then use the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.GetBytes(System.String)"/> method
            to convert the string into a <see cref="T:System.Byte"/> array.  After the value is read, you can convert the <see cref="T:System.Byte"/> array back to the original <see cref="T:System.String"/> with the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.GetString(System.Byte[])"/>
            method. Refer to
            <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see> for more
            information.
            </para>
            	<para>
            You must use the same <see cref="T:System.Text.Encoding"/> when you call <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.GetString(System.Byte[])"/>
            and <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableStringConverter.GetBytes(System.String)"/>, or the string may not be converted properly.
            </para>
            </remarks>
            <lastupdated>10/15/2009 6:26:40 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.ServerProcess">
            <summary>
            	<para>
            Provides methods to create, manipulate, and examine the properties of network variable processes. 
            </para>
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            	<para>
            Use this class when you want to manipulate several processes quickly or explore the processes
            available on the local machine.  If you want to periodically perform operations on a
            particular process, consider using the 
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/> class.
            </para>
            	<para>
            The ServerProcess class can only access network variable processes on the local machine.
            </para>
            	<note type="note">
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/> class.
            </note>
            </remarks>
            <security condition="unmanagedcode"/>
            <seealso cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/>
            <lastupdated>10/2/2009 6:22:55 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcess.Create(System.String)">
            <summary>
            Creates a network variable process.
            </summary>
            <param name="name">
            The name of the created process.
            </param>
            <returns>
            A new <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/> instance that represents
            the process that is created.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="name"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            A process with the name specified in <paramref name="name"/> already exists.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The process name is a reserved name.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The network variable class library encountered an error.  Details about this error are in the <see cref="P:System.Exception.Message"/> property of the exception.
            </exception>
            <remarks>
            	<para>
            A process created by this method will be in the stopped state and must be manually started
            before the variables of the process can be used.  A process can be started through Distributed System Manager or the
            <see cref="M:NationalInstruments.NetworkVariable.ServerProcess.Start(System.String)"/> method.  If you wish for a process
            to be started as soon as it is created, use <see cref="M:NationalInstruments.NetworkVariable.ServerProcess.Create(System.String)"/>.
            </para>
            	<note type="note">
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/> class.
            </note>
            </remarks>
            <lastupdated>10/2/2009 6:26:34 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcess.Create(System.String,System.Boolean)">
            <summary>
            Creates a network variable process and specifies whether the process should be started after creation.
            </summary>
            <param name="name">
            The name of the created process.
            </param>
            <param name="start">
            If <see langword="true"/>, the process starts after creation.  If 
            <see langword="false"/>, the process is not started.
            </param>
            <returns>
            A new <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/> instance that represents
            the created process.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="name"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            A process with the name specified in <paramref name="name"/> already exists.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The process name is a reserved name.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The network variable class library encountered an error.  Details about this error are in the
            <see cref="P:System.Exception.Message"/> property of the exception.
            </exception>
            <remarks>
            	<para>
            The variables in a process that has not been started cannot be used.
            </para>
            	<note type="note">
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/> class.
            </note>
            </remarks>
            <lastupdated>10/2/2009 6:26:35 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcess.Delete(System.String)">
            <summary>
            Deletes a network variable process.
            </summary>
            <param name="name">
            The name of the deleted process.
            </param>
            <returns>
            	<see langword="true"/> if the process existed and is deleted.  If the process did
            not exist when this method is called, <see langword="false"/> is returned.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="name"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The process name is a reserved name.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/> class.
            </remarks>
            <lastupdated>10/2/2009 6:26:35 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcess.Exists(System.String)">
            <summary>
            Indicates if a network variable process exists on the local machine.
            </summary>
            <param name="name">
            The name of the process.
            </param>
            <returns>
            	<see langword="true"/> if the process exists, otherwise <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="name"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="name"/> was null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The process name is a reserved name.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are for reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/> class.
            </remarks>
            <lastupdated>10/2/2009 6:26:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcess.GetAll">
            <summary>
            Retrieves information about all network variable processes that exist on the local machine.
            </summary>
            <returns>
            An array of <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/>
            instances that represents the processes that exist on the local machine.
            </returns>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            The processes named <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix are reserved.  These processes are not included in the
            array returned by <see cref="M:NationalInstruments.NetworkVariable.ServerProcess.GetAll"/>.
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If there is a process with a name that contains unmappable characters, the <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/> object for this
            process will have a name that replaces the characters with substitution characters.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 4:01:19 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcess.IsRunning(System.String)">
            <summary>
            Indicates if a network variable process is started.
            </summary>
            <param name="name">
            The name of the process.
            </param>
            <returns>
            	<see langword="true"/> if the process is started.  <see langword="false"/> if the process is stopped.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="name"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            A process with the specified name does not exist.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The process name is a reserved name.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            Any  variables that exist in a process that is stopped are unavailable for use with
            any network variable readers, writers, or subscriber classes.
            </para>
            	<note type="note">
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/> class.
            </note>
            </remarks>
            <seealso cref="M:NationalInstruments.NetworkVariable.ServerProcess.Start(System.String)"/>
            <seealso cref="M:NationalInstruments.NetworkVariable.ServerProcess.Stop(System.String)"/>
            <lastupdated>10/2/2009 6:26:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcess.Start(System.String)">
            <summary>
            Starts a network variable process.
            </summary>
            <param name="name">
            The name of the process that is started.
            </param>
            <exception cref="T:System.ArgumentException">
            	<paramref name="name"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            A process with the specified name does not exist.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The process name is a reserved name.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            Variables that exist in a process that is not started are not available for use with 
            network variable readers, writers, or subscribers.
            </para>
            	<note type="note">
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/> class.
            </note>
            </remarks>
            <seealso cref="M:NationalInstruments.NetworkVariable.ServerProcess.IsRunning(System.String)"/>
            <seealso cref="M:NationalInstruments.NetworkVariable.ServerProcess.Stop(System.String)"/>
            <lastupdated>10/2/2009 6:26:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcess.Stop(System.String)">
            <summary>
            Stops a network variable process.
            </summary>
            <param name="name">
            The name of the process that is stopped.
            </param>
            <exception cref="T:System.ArgumentException">
            	<paramref name="name"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            A process with the specified name does not exist.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The process name is a reserved name.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            Variables that exist in a process that is not started are not available for use with
            network variable readers, writers, or subscribers.
            </para>
            </remarks>
            <note type="note">
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/> class.
            </note>
            <seealso cref="M:NationalInstruments.NetworkVariable.ServerProcess.IsRunning(System.String)"/>
            <seealso cref="M:NationalInstruments.NetworkVariable.ServerProcess.Start(System.String)"/>
            <lastupdated>10/2/2009 6:26:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.ServerProcessInfo">
            <summary>
            Represents a network variable process and provides methods for creating, deleting, and manipulating the process.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            	<para>
            The <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/> class provides similar 
            functionality to the <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/> class.  
            Use the <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/> class when you 
            perform several operations with a particular process, or if you need to periodically
            manipulate the process.  By creating an instance of the 
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/> class, you can
            avoid the need to provide the name of the network variable process with every method call.
            </para>
            	<para>
            The network variables under a process that is not running are not available for use to any
            network variable readers, writers, or subscribers.  Use the
            <see cref="M:NationalInstruments.NetworkVariable.ServerProcessInfo.Start"/> and
            <see cref="M:NationalInstruments.NetworkVariable.ServerProcessInfo.Stop"/> method to control whether a
            process is running.
            </para>
            	<para>
            The <see cref="M:NationalInstruments.NetworkVariable.ServerProcessInfo.CreateVariable(System.String)"/> and
            <see cref="M:NationalInstruments.NetworkVariable.ServerProcessInfo.CreateVariables(System.String[])"/> methods provide
            a convenient way to create network variables; for advanced configuration of network variables, use the
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariable"/> or
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> classes.
            </para>
            	<note type="note">
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/> class.
            </note>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>10/2/2009 6:26:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcessInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/>
            class that represents a process with the specified name.
            </summary>
            <param name="name">
            The name of the process.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="name"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<paramref name="name"/> is a reserved process name.
            </exception>
            <remarks>
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/> class.
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, <paramref name="name"/> must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If <paramref name="name"/> contains unmappable characters,
            setting properties or calling methods on the <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/>
            throws an exception.  For more information, Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 6:27:01 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.ServerProcessInfo.Exists">
            <summary>
            Gets a value indicating whether a network variable process exists.
            </summary>
            <value>
            	<see langword="true"/> if the process exists, otherwise <see langword="false"/>.
            </value>
            <exception cref="T:System.ArgumentException">
            	The process name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/> class.
            </remarks>
            <lastupdated>10/2/2009 6:26:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.ServerProcessInfo.FullPath">
            <summary>
            Gets the full path to a network variable process.
            </summary>
            <value>
            The full path to the network variable process.
            </value>
            <remarks>
            	<para>
            The full path includes the machine name and process name in a format similar
            to the format of network shares.  For example, the value of <see cref="P:NationalInstruments.NetworkVariable.ServerProcessInfo.FullPath"/> for a process
            named "MyProcess" is <c>\\localhost\MyProcess</c>.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If the machine name or process name contains unmappable characters, the characters may  be replaced with substitution characters.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 4:01:56 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.ServerProcessInfo.Name">
            <summary>
            Gets a value that indicates the name of the network variable process this instance represents.
            </summary>
            <value>
            The name of the process.
            </value>
            <remarks>
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If the process name contains unmappable characters, the characters are replaced with substitution characters.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            </remarks>
            <lastupdated>10/2/2009 4:02:14 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.ServerProcessInfo.IsRunning">
            <summary>
            Gets a value indicating whether a network variable process is started.
            </summary>
            <value>
            	<see langword="true"/> if the process is started, otherwise <see langword="false"/>.
            </value>
            <exception cref="T:System.ArgumentException">
            	The process name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            Variables that exist in a process that is not started are not available for use with
            network variable readers, writers, or subscribers.  Use the
            <see cref="M:NationalInstruments.NetworkVariable.ServerProcessInfo.Start"/> and
            <see cref="M:NationalInstruments.NetworkVariable.ServerProcessInfo.Stop"/> methods to control
            whether the process is running.
            </para>
            	<note type="note">
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/> class.
            </note>
            </remarks>
            <seealso cref="M:NationalInstruments.NetworkVariable.ServerProcessInfo.Start"/>
            <seealso cref="M:NationalInstruments.NetworkVariable.ServerProcessInfo.Stop"/>
            <lastupdated>10/2/2009 6:26:38 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.ServerProcessInfo.RelativePath">
            <summary>
            Gets the path to a network variable process relative to the local machine.
            </summary>
            <value>
            The relative path to a network variable process.
            </value>
            <remarks>
            	<para>
            The relative path for a network variable process returns the name of the process.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If the machine name or process name contains unmappable characters, the characters may be replaced with substitution characters.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 4:02:39 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcessInfo.Create">
            <summary>
            Creates a network variable process.
            </summary>
            <exception cref="T:System.ArgumentException">
            	The process name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            A process with the same name already exists.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            By default, a process created by this method is not started.  Variables that exist in a
            process that is not been started are not available for use with network variable readers, 
            writers, or subscribers.  If you want the process to start automatically, consider
            using the overloaded <see cref="M:NationalInstruments.NetworkVariable.ServerProcessInfo.Create"/>
            instead, or use the <see cref="M:NationalInstruments.NetworkVariable.ServerProcessInfo.Start"/>
            and <see cref="M:NationalInstruments.NetworkVariable.ServerProcessInfo.Stop"/> methods to control
            whether the process is running.
            </para>
            	<note type="note">
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/> class.
            </note>
            </remarks>
            <seealso cref="M:NationalInstruments.NetworkVariable.ServerProcessInfo.Create"/>
            <seealso cref="M:NationalInstruments.NetworkVariable.ServerProcessInfo.Start"/>
            <seealso cref="M:NationalInstruments.NetworkVariable.ServerProcessInfo.Stop"/>
            <lastupdated>10/2/2009 6:26:38 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcessInfo.Create(System.Boolean)">
            <summary>
            Creates a network variable process and ensures the process are either started or stopped.
            </summary>
            <param name="start">
            If <see langword="true"/>, the process is started after the process is created.
            </param>
            <exception cref="T:System.ArgumentException">
            	The process name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            A process with the same name already exists.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            Variables that exist in a process that is not started are not available for use with
            network variable readers, writers, or subscribers.  After the process is created, use
            the <see cref="M:NationalInstruments.NetworkVariable.ServerProcessInfo.Start"/> and
            <see cref="M:NationalInstruments.NetworkVariable.ServerProcessInfo.Stop"/> methods to control whether
            the process is running.
            </para>
            	<note type="note">
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/> class.
            </note>
            </remarks>
            <seealso cref="M:NationalInstruments.NetworkVariable.ServerProcessInfo.Create"/>
            <seealso cref="M:NationalInstruments.NetworkVariable.ServerProcessInfo.Start"/>
            <seealso cref="M:NationalInstruments.NetworkVariable.ServerProcessInfo.Stop"/>
            <lastupdated>10/2/2009 6:26:38 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcessInfo.CreateVariable(System.String)">
            <summary>
            Creates a network variable under the process represented by this instance.
            </summary>
            <param name="variableName">
            The name of the variable that is created.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> instance that represents the
            variable that is created.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            	The process name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            		<paramref name="variableName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="variableName"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            A process with the same name as this instance does not exist.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the exception's Message property for more information.
            </exception>
            <remarks>
            	<para>
            Network variables created with this method are configured to allow connections from multiple
            writers, have no item buffer, and have a blank description.  If you want to configure these properties at creation, use
            <see cref="M:NationalInstruments.NetworkVariable.ServerProcessInfo.CreateVariable(System.String)"/> or
            manipulate the properties of the 
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> instance that is returned.</para>
            	<note type="note">
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/> class.
            </note>
            </remarks>
            <lastupdated>10/2/2009 6:28:01 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcessInfo.CreateVariable(System.String,System.Boolean,System.Int32)">
            <summary>
            Creates a network variable in the process represented by this instance.
            </summary>
            <param name="variableName">
            The name of the variable.
            </param>
            <param name="singleWriter">
            If <see langword="true"/>, the variable only accepts connections from one writer at a time.
            </param>
            <param name="maxItems">
            The number of items the variables buffer should contain.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> instance that represents the
            variable that is created.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            	The process name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            		<paramref name="variableName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="variableName"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="maxItems"/> is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            A process with the same name as this instance does not exist.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            A variable with the same name already exists in this process.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred. Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            To create and configure a variable using the <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/>
            class, use the <see cref="M:NationalInstruments.NetworkVariable.ServerProcessInfo.CreateVariable(System.String)"/> overload
            that takes a <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/>
            parameter.
            </para>
            	<note type="note">
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/> class.
            </note>
            </remarks>
            <lastupdated>10/2/2009 6:26:39 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcessInfo.CreateVariable(NationalInstruments.NetworkVariable.VariableCreationOptions)">
            <summary>
            Creates a network variable with the specified configuration in the process represented by this instance.
            </summary>
            <param name="creationOptions">
            A <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/> object that represents
            the variable that will be created.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> object  that represents the
            variable that is created.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="creationOptions"/> indicates a process or variable name that contains 
            characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="creationOptions"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            A process with the same name as this instance does not exist.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            A variable with the same name already exists in this process.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred. Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/> class.
            </remarks>
            <lastupdated>10/2/2009 6:26:39 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcessInfo.CreateVariables(System.String[])">
            <summary>
            Creates multiple network variables under the process this instance represents.
            </summary>
            <param name="variableNames">
            An array of names for network variables.
            </param>
            <returns>
            An array of <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> instances that
            represent each variable that is created.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            	The process name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="variableNames"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            A process with the same name as this instance does not exist.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            By default, network variables created with this method are configured to allow connections from
            multiple writers, have no buffer, and have a blank description.  To configure these attributes, use the
            overloaded <see cref="M:NationalInstruments.NetworkVariable.ServerProcessInfo.CreateVariables(System.String[])"/> that takes
            a <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/> parameter or
            manipulate the properties of the <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/>
            that is returned by this method.
            </para>
            	<para>
            Any network variables that already exist in this process that have the same name as an item in
            <paramref name="variableNames"/> are reconfigured with the default values previously explained.
            No exception is thrown to indicate this has happened. 
            </para>
            	<para>
            Using this method to create multiple variables is faster than creating the variables 
            individually.
            </para>
            	<para>
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/> class.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If any of the variable names contain unmappable characters, the characters are replaced with substitution characters and the
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> that represents the variable will have the
            substitution characters in its <see cref="P:NationalInstruments.NetworkVariable.ServerVariableInfo.Name"/>.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <seealso cref="M:NationalInstruments.NetworkVariable.ServerProcessInfo.CreateVariables(System.String[])"/>
            <lastupdated>10/2/2009 6:26:40 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcessInfo.CreateVariables(System.String[],System.Boolean,System.Int32)">
            <summary>
            Creates and configures multiple network variables under the process this instance represents.
            </summary>
            <param name="variableNames">
            An array of names for network variables.
            </param>
            <param name="singleWriter">
            If <see langword="true"/>, the variable only accepts connections from one writer at a time.
            </param>
            <param name="maxItems">
            The total number of items contained in the variable buffer.
            </param>
            <returns>
            An array of <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> instances that
            represent each variable that is created.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            	The process name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="variableNames"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="maxItems"/> is a negative number.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            A process with the same name as this instance does not exist.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            Use the overloaded <see cref="M:NationalInstruments.NetworkVariable.ServerProcessInfo.CreateVariables(System.String[])"/>
            that takes a
            <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/> parameter instead of this
            method.
            </para>
            	<para>
            Any network variables that already exist in this process that have the same name as an item in
            <paramref name="variableNames"/> are reconfigured with given property values.  No
            exception is thrown to indicate this has happened.
            </para>
            	<para>
            Using this method to create multiple variables is faster than creating the variables 
            individually.
            </para>
            	<para>
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/> class.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If any of the variable names contain unmappable characters, the characters are replaced with substitution characters and the
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> that represents the variable will have the
            substitution characters in its <see cref="P:NationalInstruments.NetworkVariable.ServerVariableInfo.Name"/>.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 6:26:40 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcessInfo.CreateVariables(System.Collections.Generic.IEnumerable{NationalInstruments.NetworkVariable.VariableCreationOptions})">
            <summary>
            Creates and configures multiple network variables under the process this instance represents.
            </summary>
            <param name="creationOptions">
            A collection of <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/>
            objects that describe the variables that will be created.
            </param>
            <returns>
            An array of <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> instances that
            represent each created variable.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            A <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/> object in <paramref name="creationOptions"/>
            indicates a process name that contains characters that cannot be converted using the system default code
            page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="creationOptions"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            A process with the same name as one of the specified processes does not exist.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            This method supports creating variables in multiple processes; the value of the 
            <see cref="P:NationalInstruments.NetworkVariable.ServerProcessInfo.Name"/> property of this object is ignored.  Each
            process must exist for the variables to be created.
            </para>
            	<para>
            Any network variables that already exist in the specified process that have the same name as an item in
            <paramref name="creationOptions"/> are reconfigured with given property values.  No
            exception is thrown to indicate this has happened.
            </para>
            	<para>
            Using this method to create multiple variables is faster than creating the variables 
            individually.
            </para>
            	<para>
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/> class.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If any of the variable names contain unmappable characters, the characters are replaced with substitution characters and the
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> that represents the variable will have the
            substitution characters in its <see cref="P:NationalInstruments.NetworkVariable.ServerVariableInfo.Name"/>.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 6:26:59 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcessInfo.Delete">
            <summary>
            Deletes a network variable process.
            </summary>
            <returns>
            	<see langword="true"/> if the process existed and is successfully deleted.
            <see langword="false"/> if the process did not exist when this method is called.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            	The process name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of this exception for more information.
            </exception>
            <lastupdated>10/2/2009 6:00:00 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcessInfo.DeleteVariable(System.String)">
            <summary>
            Deletes a network variable contained within this process.
            </summary>
            <param name="variableName">
            The name of the variable.
            </param>
            <returns>
            	<see langword="true"/> if the variable existed and is deleted.  <see langword="false"/> if 
            either the process or variable did not exist when the method is called.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            	The process name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            		<paramref name="variableName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="variableName"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <lastupdated>10/2/2009 6:00:00 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcessInfo.GetVariable(System.String)">
            <summary>
            Gets a <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> instance for the specified
            variable.
            </summary>
            <param name="variableName">
            The name of the variable.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> instance that represents the 
            variable.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            	The process name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            		<paramref name="variableName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="variableName"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The process or variable does not exist.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <lastupdated>10/2/2009 6:00:01 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcessInfo.GetVariables">
            <summary>
            Gets the list of variables in a process.
            </summary>
            <returns>
            An array of <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> instances that
            represent each network variable.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            	The process name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The process or variable does not exist.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If any of the variable names contain unmappable characters, the characters are replaced with substitution characters and the
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> that represents the variable will have the
            substitution characters in its <see cref="P:NationalInstruments.NetworkVariable.ServerVariableInfo.Name"/>.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            </remarks>
            <lastupdated>10/2/2009 4:04:42 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcessInfo.HasVariable(System.String)">
            <summary>
            Determines if a variable exists in a process.
            </summary>
            <param name="variableName">
            The name of the variable.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            	The process name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            		<paramref name="variableName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <returns>
            	<see langword="true"/> if the variable exists.
            </returns>
            <lastupdated>10/2/2009 6:00:15 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcessInfo.Start">
            <summary>
            Starts a network variable process.
            </summary>
            <exception cref="T:System.ArgumentException">
            	<para>
            	The process name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The process does not exist.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            Variables that exist in a process that are not started are not available for use with
            network variable readers, writers, or subscribers.
            </para>
            	<para>
            If the process is already running, this method does nothing.
            </para>
            </remarks>
            <lastupdated>10/2/2009 6:00:02 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcessInfo.Stop">
            <summary>
            Stops a network variable process.
            </summary>
            <exception cref="T:System.ArgumentException">
            	<para>
            	The process name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The process does not exist.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            Variables that exist in a process that are not started are not available for use with
            network variable readers, writers, or subscribers.
            </para>
            	<para>
            If the process is not running, this method does nothing.
            </para>
            </remarks>
            <lastupdated>10/2/2009 6:00:02 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerProcessInfo.ToString">
            <summary>
            Gets a string representation of the object.
            </summary>
            <returns>
            The string representation of the object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <lastupdated>3/25/2008 4:26:09 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.ServerVariable">
            <summary>
            Defines methods to create and configure network variables.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            	<para>
            Use the <see cref="T:NationalInstruments.NetworkVariable.ServerVariable"/> class
            when you want to create or configure a variable, but you do not want to work with instances of
            the <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> class.  If you want to
            periodically reconfigure a network variable, it is more convenient to use an instance of the
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> class, since the process name and
            variable name do not need to be provided with each method call.
            </para>
            	<para>
            You can use the <see cref="M:NationalInstruments.NetworkVariable.ServerVariable.Create(System.String,System.String)"/> method to create network variables.
            To set attributes on the variable, use the override of
            <see cref="M:NationalInstruments.NetworkVariable.ServerVariable.Create(System.String,System.String)"/> that takes a
            <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/> parameter.  If you
            are creating many variables, the 
            <see cref="M:NationalInstruments.NetworkVariable.ServerVariable.CreateMultiple(System.String,System.String[])"/> method is easier
            and more efficient.  To configure a variable that already exists, use methods such as
            <see cref="M:NationalInstruments.NetworkVariable.ServerVariable.SetDescription(System.String,System.String,System.String)"/> and 
            <see cref="M:NationalInstruments.NetworkVariable.ServerVariable.SetItemCapacity(System.String,System.String,System.Int32)"/>.
            </para>
            	<para>
            The <see cref="T:NationalInstruments.NetworkVariable.ServerVariable"/> class can only access network
            variables on the local machine.
            </para>
            	<note type="note">
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariable"/> class.
            </note>
            </remarks>
            <lastupdated>10/2/2009 6:26:42 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerVariable.Create(System.String,System.String)">
            <summary>
            Creates a network variable in the specified process with default configuration values.
            </summary>
            <param name="processName">
            The process that contains the variable.
            </param>
            <param name="variableName">
            The name of the variable.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> that represents
            the new variable.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="processName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            		<paramref name="variableName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="processName"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="variableName"/> is <see langword="null"/>
            	</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The specified process does not exist.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            A variable with the same name already exists in the specified process.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="processName"/> is a reserved process name.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            This method creates a variable that allows connections from multiple writers
            and has no buffer.  You can use the return value to configure the variable or you can use
            the <see cref="M:NationalInstruments.NetworkVariable.ServerVariable.Create(System.String,System.String)"/> method that takes
            a <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/> parameter to automatically
            configure the variable.
            </para>
            	<para>
            If you wish to create several variables at once, consider using the
            <see cref="M:NationalInstruments.NetworkVariable.ServerVariable.CreateMultiple(System.String,System.String[])"/> method for better
            performance.
            </para>
            	<note type="note">
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariable"/> class.
            </note>
            </remarks>
            <lastupdated>10/2/2009 6:26:43 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerVariable.Create(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Creates a network variable in the specified process with the specified configuration.
            </summary>
            <param name="processName">
            The name of the process that contains the variable.
            </param>
            <param name="variableName">
            The name of the variable.
            </param>
            <param name="singleWriter">
            If <see langword="true"/>, the variable only accepts connections from one writer at a time.
            </param>
            <param name="maxItems">
            The number of items the variable buffer holds.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> that represents the variable.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="processName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            		<paramref name="variableName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="processName"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="variableName"/> is <see langword="null"/>
            	</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="maxItems"/> is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The specified process does not exist.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            A variable with the same name already exists in the specified process.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="processName"/> is a reserved process name.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            Use the <see cref="M:NationalInstruments.NetworkVariable.ServerVariable.Create(System.String,System.String)"/> method that takes
            a <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/> parameter instead of this
            method if you want to configure the variable when it is created.
            </para>
            	<para>
            Since the buffer size and single writer status must be set, this method is slower than the
            <see cref="M:NationalInstruments.NetworkVariable.ServerVariable.Create(System.String,System.String)"/> method that does
            not have the <paramref name="singleWriter"/> and <paramref name="maxItems"/> parameters.
            If you want to create many variables with these attributes efficiently, consider using
            <see cref="M:NationalInstruments.NetworkVariable.ServerVariable.CreateMultiple(System.String,System.String[])"/> instead.
            </para>
            	<note type="note">
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariable"/> class.
            </note>
            </remarks>
            <lastupdated>10/2/2009 6:26:43 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerVariable.Create(NationalInstruments.NetworkVariable.VariableCreationOptions)">
            <summary>
            Creates a network variable with the specified configuration.
            </summary>
            <param name="options">
            A <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/> object that specifies
            the location, name, and configuration of a network variable.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> that represents the variable.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            The <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/> indicates a process name or
            variable name that contains characters that cannot be converted using the system default code page.
            Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="options"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The specified process does not exist.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            A variable with the same name already exists in the specified process.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            This method creates the indicated network variable and configures the attributes of the network variable.  To use default values, consider the <see cref="M:NationalInstruments.NetworkVariable.ServerVariable.Create(System.String,System.String)"/> method that takes parameters for the
            process name and variable name.
            </para>
            	<para>
            Since the variable must be configured after it is created, this method is slower than the
            <see cref="M:NationalInstruments.NetworkVariable.ServerVariable.Create(System.String,System.String)"/> method that
            takes only a process name and variable name.
            If you want to create many variables more efficiently, consider using
            <see cref="M:NationalInstruments.NetworkVariable.ServerVariable.CreateMultiple(System.String,System.String[])"/>.
            </para>
            	<note type="note">
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariable"/> class.
            </note>
            </remarks>
            <lastupdated>10/2/2009 6:27:01 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerVariable.CreateMultiple(System.String,System.String[])">
            <summary>
            Creates multiple network variables with the default configuration in the specified process.
            </summary>
            <param name="processName">
            The name of the process that contains the variables.
            </param>
            <param name="variableNames">
            An array of variable names.
            </param>
            <returns>
            An array of <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> objects that
            represent each created variable.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="processName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="processName"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="variableNames"/> is <see langword="null"/>
            	</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The specified process does not exist.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="processName"/> is a reserved process name.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            Network variables created by this method are configured to allow connections from multiple
            writers, have no buffer, have a blank description, and are of type <see cref="T:System.Object"/>.
            To create multiple variables and configure them, use the method that takes
            a <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/> parameter.
            </para>
            	<para>
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariable"/> class.
            </para>
            	<note type="caution">
            If the process already contains a network variable with the same name as an item in the
            <paramref name="variableNames"/> array, that network variable is reconfigured with the
            default values previously specified, which may result in a loss of data. There is no exception
            or error message to indicate this has occurred.
            </note>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If any of the variable names contain unmappable characters, the characters are replaced with substitution characters and the
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> that represents the variable will have the
            substitution characters in its <see cref="P:NationalInstruments.NetworkVariable.ServerVariableInfo.Name"/>.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 6:26:44 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerVariable.CreateMultiple(System.String,System.String[],System.Boolean,System.Int32)">
            <summary>
            Creates and configures multiple network variables in the specified process with the specified configuration.
            </summary>
            <param name="processName">
            The name of the process that contains the variables.
            </param>
            <param name="variableNames">
            An array of variable names.
            </param>
            <param name="singleWriter">
            If <see langword="true"/>, each network variable only accepts connections from one writer at a time.
            </param>
            <param name="maxItems">
            The number of items each network variable buffer holds.
            </param>
            <returns>
            An array of <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> objects
            that represent each variable that is created.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="processName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            		<paramref name="variableNames"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="processName"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="variableNames"/> is <see langword="null"/>
            	</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="maxItems"/> is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The specified process does not exist.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="processName"/> is a reserved process name.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            To create and configure several network variables, use the method of
            <see cref="M:NationalInstruments.NetworkVariable.ServerVariable.CreateMultiple(System.String,System.String[])"/> that has a
            <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/> argument.
            </para>
            	<para>
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariable"/> class.
            </para>
            	<note type="caution">
            If the process already contains a network variable with the same name as an item in the
            <paramref name="variableNames"/> array, that network variable is reconfigured with the
            specified configuration.  There is no exception or error message to indicate this has
            occurred.
            </note>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If any of the variable names contain unmappable characters, the characters are replaced with substitution characters and the
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> that represents the variable will have the
            substitution characters in its <see cref="P:NationalInstruments.NetworkVariable.ServerVariableInfo.Name"/>.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 6:27:02 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerVariable.CreateMultiple(System.Collections.Generic.IEnumerable{NationalInstruments.NetworkVariable.VariableCreationOptions})">
            <summary>
            Creates and configures multiple network variables using a collection of
            <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/> objects.
            </summary>
            <param name="options">
            A collection of <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/> objects
            that describes the variables that should be created.
            </param>
            <returns>
            An array of <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> objects
            that represent each variable that is created.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            	A process name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="options"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The specified process does not exist.
            </para>
            	<para>
            -or-
            </para>
            	<para>A <see cref="P:NationalInstruments.NetworkVariable.VariableCreationOptions.ProcessName" crefType="Unqualified"/> in 
            		<paramref name="options"/> is reserved.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            Use this method to create and configure many network variables at the same time.
            </para>
            	<para>
            This method performs best when all variables use default configuration values; if you prefer default values,
            use the method that does not take a <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/>
            parameter.  
            </para>
            	<para>
            This method supports creating variables in more than one process.  To do this, create a collection of
            <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/> that specifies each variable
            you want to create and pass that collection to <see cref="M:NationalInstruments.NetworkVariable.ServerVariable.CreateMultiple(System.String,System.String[])"/>.
            </para>
            	<para>
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariable"/> class.
            </para>
            	<note type="caution">
            If the process already contains a network variable with the same name as an item in the
            <paramref name="options"/> collection, that network variable is reconfigured with the
            specified configuration.  There is no exception or error message to indicate this has
            occurred.
            </note>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If any of the variable names contain unmappable characters, the characters are replaced with substitution characters and the
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> that represents the variable will have the
            substitution characters in its <see cref="P:NationalInstruments.NetworkVariable.ServerVariableInfo.Name"/>.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>3/14/2011 3:32:08 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerVariable.Delete(System.String,System.String)">
            <summary>
            Deletes the specified network variable contained within the specified process.
            </summary>
            <param name="processName">
            The name of the process that contains the variable.
            </param>
            <param name="variableName">
            The name of the variable.
            </param>
            <returns>
            	<see langword="true"/> if the variable existed and is deleted; <see langword="false"/> if
            either the process or variable did not exist when the method is called.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="processName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            		<paramref name="variableName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The process does not exist.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            A variable with the same name already exists in the specified process.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="processName"/> is a reserved process name.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/> class.
            </remarks>
            <lastupdated>10/2/2009 6:26:45 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerVariable.Exists(System.String,System.String)">
            <summary>
            Determines if a network variable exists.
            </summary>
            <param name="processName">
            The name of the process that contains the variable.
            </param>
            <param name="variableName">
            The name of the variable.
            </param>
            <returns>
            	<see langword="true"/> if the specified process contains a network variable with the specified name.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="processName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            		<paramref name="variableName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<paramref name="processName"/> is a reserved process name.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/> class.
            </remarks>
            <lastupdated>10/2/2009 6:26:45 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerVariable.GetDescription(System.String,System.String)">
            <summary>
            Gets the description of a network variable.
            </summary>
            <param name="processName">
            The name of the process that contains the network variable.
            </param>
            <param name="variableName">
            The name of the network variable.
            </param>
            <returns>
            The description of the network variable.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="processName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            		<paramref name="variableName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="processName"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="variableName"/> is <see langword="null"/>
            	</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The process does not exist.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            A variable with the specified name does not exist in the specified process.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="processName"/> is a reserved process name.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            The description is  never be <see langword="null"/>.
            </para>
            	<para>
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/> class.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, the description must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.
            If the description contains characters specific to a code page, the value of this property is unpredictable. For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            </note>
            </remarks>
            <lastupdated>10/2/2009 6:27:02 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerVariable.GetItemCapacity(System.String,System.String)">
            <summary>
            Gets the maximum number of items a network variable server-side buffer can hold.
            </summary>
            <param name="processName">
            The name of the process that contains the variable.
            </param>
            <param name="variableName">
            The name of the variable.
            </param>
            <returns>
            The maximum number of items the network variable server-side buffer can hold.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="processName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            		<paramref name="variableName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="processName"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="variableName"/> is <see langword="null"/>
            	</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The process does not exist.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            A variable with the specified name does not exist in the specified process.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="processName"/> is a reserved process name.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/> class.
            </remarks>
            <lastupdated>10/2/2009 6:27:03 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerVariable.GetSingleWriter(System.String,System.String)">
            <summary>
            Indicates whether a variable is configured to accept connections from only one writer at a time.
            </summary>
            <param name="processName">
            The name of the process that contains the variable.
            </param>
            <param name="variableName">
            The name of the variable.
            </param>
            <returns>
            	<see langword="true"/> if the variable is configured to refuse writer connections if a writer is already connected.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="processName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            		<paramref name="variableName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="processName"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="variableName"/> is <see langword="null"/>
            	</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The process does not exist.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            A variable with the specified name is not contained in the specified process.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="processName"/> is a reserved process name.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/> class.
            </remarks>
            <lastupdated>10/2/2009 6:26:47 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerVariable.GetVariableType(System.String,System.String)">
            <summary>
            Gets the data type of a network variable.
            </summary>
            <param name="processName">
            The name of the process that contains the variable.
            </param>
            <param name="variableName">
            The name of the variable.
            </param>
            <returns>
            	The data type of the network variable.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="processName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            		<paramref name="variableName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="processName"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="variableName"/> is <see langword="null"/>
            	</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The process does not exist.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            A variable with the specified name is not contained in the specified process.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="processName"/> is a reserved process name.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            The following types are supported by network variables:
            <see cref="T:System.Object"/>;
            <see cref="T:System.Byte"/>, <see cref="T:System.Byte"/>[], <see cref="T:System.Byte"/>[,];
            <see cref="T:System.UInt16"/>, <see cref="T:System.UInt16"/>[], <see cref="T:System.UInt16"/>[,];
            <see cref="T:System.UInt32"/>, <see cref="T:System.UInt32"/>[], <see cref="T:System.UInt32"/>[,];
            <see cref="T:System.UInt64"/>, <see cref="T:System.UInt64"/>[], <see cref="T:System.UInt64"/>[,];
            <see cref="T:System.SByte"/>, <see cref="T:System.SByte"/>[], <see cref="T:System.SByte"/>[,];
            <see cref="T:System.Int16"/>, <see cref="T:System.Int16"/>[], <see cref="T:System.Int16"/>[,];
            <see cref="T:System.Int32"/>, <see cref="T:System.Int32"/>[], <see cref="T:System.Int32"/>[,];
            <see cref="T:System.Int64"/>, <see cref="T:System.Int64"/>[], <see cref="T:System.Int64"/>[,];
            <see cref="T:System.Boolean"/>, <see cref="T:System.Boolean"/>[], <see cref="T:System.Boolean"/>[,];
            <see cref="T:System.Single"/>, <see cref="T:System.Single"/>[], <see cref="T:System.Single"/>[,];
            <see cref="T:System.Double"/>, <see cref="T:System.Double"/>[], <see cref="T:System.Double"/>[,];
            <see cref="T:System.String"/>, <see cref="T:System.String"/>[], <see cref="T:System.String"/>[,];
            <see cref="T:NationalInstruments.AnalogWaveform`1"/>; <see cref="T:NationalInstruments.AnalogWaveform`1"/>[].
            </para>
            	<note type="note">
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/> class.
            </note>
            </remarks>
            <lastupdated>10/2/2009 6:27:03 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerVariable.IsTypeSupported(System.Type)">
            <summary>
            Determines if a type is supported by network variables.
            </summary>
            <param name="variableType">
            A data type.
            </param>
            <returns>
            	<see langword="true"/> if the type is supported by network variables; otherwise <see langword="false"/>.
            </returns>
            <remarks>
            	<para>
            The following types are supported by network variables:
            <see cref="T:System.Object"/>;
            <see cref="T:System.Byte"/>, <see cref="T:System.Byte"/>[], <see cref="T:System.Byte"/>[,];
            <see cref="T:System.UInt16"/>, <see cref="T:System.UInt16"/>[], <see cref="T:System.UInt16"/>[,];
            <see cref="T:System.UInt32"/>, <see cref="T:System.UInt32"/>[], <see cref="T:System.UInt32"/>[,];
            <see cref="T:System.UInt64"/>, <see cref="T:System.UInt64"/>[], <see cref="T:System.UInt64"/>[,];
            <see cref="T:System.SByte"/>, <see cref="T:System.SByte"/>[], <see cref="T:System.SByte"/>[,];
            <see cref="T:System.Int16"/>, <see cref="T:System.Int16"/>[], <see cref="T:System.Int16"/>[,];
            <see cref="T:System.Int32"/>, <see cref="T:System.Int32"/>[], <see cref="T:System.Int32"/>[,];
            <see cref="T:System.Int64"/>, <see cref="T:System.Int64"/>[], <see cref="T:System.Int64"/>[,];
            <see cref="T:System.Boolean"/>, <see cref="T:System.Boolean"/>[], <see cref="T:System.Boolean"/>[,];
            <see cref="T:System.Single"/>, <see cref="T:System.Single"/>[], <see cref="T:System.Single"/>[,];
            <see cref="T:System.Double"/>, <see cref="T:System.Double"/>[], <see cref="T:System.Double"/>[,];
            <see cref="T:System.String"/>, <see cref="T:System.String"/>[], <see cref="T:System.String"/>[,];
            <see cref="T:NationalInstruments.AnalogWaveform`1"/>; <see cref="T:NationalInstruments.AnalogWaveform`1"/>[].
            </para>
            </remarks>
            <lastupdated>10/2/2009 6:00:06 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerVariable.SetDescription(System.String,System.String,System.String)">
            <summary>
            Sets the description of a network variable.
            </summary>
            <param name="processName">
            The name of the process that contains the network variable.
            </param>
            <param name="variableName">
            The name of the network variable.
            </param>
            <param name="description">
            The description of the network variable.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="processName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            		<paramref name="variableName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            		<paramref name="description"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="processName"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="variableName"/> is <see langword="null"/>
            	</para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="description"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The process does not exist.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            A variable with the specified name is not contained in the specified process.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="processName"/> is a reserved process name.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/> class.
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, the description must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.
            If the description contains characters specific to a code page, a machine with a different code page may not be able
            to read the description. For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            </note>
            </remarks>
            <lastupdated>10/2/2009 6:26:48 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerVariable.SetItemCapacity(System.String,System.String,System.Int32)">
            <summary>
            Sets the number of items a network variable server-side buffer can hold.
            </summary>
            <param name="processName">
            The name of the process that contains the network variable.
            </param>
            <param name="variableName">
            The name of the network variable.
            </param>
            <param name="maxItems">
            The number of items the buffer holds.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="processName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            		<paramref name="variableName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="processName"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="variableName"/> is <see langword="null"/>
            	</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="maxItems"/> is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The process does not exist.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            A variable with the specified name is not contained in the specified process.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="processName"/> is a reserved process name.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/> class.
            </remarks>
            <lastupdated>10/2/2009 6:27:03 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerVariable.SetSingleWriter(System.String,System.String,System.Boolean)">
            <summary>
            Sets a value that determines if a network variable supports connections from multiple writers.
            </summary>
            <param name="processName">
            The name of the process that contains the network variable.
            </param>
            <param name="variableName">
            The name of the network variable.
            </param>
            <param name="isSingleWriter">
            If <see langword="true"/>, the network variable refuses connections from writers if a
            writer is already connected.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="processName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            		<paramref name="variableName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="processName"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="variableName"/> is <see langword="null"/>
            	</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The process does not exist.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            A variable with the specified name is not found in the specified process.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="processName"/> is a reserved process name.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/> class.
            </remarks>
            <lastupdated>10/2/2009 6:26:48 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerVariable.SetVariableType(System.String,System.String,System.Type)">
            <summary>
            Sets the data type of a network variable.
            </summary>
            <param name="processName">
            The name of the process that contains the network variable.
            </param>
            <param name="variableName">
            The name of the network variable.
            </param>
            <param name="variableType">
            The new type of the network variable.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="processName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            		<paramref name="variableName"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="processName"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="variableName"/> is <see langword="null"/>
            	</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The process does not exist.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            A variable with the specified name is not found in the specified process.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="processName"/> is a reserved process name.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="variableType"/> is not supported by network variables.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            The following types are supported by network variables:
            <see cref="T:System.Object"/>;
            <see cref="T:System.Byte"/>, <see cref="T:System.Byte"/>[], <see cref="T:System.Byte"/>[,];
            <see cref="T:System.UInt16"/>, <see cref="T:System.UInt16"/>[], <see cref="T:System.UInt16"/>[,];
            <see cref="T:System.UInt32"/>, <see cref="T:System.UInt32"/>[], <see cref="T:System.UInt32"/>[,];
            <see cref="T:System.UInt64"/>, <see cref="T:System.UInt64"/>[], <see cref="T:System.UInt64"/>[,];
            <see cref="T:System.SByte"/>, <see cref="T:System.SByte"/>[], <see cref="T:System.SByte"/>[,];
            <see cref="T:System.Int16"/>, <see cref="T:System.Int16"/>[], <see cref="T:System.Int16"/>[,];
            <see cref="T:System.Int32"/>, <see cref="T:System.Int32"/>[], <see cref="T:System.Int32"/>[,];
            <see cref="T:System.Int64"/>, <see cref="T:System.Int64"/>[], <see cref="T:System.Int64"/>[,];
            <see cref="T:System.Boolean"/>, <see cref="T:System.Boolean"/>[], <see cref="T:System.Boolean"/>[,];
            <see cref="T:System.Single"/>, <see cref="T:System.Single"/>[], <see cref="T:System.Single"/>[,];
            <see cref="T:System.Double"/>, <see cref="T:System.Double"/>[], <see cref="T:System.Double"/>[,];
            <see cref="T:System.String"/>, <see cref="T:System.String"/>[], <see cref="T:System.String"/>[,];
            <see cref="T:NationalInstruments.AnalogWaveform`1"/>; <see cref="T:NationalInstruments.AnalogWaveform`1"/>[].
            </para>
            	<note type="note">
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/> class.
            </note>
            </remarks>
            <lastupdated>10/2/2009 6:26:50 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.ServerVariableInfo">
            <summary>
            Represents a network variable and provides methods to create, delete, and configure the variable.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            	<para>
            The <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> class is useful for when you
            need to periodically manipulate a network variable.  Since it stores 
            <see cref="P:NationalInstruments.NetworkVariable.ServerVariableInfo.Process"/> and
            <see cref="P:NationalInstruments.NetworkVariable.ServerVariableInfo.Name"/>, you do not need to provide
            this information to each method call as with the methods provided by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariable"/> class.
            </para>
            	<para>
            A <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> object does not require the
            variable it represents to exist.  When 
            <see cref="M:NationalInstruments.NetworkVariable.ServerVariableInfo.Create"/> is called, the current
            property values of the object are used to create the variable.  If the network variable exists
            when a <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> object is created, the
            only action that affects the variable is setting properties on the object.  For example, if a
            network variable exists and you use the constructor overload that takes a
            <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/> parameter, the only
            properties of the <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/>
            that are used are <see cref="P:NationalInstruments.NetworkVariable.VariableCreationOptions.ProcessName"/>
            and <see cref="P:NationalInstruments.NetworkVariable.VariableCreationOptions.VariableName"/>.  To modify an existing network variable, create an instance of
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> and use its properties to modify
            the variable.
            </para>
            	<para>
            The <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> class can only represent
            network variables on the local machine.
            </para>
            	<para>
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/> class.
            </para>
            	<note type="caution">
            If the network variable that a <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/>
            object represents is deleted, no notification is provided.  If you need to determine if the
            network variable is deleted, check the 
            <see cref="P:NationalInstruments.NetworkVariable.ServerVariableInfo.Exists"/> property.
            </note>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If the process name or variable name contains characters that cannot be
            converted using the system default code page, trying to call methods, get properties, or set properties
            may throw an exception.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <security condition="unmanagedcode"/>
            <lastupdated>10/2/2009 6:26:53 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerVariableInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> class with default
            property values.
            </summary>
            <param name="processName">
            The name of the process that contains the variable.
            </param>
            <param name="name">
            The name of the variable.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="processName"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="name"/> is <see langword="null"/>
            	</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<paramref name="processName"/> is a reserved process name.
            </exception>
            <remarks>
            	<para>
            Use this constructor overload if you want to create a network variable with default values for attributes
            such as description. To set non-default values for attributes,
            consider using the method that takes a
            <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/> parameter.
            </para>
            	<para>
            The variable does not need to exist before a 
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> object can be created.  If the variable exists when
            this constructor is called, the configuration of the variable is not modified.  Use the properties of
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> to modify the configuration of the variable.
            </para>
            	<para>
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> class.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character. If <paramref name="processName"/> or <paramref name="name"/> contains unmappable characters, trying to call methods, get properties, or set properties
            may throw an exception.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 6:27:04 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerVariableInfo.#ctor(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> object with
            the specified property values.
            </summary>
            <param name="processName">
            The name of the process that contains the variable.
            </param>
            <param name="name">
            The name of the variable.
            </param>
            <param name="singleWriter">
            If <see langword="true"/>, the network variable rejects connections from writers if another
            writer is already connected.
            </param>
            <param name="maxItems">
            The maximum number of items the variable server-side buffer can hold.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="processName"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="name"/> is <see langword="null"/>
            	</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="maxItems"/> is negative.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<paramref name="processName"/> is a reserved process name.
            </exception>
            <remarks>
            	<para>
            National Instruments recommends using the constructor overload that takes a
            <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/> parameter instead
            of this overload if you want to initialize the network variable attributes.
            </para>
            	<para>
            The network variable does not need to exist to create a 
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> object.  If the network variable exists when
            this constructor is called, the configuration of the network variable is not modified.  Use the properties of
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> to modify the configuration of the network variable. </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character. If <paramref name="processName"/> or <paramref name="name"/> contains unmappable characters, trying to call methods, get properties, or set properties
            may throw an exception.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 4:08:35 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerVariableInfo.#ctor(NationalInstruments.NetworkVariable.VariableCreationOptions)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> class using a
            <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/> object to specify the
            network variable's attributes.
            </summary>
            <param name="creationOptions">
            A <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/> object that describes
            the network variable and its attributes.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="creationOptions"/> is <see langword="null"/>.
            </exception>
            <remarks>
            	<para>
            Use this constructor overload if you want to create a network variable with values for some or all of
            its attributes.
            </para>
            	<para>
            The variable does not need to exist before a 
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> object can be created. 
            If the network variable
            exists when you call this constructor, the network variable is not modified.  Use the properties of
            the <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> object to configure the
            variable.
            </para>
            	<para>
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> class.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character. If <paramref name="creationOptions"/> has a process name or variable name that
            contains unmappable characters then trying to call methods, get properties, or set properties
            may throw an exception.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 6:27:04 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.ServerVariableInfo.Description">
            <summary>
            Gets or sets the description of a network variable.
            </summary>
            <value>
            The description of the Network Variable.
            </value>
            <exception cref="T:System.ArgumentException">
            	<para>
            	The process name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            The variable name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            The description contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
                The description is set to <see langword="null"/>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred. Check the <see cref="P:System.Exception.Message"/>  property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            If the network variable exists, the value of this property reflects the value of the variable
            and setting the property reconfigures the variable.  Use the
            <see cref="P:NationalInstruments.NetworkVariable.ServerVariableInfo.Exists"/> property to determine
            if the variable exists.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, the description must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.
            If the description contains characters specific to a code page, the value of this property is unpredictable. For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            </note>
            </remarks>
            <lastupdated>10/2/2009 6:00:09 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.ServerVariableInfo.Exists">
            <summary>
            Gets a value that indicates if a network variable exists on the local machine.
            </summary>
            <value>
            	<see langword="true"/> if the network variable exists.
            </value>
            <exception cref="T:System.ArgumentException">
            	<para>
            The process name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            The variable name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <lastupdated>10/2/2009 6:00:15 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.ServerVariableInfo.FullPath">
            <summary>
            Gets the full path to a network variable.
            </summary>
            <value>
            The full path to the network variable.
            </value>
            <remarks>
            	<para>
            The full path includes the machine, process name, and variable name, and is in a format similar
            to the format of network shares.  For example, the value of this property for a network variable
            named "var1" in a process named "MyProcess" is: <c>\\localhost\MyProcess\var1</c>.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string valuesmust be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character. If the machine name, process name, or variable name contains unmappable characters, the characters may be replaced with substitution characters.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 4:06:53 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.ServerVariableInfo.Name">
            <summary>
            Gets the name of a network variable.
            </summary>
            <value>
            The name of the network variable.
            </value>
            <remarks>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character. If the variable name contains unmappable characters, trying to call methods, get properties, or set properties
            may throw an exception.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 4:07:09 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.ServerVariableInfo.Process">
            <summary>
            Gets an object that represents the process that contains a network variable.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/> object that represents the
            process that contains the network variable.
            </value>
            <remarks>
            	<para>
            It is possible that neither the process or the variable exist on the local machine.  Be sure
            to check the variable's <see cref="P:NationalInstruments.NetworkVariable.ServerVariableInfo.Exists"/>
            property before executing code that relies on the existence of the variable or an exception could be thrown.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character. If the process name contains unmappable characters, trying to call methods, get properties, or set properties
            may throw an exception.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 4:07:33 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.ServerVariableInfo.RelativePath">
            <summary>
            Gets the path to a network variable relative to the local machine.
            </summary>
            <value>
            The relative path to a network variable.
            </value>
            <remarks>
            	<para>
            The relative path includes the process name and variable name and is in a format similar to
            the format of network share items.  For example, if a local network variable named "var1" is
            in the process "MyProcess", this property returns <c>MyProcess\var1</c>.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If the process name or variable name contains unmappable characters, the characters may  be replaced with substitution characters.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 4:07:49 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.ServerVariableInfo.SingleWriter">
            <summary>
            Gets or sets a value that determines whether the variable accepts connections from multiple writers.
            </summary>
            <value>
            	<see langword="true"/> if the variable rejects connections from writers when a writer is
            already connected to this variable; otherwise, <see langword="false"/>.  The default value is <see langword="false"/>.
            </value>
            <exception cref="T:System.ArgumentException">
            	<para>
            The process name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            The variable name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the exception's Message property for more information.
            </exception>
            <remarks>
            	<para>
            If the network variable exists, the value of this property reflects the value of the variable
            and setting the property reconfigures the variable.  Use the
            <see cref="P:NationalInstruments.NetworkVariable.ServerVariableInfo.Exists"/> property to determine
            if the variable exists.
            </para>
            </remarks>
            <lastupdated>10/2/2009 6:00:16 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.ServerVariableInfo.ItemCapacity">
            <summary>
            Gets or sets a value that determines the size of the network variable server-side buffer.
            </summary>
            <value>
            The size of the network variable server-side buffer.  The default value is 0, which indicates
            there is no server-side buffer for this variable.
            </value>
            <exception cref="T:System.ArgumentException">
            	<para>
            The process name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            The variable name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A negative buffer size is specified.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            If the network variable exists, the value of this property reflects the value of the variable
            and setting the property reconfigures the variable.  Use the
            <see cref="P:NationalInstruments.NetworkVariable.ServerVariableInfo.Exists"/> property to determine
            if the variable exists.
            </para>
            </remarks>
            <lastupdated>10/2/2009 6:00:16 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.ServerVariableInfo.VariableType">
            <summary>
            Gets or sets the data type of a network variable.
            </summary>
            <value>
            The data type of the network variable.
            </value>
            <exception cref="T:System.ArgumentException">
            	<para>
            The process name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            The variable name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The specified type is not supported.
            </exception>
            <remarks>
            	<para>
            If the network variable exists, the value of this property reflects the value of the variable
            and setting the property reconfigures the variable.  Use the
            <see cref="P:NationalInstruments.NetworkVariable.ServerVariableInfo.Exists"/> property to determine
            if the variable exists.
            </para>
            	<para>
            The following types are supported by network variables:
            <see cref="T:System.Object"/>;
            <see cref="T:System.Byte"/>, <see cref="T:System.Byte"/>[], <see cref="T:System.Byte"/>[,];
            <see cref="T:System.UInt16"/>, <see cref="T:System.UInt16"/>[], <see cref="T:System.UInt16"/>[,];
            <see cref="T:System.UInt32"/>, <see cref="T:System.UInt32"/>[], <see cref="T:System.UInt32"/>[,];
            <see cref="T:System.UInt64"/>, <see cref="T:System.UInt64"/>[], <see cref="T:System.UInt64"/>[,];
            <see cref="T:System.SByte"/>, <see cref="T:System.SByte"/>[], <see cref="T:System.SByte"/>[,];
            <see cref="T:System.Int16"/>, <see cref="T:System.Int16"/>[], <see cref="T:System.Int16"/>[,];
            <see cref="T:System.Int32"/>, <see cref="T:System.Int32"/>[], <see cref="T:System.Int32"/>[,];
            <see cref="T:System.Int64"/>, <see cref="T:System.Int64"/>[], <see cref="T:System.Int64"/>[,];
            <see cref="T:System.Boolean"/>, <see cref="T:System.Boolean"/>[], <see cref="T:System.Boolean"/>[,];
            <see cref="T:System.Single"/>, <see cref="T:System.Single"/>[], <see cref="T:System.Single"/>[,];
            <see cref="T:System.Double"/>, <see cref="T:System.Double"/>[], <see cref="T:System.Double"/>[,];
            <see cref="T:System.String"/>, <see cref="T:System.String"/>[], <see cref="T:System.String"/>[,];
            <see cref="T:NationalInstruments.AnalogWaveform`1"/>; <see cref="T:NationalInstruments.AnalogWaveform`1"/>[].
            </para>
            </remarks>
            <lastupdated>10/2/2009 6:00:16 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerVariableInfo.Create">
            <summary>
            Creates a network variable with the configuration specified by this object.
            </summary>
            <exception cref="T:System.ArgumentException">
            	<para>
            The process name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            The variable name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The process does not exist.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            A variable with the same name already exists in the specified process.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            	<para>
            When the variable is created, the current values of all <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo" crefType="Unqualified"/> properties are used.
            The default values create a network variable that has no server-side buffer and allows
            simultaneous connections from multiple writers.
            </para>
            	<note type="note">
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> class.
            </note>
            </remarks>
            <lastupdated>10/2/2009 6:27:04 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerVariableInfo.Delete">
            <summary>
            Deletes a network variable.
            </summary>
            <returns>
            	<see langword="true"/> if the network variable existed and is deleted; <see langword="false"/>
            if the network variable did not exist when the method is called.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<para>
            The process name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            	<para>-or-</para>
            	<para>
            The variable name contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error occurred.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <remarks>
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> class.
            </remarks>
            <lastupdated>10/2/2009 6:27:04 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ServerVariableInfo.ToString">
            <summary>
            Gets a <see cref="T:System.String"/> that represents the current 
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> object.
            </summary>
            <returns>
            This method returns a human-readable string that represents a 
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <lastupdated>3/25/2008 5:24:51 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.VariableCreationOptions">
            <summary>
            Represents information needed to create and configure a network variable.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            	<para>
            The <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/> class is used by the
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/>,
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariable"/>,
            and <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> classes to create network
            variables.  Use this class when you want to create network variables and specify properties, such as a
            description or type.
            </para>
            	<para>
            The  <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/>,
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariable"/>,
            and <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/> classes can only interact with
            variables on the local machine.
            </para>
            	<note type="note">
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/> class.
            </note>
            </remarks>
            <lastupdated>10/2/2009 6:27:05 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.VariableCreationOptions.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/> object
            that you use to create a network variable with the specified name in the specified process.
            </summary>
            <param name="processName">
            The name of the process that will contain the network variable.
            </param>
            <param name="variableName">
            The name of the network variable.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="processName"/> is <see langword="null"/>.
            </para>
            	<para>
            -OR-
            </para>
            	<para>
            		<paramref name="variableName"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<paramref name="processName"/> is a reserved process name.
            </exception>
            <remarks>
            The Network Variable server reserves the processes <format type="monospace">System</format>, <format type="monospace">FP</format>, 
            <format type="monospace">LV</format>, and all processes that begin with the <format type="monospace">NI_</format> prefix.
            These processes are reserved for use by National Instruments, are not case-sensitive,  and cannot be accessed or manipulated by the
            <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/> class.
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted to ANSI using the
            system default code page.  If <paramref name="processName"/> or <paramref name="variableName"/> contain unmappable  characters, trying to use the <see cref="T:NationalInstruments.NetworkVariable.VariableCreationOptions"/>
            may throw exceptions or lead to unexpected behavior.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 6:27:05 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.VariableCreationOptions.Description">
            <summary>
            Gets or sets the description of a network variable.
            </summary>
            <value>
            The description of the network variable.
            </value>
            <exception cref="T:System.ArgumentNullException">
                The description is set to <see langword="null"/>.
            </exception>
            <remarks>
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, the description must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.
            If the description contains characters specific to a code page, a machine with a different code page may not be able
            to read the description. For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            </remarks>
            <lastupdated>10/2/2009 4:09:06 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.VariableCreationOptions.SingleWriter">
            <summary>
            Gets or sets a value that determines whether the network variable accepts connections from multiple writers.
            </summary>
            <value>
            	<see langword="true"/> if the network variable rejects connections from writers when a writer is
            already connected to the network variable.  The default value is <see langword="false"/>.
            </value>
            <lastupdated>10/2/2009 6:00:18 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.VariableCreationOptions.ItemCapacity">
            <summary>
            Gets or sets a value that determines the number of items in the network variable server-side buffer .
            </summary>
            <value>
            The number of items in the network variable server-side buffer.  The default value is 0, which indicates
            there is no server-side buffer for this variable.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            A negative buffer size is specified.
            </exception>
            <lastupdated>10/2/2009 6:00:17 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.VariableCreationOptions.ProcessName">
            <summary>
            Gets the name of the network variable process that contains the variable.
            </summary>
            <value>
            The name of the network variable process that contains the variable.
            </value>
            <lastupdated>10/2/2009 6:00:18 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.VariableCreationOptions.VariableName">
            <summary>
            Gets the name of the network variable.
            </summary>
            <value>
            The name of the network variable.
            </value>
            <lastupdated>10/2/2009 6:00:19 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.VariableCreationOptions.VariableType">
            <summary>
            Gets or sets the data type of the network variable.
            </summary>
            <value>
            The data type of the network variable.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The specified type is not supported.
            </exception>
            <remarks>
            	<para>
            The following types are supported by network variables:
            <see cref="T:System.Object"/>;
            <see cref="T:System.Byte"/>, <see cref="T:System.Byte"/>[], <see cref="T:System.Byte"/>[,];
            <see cref="T:System.UInt16"/>, <see cref="T:System.UInt16"/>[], <see cref="T:System.UInt16"/>[,];
            <see cref="T:System.UInt32"/>, <see cref="T:System.UInt32"/>[], <see cref="T:System.UInt32"/>[,];
            <see cref="T:System.UInt64"/>, <see cref="T:System.UInt64"/>[], <see cref="T:System.UInt64"/>[,];
            <see cref="T:System.SByte"/>, <see cref="T:System.SByte"/>[], <see cref="T:System.SByte"/>[,];
            <see cref="T:System.Int16"/>, <see cref="T:System.Int16"/>[], <see cref="T:System.Int16"/>[,];
            <see cref="T:System.Int32"/>, <see cref="T:System.Int32"/>[], <see cref="T:System.Int32"/>[,];
            <see cref="T:System.Int64"/>, <see cref="T:System.Int64"/>[], <see cref="T:System.Int64"/>[,];
            <see cref="T:System.Boolean"/>, <see cref="T:System.Boolean"/>[], <see cref="T:System.Boolean"/>[,];
            <see cref="T:System.Single"/>, <see cref="T:System.Single"/>[], <see cref="T:System.Single"/>[,];
            <see cref="T:System.Double"/>, <see cref="T:System.Double"/>[], <see cref="T:System.Double"/>[,];
            <see cref="T:System.String"/>, <see cref="T:System.String"/>[], <see cref="T:System.String"/>[,];
            <see cref="T:NationalInstruments.AnalogWaveform`1"/>; <see cref="T:NationalInstruments.AnalogWaveform`1"/>[].
            </para>
            </remarks>
            <lastupdated>10/2/2009 6:00:19 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.VariableCreationOptions.ToString">
            <summary>
            Gets the string representation of an object.
            </summary>
            <returns>
            The string representation of the object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <lastupdated>10/2/2009 6:00:19 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding">
            <summary>
            Represents the information required to manage the connection to a single network variable. 
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            	<para>
            Use <see cref="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding.BindingType"/> to specify the type of property bound to the network variable. For example, if binding to a <see cref="P:System.Web.UI.WebControls.TextBox.Text"/> property, set <see cref="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding.BindingType"/>
            to <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingType.String"/>.
            </para>
            	<para>
            To read or write to the underlying network variable connection, use <see cref="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding.GetValue"/>
            and <see cref="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding.SetValue(System.Object)"/>.
            </para>
            </remarks>
            <lastupdated>10/11/2006 12:19:34 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding.#ctor">
            <summary>
            Initializes a new instance of 
            <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding"/>.
            </summary>
            <lastupdated>10/11/2006 12:19:52 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding.BindingType">
            <summary>
            Gets or sets the type for the data received from the network variable. 
            The data source attempts to convert the received data to this type when data binding.
            </summary>
            <value>
            The default value is
            <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingType.Object"/>.
            </value>
            <remarks>
            This property can be used to bind numeric values to controls which expect various data types.
            <note type="note">
            If the specified type is incompatible with the type of data retrieved from the network 
            variable, the data source throws an exception when reading the value.
            </note>
            </remarks>
            <lastupdated>10/16/2006 11:00:57 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding.GetData">
            <summary>
            Gets the current value of the underlying network variable and data about the status of the read operation.
            </summary>
            <returns>
            A <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> that contains the
            read data.  The only valid type for <c>TValue</c> is 
            <see cref="T:System.Object"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding"/> is not added
            to a <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection"/>.
            	</para>
            	<para>
            -or-
            </para>
            	<para>
            The underlying network variable connection is unable to get data, and no value is provided through the
            <see cref="E:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.ReadFailed"/> event or
            the <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.DefaultReadValue"/> property.
            	</para>
            </exception>
            <remarks>
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If the value of the variable contains unmappable characters, the
            value returned by this method may contain substitution characters.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            </remarks>
            <lastupdated>10/2/2009 4:09:48 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding.GetValue">
            <summary>
            Gets the current value of the underlying network variable.
            </summary>
            <returns>
            The current value of the underlying network variable.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding"/> is not included in
            <see cref="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.Bindings"/>.
            </exception>
            <remarks>
            	<para>
            If you are interested in getting information about the read operation, such as the data quality or
            timestamp, use the <see cref="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding.GetData"/>
            method instead and retrieve the value from the 
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableData`1.GetValue"/> method.  Do 
            not use both <see cref="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding.GetValue"/>
            and <see cref="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding.GetData"/> at the same
            time, as there is no guarantee that both calls will get the same data.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If the value of the variable contains unmappable characters, the
            value returned by this method may contain substitution characters.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 4:09:59 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding.SetValue(System.Object)">
            <summary>
            Sets the value of the underlying network variable.
            </summary>
            <param name="value">
            The value to set.
            </param>
            <exception cref="T:System.ArgumentException">
            	<paramref name="value"/> is a string that contains characters that cannot be converted using the system
            default code page.  For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            		<see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding"/> is not included in
            <see cref="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.Bindings"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.BindingMode"/> is
            <see cref="F:NationalInstruments.NetworkVariable.NetworkVariableBindingMode.Read"/>.
            </para>
            </exception>
            <lastupdated>10/2/2009 6:01:19 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding.System#Web#UI#IStateManager#IsTrackingViewState">
            <exclude/>
            <lastupdated>10/11/2006 12:30:54 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding.System#Web#UI#IStateManager#LoadViewState(System.Object)">
            <exclude/>
            <lastupdated>10/11/2006 12:31:08 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding.System#Web#UI#IStateManager#SaveViewState">
            <exclude/>
            <lastupdated>10/11/2006 12:31:15 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding.System#Web#UI#IStateManager#TrackViewState">
            <exclude/>
            <lastupdated>10/11/2006 12:31:22 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection">
            <summary>
            Represents a strongly typed collection of 
            <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding"/> objects.
            </summary>
            <threadsafety safety="unsafe"/>
            <lastupdated>10/11/2006 12:34:46 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>
            A string representation of the object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <lastupdated>10/11/2006 4:07:28 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding"/>
            at the specified index. In Visual C#, this property is the indexer.
            </summary>
            <param name="index">
            The zero-based index of the network variable to locate in the collection.
            </param>
            <value>The <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding"/>
            at the specified index.</value>
            <exception cref="T:System.ArgumentNullException">
            	The value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            		The value has been disposed.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The value is in another 
                    <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		The value is already in this collection.
            </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="index"/> is greater than the last index of the collection.
            </para>
            </exception>
            <lastupdated>10/16/2006 11:02:34 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.System#Collections#IList#Item(System.Int32)">
            <exclude/>
            <lastupdated>1/23/2009 1:59:59 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding"/>
            with the specified name. In Visual C#, this property is the indexer.
            </summary>
            <param name="name">
            The name of the <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding"/>
            to locate in the collection.
            </param>
            <value>The <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding"/>
            that has the given name.</value>
            <exception cref="T:System.ArgumentNullException">
            	The value is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            No binding with the given <paramref name="name"/> exists in the 
            <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection"/>
            </exception>
            <lastupdated>10/16/2006 11:02:59 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.Add(NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding)">
            <summary>
            Adds an item to the end of the collection.
            </summary>
            <param name="value">
            Item to add to the collection.
            </param>
            <returns>
            The array index of the added item.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            		<paramref name="value"/> has been disposed.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="value"/> is in another 
                    <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="value"/> is already in this collection.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.AddRange(NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding[])"/>
            <seealso cref="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.Insert(System.Int32,NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding)"/>
            <lastupdated>10/11/2006 4:04:36 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.System#Collections#IList#Add(System.Object)">
            <exclude/>
            <lastupdated>1/23/2009 2:00:08 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.AddRange(NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding[])">
            <summary>
            Adds an array of <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding"/>
            objects to the end of the collection.
            </summary>
            <param name="value">
            Array of <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding"/> objects 
            to add to the collection.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="value"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            An element in <paramref name="value"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            		An element in <paramref name="value"/> has been disposed.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		An element in <paramref name="value"/> is in another 
            <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		An element in <paramref name="value"/> is already in this collection.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.Add(NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding)"/>
            <seealso cref="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.Insert(System.Int32,NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding)"/>
            <lastupdated>10/11/2006 4:39:09 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
            <seealso cref="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.Remove(NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding)"/>
            <seealso cref="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.RemoveAt(System.Int32)"/>
            <lastupdated>10/11/2006 4:39:13 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.Count">
            <summary>
            Gets the number of elements in the <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection"/>.
            </summary>
            <value>
            The number of elements in the <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection"/>.
            </value>
            <lastupdated>10/11/2006 4:39:03 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.Contains(NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding)">
            <summary>
            Determines whether the specified element is in the collection.
            </summary>
            <param name="value">Item to locate in the collection.</param>
            <returns>
            	<see langword="true"/> if the collection contains <paramref name="value"/>.
            </returns>
            <lastupdated>10/16/2006 11:03:27 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.System#Collections#IList#Contains(System.Object)">
            <exclude/>
            <lastupdated>1/23/2009 2:00:11 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.CopyTo(NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding[],System.Int32)">
            <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
            <param name="array">
            Destination array for the collection.
            </param>
            <param name="index">
            The index in the target array at which you want to begin copying the collection.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="array"/> is multidimensional.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            		<paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of elements in the collection is greater than the available space between
            <paramref name="index"/> and the end of <paramref name="array"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than the lower bound of <paramref name="array"/>.
            </exception>
            <lastupdated>10/16/2006 11:03:46 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <exclude/>
            <lastupdated>1/23/2009 2:00:05 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.IndexOf(NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding)">
            <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
            <param name="value">
            Item to locate in the collection.
            </param>
            <returns>
            Index of the item. If the item is not found, returns <entity value="ndash"/>1.
            </returns>
            <lastupdated>10/16/2006 11:04:02 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.System#Collections#IList#IndexOf(System.Object)">
            <exclude/>
            <lastupdated>1/23/2009 2:00:14 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.Insert(System.Int32,NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">
            Index to insert the item at.
            </param>
            <param name="value">
            Item to insert into the collection.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="value"/> is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            		<paramref name="value"/> has been disposed.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="value"/> is in another <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="value"/> is already in this collection.
            </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="index"/> is greater than 
            <see cref="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.Count"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.Add(NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding)"/>
            <seealso cref="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.AddRange(NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding[])"/>
            <lastupdated>10/11/2006 4:47:28 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <exclude/>
            <lastupdated>1/23/2009 2:00:18 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.System#Collections#ICollection#IsSynchronized">
            <exclude/>
            <lastupdated>1/23/2009 1:59:47 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.System#Collections#IList#IsFixedSize">
            <exclude/>
            <lastupdated>1/23/2009 1:59:53 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.System#Collections#IList#IsReadOnly">
            <exclude/>
            <lastupdated>1/23/2009 1:59:55 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.System#Collections#ICollection#SyncRoot">
            <exclude/>
            <lastupdated>1/23/2009 1:59:50 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.GetEnumerator">
            <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
            <returns>
            The enumerator for the collection.
            </returns>
            <remarks>
            For a detailed explanation of this method, refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> 
            in the Microsoft .NET Framework documentation.
            </remarks>
            <lastupdated>10/11/2006 4:39:24 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.Remove(NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding)">
            <summary>
            Removes the first occurrence of the specified value.
            </summary>
            <param name="value">
            Value to remove from the collection.
            </param>
            <remarks>
            The list elements after the removed element shift up to occupy the vacated spot. Because the list elements
            are indexed, the indexes of the shifted elements also are updated.
            </remarks>
            <seealso cref="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.RemoveAt(System.Int32)"/>
            <seealso cref="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.Clear"/>
            <lastupdated>10/11/2006 4:07:06 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.System#Collections#IList#Remove(System.Object)">
            <exclude/>
            <lastupdated>1/23/2009 2:00:22 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the item to remove.
            </param>
            <remarks>
            The list elements after the removed element shift up to occupy the vacated spot. Because the list elements
            are indexed, the indexes of the shifted elements also are updated.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            <para>
            -or-
            </para>
            	<para>
            		<paramref name="index"/> is greater than or equal to 
            <see cref="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.Count"/>.
            </para>
            </exception>
            <seealso cref="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.Remove(NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding)"/>
            <seealso cref="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.Clear"/>
            <lastupdated>10/11/2006 4:07:16 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.System#Web#UI#IStateManager#IsTrackingViewState">
            <exclude/>
            <lastupdated>1/23/2009 2:00:02 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.System#Web#UI#IStateManager#LoadViewState(System.Object)">
            <exclude/>
            <lastupdated>1/23/2009 2:00:25 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.System#Web#UI#IStateManager#SaveViewState">
            <exclude/>
            <lastupdated>1/23/2009 2:00:28 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection.System#Web#UI#IStateManager#TrackViewState">
            <exclude/>
            <lastupdated>1/23/2009 2:00:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource">
            <summary>
            Represents a set of connections to network variables that can be bound to ASP.NET controls.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            	<para>
            Refer to <see keyword="UsingNetworkVariableDataSourceASPNET" keywordType="mstudio">Using the Measurement Studio Network Variable Data Source in Web Forms
            </see> and <see keyword="WebFormsNetworkVariableWalkthrough" keywordType="mstudio">Walkthrough: Creating a Measurement Studio Application with Web Forms Controls and Network Variable</see> for more information
            about using the network variable data source.
            </para>
            	<para>
            If the <c>ninetv.dll</c> file is not present on the system, the
            <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource"/> cannot function.
            Use the <see cref="E:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.ConnectionFailed"/>
            event to detect this scenario.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character. If the process name or variable name of a binding contains characters that cannot be
            converted using the system default code page, trying to call methods, get properties, or set properties
            may throw an exception.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <seealso cref="T:System.Web.UI.WebControls.FormView"/>
            <lastupdated>10/2/2009 6:01:20 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource"/>.
            </summary>
            <lastupdated>10/11/2006 4:12:54 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.ConnectionCacheExpiration">
            <summary>
            Gets or sets the amount of time the network variable should remain
            in the ASP.NET cache. 
            </summary>
            <value>
            The amount of time the network variable should remain in the ASP.NET cache. The default value is 20 minutes.
            </value>
            <remarks>
            When a network variable is removed from the cache, it is disconnected and disposed. During the next page lifecycle, a new
            network variable connection is automatically established and put in the ASP.NET cache again.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>11/5/2008 12:54:38 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.ConnectionTimeout">
            <summary>
            Gets or sets the timeout for connecting to the network variable.
            </summary>
            <value>
            The timeout for connecting to the network variable. The default value is 10 seconds.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		value is less than or equal to zero.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            The total milliseconds of the value is greater than the maximum integer value.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            To specify a timeout of forever, use <see cref="F:System.TimeSpan.MaxValue"/>.
            </remarks>
            <lastupdated>10/16/2006 11:07:08 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.WriteTimeout">
            <summary>
            Gets or sets the timeout for writing to the network variable.
            </summary>
            <value>
            The timeout for writing to the network variable. The default value is 10 seconds.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		value is less than or equal to zero.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            The total milliseconds of the value is greater than the maximum integer value.
            </para>
            </exception>
            <remarks>
            	To specify a timeout of forever, use <see cref="F:System.TimeSpan.MaxValue"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/16/2006 11:08:07 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.Bindings">
            <summary>
            Gets the collection of bindings.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBindingCollection"/> that contains the
            <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding"/> objects.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/11/2006 4:47:45 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.Visible">
            <exclude/>
            <lastupdated>10/11/2006 4:14:24 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.IsDisposed">
            <summary>
            Gets a value indicating whether the component has been disposed.
            </summary>
            <value>
            	<see langword="true"/> if the component has been disposed.
            </value>
            <lastupdated>10/23/2006 7:11:57 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.GetView(System.String)">
            <summary>
            Gets the named data source view that is associated with this data source control.
            </summary>
            <param name="viewName">Because there is only one view supported by the 
            <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource"/>, this parameter
            is ignored.
            </param>
            <returns>The default view.</returns>
            <lastupdated>10/22/2006 8:48:37 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.GetViewNames">
            <summary>
            Gets a list containing the name of the default view supported by this data source.
            </summary>
            <returns>A collection containing the name of the default view 
            supported by this data source.</returns>
            <lastupdated>10/11/2006 4:48:10 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.ToString">
            <summary>
            Provides a <see cref="T:System.String"/> representation of the object.
            </summary>
            <returns>
            Returns a <see cref="T:System.String"/> representation of the object.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <lastupdated>10/23/2006 6:25:56 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">
            An object that specifies the type of service object to get.
            </param>
            <returns>
            A service object of type <paramref name="serviceType"/>. A <see langword="null"/> is returned if there is no service object of type 
                   <paramref name="serviceType"/>.
            </returns>
            <lastupdated>10/16/2006 11:12:45 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.System#IServiceProvider#GetService(System.Type)">
            <exclude/>
            <lastupdated>1/23/2009 2:05:06 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.Dispose">
            <summary>
            Overrides <see cref="M:System.Web.UI.Control.Dispose"/>.
            </summary>
            <remarks>
            	<see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected <see cref="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.Dispose" crefType="Unqualified"/> method with the disposing 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with disposing set to <see langword="false"/>.
            <para>
            When the disposing parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            </remarks>
            <lastupdated>3/14/2011 3:38:50 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the 
            <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource"/> and optionally 
            releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; 
            <see langword="false"/> to release only unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method and the finalizer. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. The finalizer invokes <see cref="M:System.IDisposable.Dispose"/>
            with <paramref name="disposing"/> set to <see langword="false"/>.
            <para>
            When the <paramref name="disposing"/> parameter is <see langword="true"/>, this method 
            releases all resources held by any managed objects that this 
            <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource"/> references. This method 
            invokes the <see cref="M:System.IDisposable.Dispose"/> of each referenced 
            object.
            </para>
            	<note type="note">
            		<see cref="M:System.IDisposable.Dispose"/> can be called multiple times 
            by other objects. When overriding Dispose(Boolean), be careful not to 
            reference objects that have been previously disposed of in an earlier call 
            to <see cref="M:System.IDisposable.Dispose"/>.
            </note>
            </remarks>
            <seealso cref="M:System.IDisposable.Dispose"/>
            <seealso cref="T:System.IDisposable"/>
            <lastupdated>10/23/2006 6:51:10 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <remarks>
            Overrides <see cref="M:System.Web.UI.Control.OnLoad(System.EventArgs)"/>.
            </remarks>
            <lastupdated>10/11/2006 4:48:15 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.OnPreRender(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.PreRender"/> event.
            </summary>
            <param name="e">
            An <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <remarks>
            Overrides <see cref="M:System.Web.UI.Control.OnPreRender(System.EventArgs)"/>.
            </remarks>
            <lastupdated>10/11/2006 4:48:19 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.SaveViewState">
            <summary>
            Saves any server control view-state changes that have occurred since the time the page was posted back to the server. 
            </summary>
            <returns>
            Returns the current view state of the server control.  If there is no view state
            associated with the control, this method returns <see langword="null"/>.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Web.UI.Control.SaveViewState"/>.
            </remarks>
            <lastupdated>10/23/2006 6:22:54 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.LoadViewState(System.Object)">
            <summary>
            Restores view-state information from a previous page request that was saved by the <see keyword="frlrfSystemWebUIControlClassLoadViewStateTopic" keywordType="msdn">Control.LoadViewState
            </see>  method. 
            </summary>
            <param name="savedState">
            An <see cref="T:System.Object"/> that represents the control state to restore.
            </param>
            <remarks>
            Overrides <see cref="M:System.Web.UI.Control.LoadViewState(System.Object)"/>.
            </remarks>
            <lastupdated>10/23/2006 6:24:28 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.TrackViewState">
            <summary>
            Causes tracking of view-state changes to the server control so they can be stored in the server control's <see keyword="frlrfSystemWebUIStateBagClassTopic" keywordType="msdn">StateBag Class 
            </see>  object. This object is accessible through the <see keyword="frlrfSystemWebUIControlClassViewStateTopic" keywordType="msdn">Control.ViewState</see>  property. 
            </summary>
            <remarks>
            Overrides <see cref="M:System.Web.UI.Control.TrackViewState"/>.
            </remarks>
            <lastupdated>10/23/2006 6:21:57 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.BindingStatusUpdated">
            <summary>
            Occurs when a network variable connection associated with one of the 
            <see cref="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.Bindings"/>
            changes its <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.ConnectionStatus"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Refer to <see cref="T:NationalInstruments.NetworkVariable.BindingStatusUpdatedEventArgs`1"/> for more information
            about the arguments that are passed to the <see cref="E:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.BindingStatusUpdated"/> event handler. 
            </remarks>
            <seealso cref="T:NationalInstruments.NetworkVariable.BindingStatusUpdatedEventArgs`1"/>
            <lastupdated>3/26/2007 11:27:01 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.OnBindingStatusUpdated(NationalInstruments.NetworkVariable.BindingStatusUpdatedEventArgs{NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding})">
            <summary>
            Raises the <see cref="E:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.BindingStatusUpdated"/>
            event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.NetworkVariable.BindingStatusUpdatedEventArgs`1"/> that 
            contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/11/2006 4:15:57 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.ConnectionFailed">
            <summary>
            Occurs when the <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource"/>
            attempts to connect to a network variable and fails.
            </summary>
            <remarks>
            	<para>
            When the <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource"/>
            attempts to connect to a  network variable, the connection can fail.  This event is raised
            whenever the connection fails.  Use the
            <see cref="P:NationalInstruments.NetworkVariable.ConnectionFailedEventArgs.Error"/> property of the
            <see cref="T:NationalInstruments.NetworkVariable.ConnectionFailedEventArgs"/> to determine why the
            connection failed.  This event is raised once per connection that fails.
            </para>
            	<para>
            Handle this event when you want to know why connections are failing; use the 
            <see cref="E:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.ReadFailed"/>
            or <see cref="E:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.WriteFailed"/>
            events to determine when reads or writes are failing.
            </para>
            </remarks>
            <lastupdated>3/25/2008 5:29:58 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.ReadFailed">
            <summary>
            Occurs when the data binding framework requests data from a network variable and the read
            fails.
            </summary>
            <remarks>
            Use this event to receive notifications when a read failure occurs.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Refer to <see cref="T:NationalInstruments.NetworkVariable.ReadFailedEventArgs`1"/>
            for more information
            about the arguments that are passed to the <see cref="E:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.ReadFailed"/> event handler. 
            </remarks>
            <seealso cref="T:NationalInstruments.NetworkVariable.ReadFailedEventArgs`1"/>
            <lastupdated>3/26/2007 11:37:38 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.OnConnectionFailed(NationalInstruments.NetworkVariable.ConnectionFailedEventArgs)">
            <summary>
            Raises the 
            <see cref="E:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.ConnectionFailed"/>
            event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.NetworkVariable.ConnectionFailedEventArgs"/> that contains
            the event data.
            </param>
            <lastupdated>3/25/2008 5:29:31 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.OnReadFailed(NationalInstruments.NetworkVariable.ReadFailedEventArgs{NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding})">
            <summary>
            Raises the <see cref="E:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.ReadFailed"/>
            event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.NetworkVariable.ReadFailedEventArgs`1"/> that 
            contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/11/2006 4:16:10 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.WriteFailed">
            <summary>
            Occurs when the data binding framework tries to write to the network variable, but fails.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Refer to <see cref="T:NationalInstruments.NetworkVariable.WriteFailedEventArgs`1"/>
            for more information
            about the arguments that are passed to the <see cref="E:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.WriteFailed"/>
            event handler. 
            </remarks>
            <seealso cref="T:NationalInstruments.NetworkVariable.WriteFailedEventArgs`1"/>
            <lastupdated>3/26/2007 11:40:53 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.OnWriteFailed(NationalInstruments.NetworkVariable.WriteFailedEventArgs{NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding})">
            <summary>
            Raises the <see cref="E:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.WriteFailed"/>
            event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.NetworkVariable.WriteFailedEventArgs`1"/> that 
            contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/11/2006 4:16:18 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.NetworkVariableBindingMode">
            <summary>
            Specifies whether binding to a network variable is one way or two way.
            </summary>
            <lastupdated>10/9/2006 4:46:18 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableBindingMode.Read">
            <summary>
            The binding is one-way. The user only has permission to 
            read the value of the network variable.
            </summary>
            <lastupdated>10/4/2006 10:21:50 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableBindingMode.ReadWrite">
            <summary>
            The binding is two-way.  The user has permission to read from and write to the network variable.
            </summary>
            <lastupdated>10/4/2006 10:22:03 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.NetworkVariableBindingType">
            <summary>
            Represents the data type of the property you are binding to.
            </summary>
            <remarks>
            	<para>
            		<see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBindingType"/> also acts
            as a converter for the bound property type.  The 
            <see cref="P:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding.BindingType"/> of <see cref="T:NationalInstruments.NetworkVariable.WebForms.NetworkVariableBinding"/> must match the
            type of the value specified in the <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.DefaultReadValue"/>,
            as well as the data type of the network variable.
            </para>
            	<para>
            You can extend this class to create more bindable data types.
            </para>
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>10/16/2006 12:21:39 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableBindingType.#ctor">
            <summary>
            Initializes a new instance of 
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBindingType"/>.
            </summary>
            <lastupdated>10/7/2006 5:15:48 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableBindingType.UnderlyingType">
            <summary>
            Overrides the method in <see cref="T:NationalInstruments.EnumObject"/>.
            </summary>
            <value>
            The default is the type of the 
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBindingType"/> class.
            </value>
            <lastupdated>10/9/2006 10:26:16 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableBindingType.Boolean">
            <summary>
            Gets a <see cref="T:System.Boolean"/> binding type.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBindingType"/> that
            represents a Boolean binding type.
            </value>
            <lastupdated>10/9/2006 10:17:44 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableBindingType.Int32">
            <summary>
            Gets an <see cref="T:System.Int32"/> binding type.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBindingType"/> that
            represents a 32-bit integer binding type.
            </value>
            <lastupdated>10/9/2006 10:20:36 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableBindingType.Double">
            <summary>
            Gets a <see cref="T:System.Double"/> binding type.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBindingType"/> that
            represents a double binding type.
            </value>
            <lastupdated>10/9/2006 10:19:14 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableBindingType.String">
            <summary>
            Gets a <see cref="T:System.String"/> binding type.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBindingType"/> that
            represents a string binding type.
            </value>
            <lastupdated>10/9/2006 10:24:21 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableBindingType.DateTime">
            <summary>
            Gets a <see cref="T:System.DateTime"/> binding type.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBindingType"/> that
            represents a DateTime binding type.
            </value>
            <lastupdated>10/9/2006 10:18:42 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableBindingType.Object">
            <summary>
            Gets an <see cref="T:System.Object"/> binding type.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBindingType"/> that
            represents an object binding type.
            </value>
            <lastupdated>10/9/2006 10:22:48 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableBindingType.TargetType">
            <summary>
            Gets the data type represented by this
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBindingType"/>.
            </summary>
            <value>
            The type represented by this 
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBindingType"/>.
            </value>
            <lastupdated>10/9/2006 10:25:17 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableBindingType.Name">
            <summary>
            Gets the name of the binding type.
            </summary>
            <value>
            The name is the string representation of the bound property type.
            </value>
            <lastupdated>10/9/2006 10:21:10 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableBindingType.Convert(System.Object)">
            <summary>
            Converts the given object to an instance of the 
            <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingType.TargetType"/>.
            </summary>
            <param name="data">
            The object to convert.
            </param>
            <returns>
            The converted data with a data type that is equal to or is a subclass of the
            <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingType.TargetType"/>.
            </returns>
            <lastupdated>10/9/2006 10:27:14 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1">
            <summary>
            Provides a way to read network variable data from a client side buffer.
            </summary>
            <threadsafety safety="safe"/>
            <typeparam name="TValue">
            The type of the variable to read. The following types are supported by <typeparamref name="TValue"/>:
            <see cref="T:System.Object"/>;
            <see cref="T:System.Byte"/>, <see cref="T:System.Byte"/>[], <see cref="T:System.Byte"/>[,];
            <see cref="T:System.UInt16"/>, <see cref="T:System.UInt16"/>[], <see cref="T:System.UInt16"/>[,];
            <see cref="T:System.UInt32"/>, <see cref="T:System.UInt32"/>[], <see cref="T:System.UInt32"/>[,];
            <see cref="T:System.UInt64"/>, <see cref="T:System.UInt64"/>[], <see cref="T:System.UInt64"/>[,];
            <see cref="T:System.SByte"/>, <see cref="T:System.SByte"/>[], <see cref="T:System.SByte"/>[,];
            <see cref="T:System.Int16"/>, <see cref="T:System.Int16"/>[], <see cref="T:System.Int16"/>[,];
            <see cref="T:System.Int32"/>, <see cref="T:System.Int32"/>[], <see cref="T:System.Int32"/>[,];
            <see cref="T:System.Int64"/>, <see cref="T:System.Int64"/>[], <see cref="T:System.Int64"/>[,];
            <see cref="T:System.Boolean"/>, <see cref="T:System.Boolean"/>[], <see cref="T:System.Boolean"/>[,];
            <see cref="T:System.Single"/>, <see cref="T:System.Single"/>[], <see cref="T:System.Single"/>[,];
            <see cref="T:System.Double"/>, <see cref="T:System.Double"/>[], <see cref="T:System.Double"/>[,];
            <see cref="T:System.String"/>, <see cref="T:System.String"/>[], <see cref="T:System.String"/>[,]; and 
            <see cref="T:NationalInstruments.AnalogWaveform`1"/>, <see cref="T:NationalInstruments.AnalogWaveform`1"/>[].
            	</typeparam>
            <remarks>
            	<para>
            		<see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1"/> reads values from a client
            side buffer instead of accessing the server over the network for every read. Periodically, the server pushes more values to the
            buffer of the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1"/>, which reduces network traffic.
            </para>
            	<para>
            Use <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1.ReadData"/> to read values
            from the client side buffer. Use <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.ItemCapacity"/> to determine the size of the
            client side buffer and <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.ItemCount"/> to return
            the number of current items in the buffer.
            	</para>
            	<note type="note">
            Network variable performance decreases when machines hosting the reader, writer, and variables are mixed between Logos and LogosXT. Logos is the underlying technology of the
            NI-Publish Subscribe Protocol (<format type="monospace">psp:</format>), a National Instruments proprietary protocol for inter-process communication. 
            Network variables in Measurement Studio 8.1.2, LabWindows/CVI 8.5, and LabVIEW 8.5 and later use a more efficient TCP-based implementation of Logos called LogosXT to transfer network variable data. National Instruments recommends that you use LogosXT, which <see cref="N:NationalInstruments.NetworkVariable"/> uses by default. Performance is especially degraded when the writer and network variable host use LogosXT and the reader that attempts to read the network variable uses Logos. This issue occurs for all reader classes. 
            <para>
            For optimum performance, National Instruments recommends that all machines accessing network variables, including the machine that hosts the variable, should use LogosXT. If using LogosXT on all machines is not possible, you should disable LogosXT. You disable LogosXT by  adding a <format type="monospace">DWORD</format> value named <format type="monospace">DisablePSPXT</format>
            to the registry key <format type="monospace">HKEY_LOCAL_MACHINE\SOFTWARE\National Instruments\LogosXT </format> and setting its value to 1. 
            If you must use a mix of Logos versions, you can reduce the performance loss by using Distributed System Manager. Use Distributed System Manager to configure a sufficiently large server-side buffer for the network variable.
            </para>
            	</note>
            </remarks>
            <lastupdated>10/2/2009 5:59:27 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1"/>
            class with the specified path name.
            </summary>
            <param name="location">
            The path name of the network variable. 
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="location"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="location"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The type of the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableReader`1"/> is invalid.
            </exception>
            <remarks>
            	<para>
            The format of the <paramref name="location"/> is similar
            to the format of items on network shares and is not case-sensitive. The following are examples:
            <list type="bullet">
            			<item>
            				<description>
            					<format type="monospace"> 
            \\localhost\my_process\my_variable
            </format>
            				</description>
            			</item>
            			<item>
            				<description><format type="monospace">
            \\192.168.1.100\my_process\my_variable
            </format>
            				</description>
            			</item>
            			<item>
            				<description><format type="monospace">
            \\test_machine.my_network.com\my_process\my_variable
            </format>
            				</description>
            			</item>
            			<item>
            				<description>
            					<item>
            						<description><format type="monospace">
            \\localhost\system\my_variable
            </format>
            						</description>
            					</item>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            If you specify a new variable in the system process, such as <format type="monospace">
            \\localhost\system\my_variable</format>, then the variable
            is implicitly created and can hold values of any type.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If <paramref name="location"/> contains characters that cannot be converted, an
            exception is thrown when you call <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/>.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 3:50:56 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1.ReadData">
            <summary>
            Reads the next value from the client side buffer.
            </summary>
            <returns>
            A <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> that contains information about
            the read data.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The type of the data being read does not match the type of the
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableReader`1"/>.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            		<see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/> has not been called successfully.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The type of the data being read cannot be converted to an equivalent .NET type.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            The array dimension of the read data is not supported.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If the network variable type is <see cref="T:System.String"/> and the
            value contains unmappable characters, the value returned by the
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableData`1.GetValue"/> method is
            unpredictable.  For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	
            </remarks>
            <lastupdated>10/2/2009 5:59:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1.ReadData(NationalInstruments.NetworkVariable.BufferedSubscriberDataStatus@)">
            <summary>
            Reads the next value from the client side buffer with
            <see cref="T:NationalInstruments.NetworkVariable.BufferedSubscriberDataStatus"/> describing the state of the buffer.
            </summary>
            <param name="status">
            Upon return, contains a <see cref="T:NationalInstruments.NetworkVariable.BufferedSubscriberDataStatus"/> describing
            the state of the buffer.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> that contains information about
            the read data.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The type of the data being read does not match the type of the
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableReader`1"/>.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            		<see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/> has not been called successfully.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The type of the data being read cannot be converted to an equivalent .NET type.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            The array dimension of the data being read is not supported.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            If data is read faster than the buffer fills, <see cref="F:NationalInstruments.NetworkVariable.BufferedSubscriberDataStatus.Stale"/>
            is returned as the value of <paramref name="status"/>. If the buffer fills faster than it is being read, <see cref="F:NationalInstruments.NetworkVariable.BufferedSubscriberDataStatus.Dropped"/>
            is returned as the value of <paramref name="status"/>. 
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If the network variable type is <see cref="T:System.String"/> and the
            value contains unmappable characters, the value returned by the
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableData`1.GetValue"/> method is
            unpredictable.  For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 3:52:20 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1.ItemCapacity">
            <summary>
            Gets or sets the size of the client side buffer.
            </summary>
            <value>
            The size of the client side buffer. The default value is 50 items.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value is less than or equal to 1.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks><para>
            If you make multiple connections to the same <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableManager.Location"/>
            within the same process and both connections utilize a client side buffer, the larger of the two sizes is returned.
            </para>
            </remarks>
            <lastupdated>10/2/2009 5:59:28 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1.ItemCount">
            <summary>
            Gets the number of items in the client side buffer.
            </summary>
            <value>
            The number of items in the client side buffer.
            </value>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/2/2009 5:59:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1">
            <summary>
            Provides a way to write network variable data to a client side buffer.
            </summary>
            <threadsafety safety="safe"/>
            <typeparam name="TValue">
            The type of the variable to write. The following types are supported by <typeparamref name="TValue"/>:
            <see cref="T:System.Object"/>;
            <see cref="T:System.Byte"/>, <see cref="T:System.Byte"/>[], <see cref="T:System.Byte"/>[,];
            <see cref="T:System.UInt16"/>, <see cref="T:System.UInt16"/>[], <see cref="T:System.UInt16"/>[,];
            <see cref="T:System.UInt32"/>, <see cref="T:System.UInt32"/>[], <see cref="T:System.UInt32"/>[,];
            <see cref="T:System.UInt64"/>, <see cref="T:System.UInt64"/>[], <see cref="T:System.UInt64"/>[,];
            <see cref="T:System.SByte"/>, <see cref="T:System.SByte"/>[], <see cref="T:System.SByte"/>[,];
            <see cref="T:System.Int16"/>, <see cref="T:System.Int16"/>[], <see cref="T:System.Int16"/>[,];
            <see cref="T:System.Int32"/>, <see cref="T:System.Int32"/>[], <see cref="T:System.Int32"/>[,];
            <see cref="T:System.Int64"/>, <see cref="T:System.Int64"/>[], <see cref="T:System.Int64"/>[,];
            <see cref="T:System.Boolean"/>, <see cref="T:System.Boolean"/>[], <see cref="T:System.Boolean"/>[,];
            <see cref="T:System.Single"/>, <see cref="T:System.Single"/>[], <see cref="T:System.Single"/>[,];
            <see cref="T:System.Double"/>, <see cref="T:System.Double"/>[], <see cref="T:System.Double"/>[,];
            <see cref="T:System.String"/>, <see cref="T:System.String"/>[], <see cref="T:System.String"/>[,]; and <see cref="T:NationalInstruments.AnalogWaveform`1"/>, <see cref="T:NationalInstruments.AnalogWaveform`1"/>[].
            			</typeparam>
            <remarks>
            	<para>
            		<see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1"/> writes values to a client side buffer, instead
            of immediately to the server over the network. The buffering process reduces network traffic. Periodically, the
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1"/> writes the data values
            in the buffer to the server.
            </para>
            	<para>
            Use <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.WriteData(NationalInstruments.NetworkVariable.NetworkVariableData{`0})"/> or
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.WriteValue(`0)"/> to write data to the
            client side buffer. You can handle the <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.DataTransferred"/>
            event to receive notification when the data in the buffer writes to the server.
            Use <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.ItemCapacity"/> to determine the size of the
            client side buffer and <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.ItemCount"/> to return
            the number of current items in the buffer.
            </para>
            </remarks>
            <lastupdated>9/16/2008 11:23:53 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1"/>
            class with the specified path name.
            </summary>
            <param name="location">
            The path name of the network variable. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="location"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The type of the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableReader`1"/> is invalid.
            </exception>
            <remarks>
            	<para>
            The format of the <paramref name="location"/> is similar
            to the format of items on network shares and is not case-sensitive. The following are examples:
            <list type="bullet">
            			<item>
            				<description>
            					<format type="monospace"> 
            \\localhost\my_process\my_variable
            </format>
            				</description>
            			</item>
            			<item>
            				<description>
            					<format type="monospace">
            \\192.168.1.100\my_process\my_variable 
            </format>
            				</description>
            			</item>
            			<item>
            				<description>
            					<format type="monospace">
            \\test_machine.my_network.com\my_process\my_variable 
            </format>
            				</description>
            			</item>
            			<item>
            				<description>
            					<item>
            						<description>
            							<format type="monospace">
            \\localhost\system\my_variable 
            </format>
            						</description>
            					</item>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            If you specify a new variable in the system process, such as <format type="monospace">
            \\localhost\system\my_variable</format>, then the variable
            is implicitly created and can hold values of any type.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, <paramref name="location"/> must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If <paramref name="location"/> contains unmappable characters, an exception
            is thrown when you call <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/>.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 3:53:24 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.WriteData(NationalInstruments.NetworkVariable.NetworkVariableData{`0})">
            <summary>
            Writes data to the client side buffer.
            </summary>
            <param name="data">
            A <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> containing the value to write
            to the buffer.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<typeparamref name="TValue"/> is <see cref="T:System.Object"/>, <see cref="T:System.String"/>,
            or an array of either type and the value of <paramref name="data"/> contains characters 
            that cannot be converted using the system default ANSI code page.  
            Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.TimeoutException">
            The buffer is full and remained full for the duration of the timeout.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/> has not been called successfully.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            This method writes to the client side buffer and returns immediately. However, this method blocks if the buffer
            is full and waits for 10 seconds until the buffer contains room for the new value. If after 10 seconds the buffer
            is still full, a <see cref="T:System.TimeoutException"/> is thrown.
            </para>
            </remarks>
            <lastupdated>10/2/2009 5:59:31 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.WriteData(NationalInstruments.NetworkVariable.NetworkVariableData{`0},System.TimeSpan)">
            <summary>
            Writes data to the client side buffer with the specified timeout.
            </summary>
            <param name="data">
            A <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> containing the value to write
            to the buffer.
            </param>
            <param name="bufferFullTimeout">
            The <see cref="T:System.TimeSpan"/> value specifying how long the write waits if the client buffer is full.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<typeparamref name="TValue"/> is <see cref="T:System.Object"/>, <see cref="T:System.String"/>,
            or an array of either type and the value of <paramref name="data"/> contains characters 
            that cannot be converted using the system default ANSI code page.   
            Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.TimeoutException">
            The buffer is full and remains full for the duration of the timeout.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/> has not been called successfully.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="bufferFullTimeout"/> is less than or equal to zero.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            The total milliseconds of <paramref name="bufferFullTimeout"/> is greater than the maximum integer value.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            This method writes to the client side buffer and returns immediately. However, the method blocks if the buffer
            is full and waits for the duration of <paramref name="bufferFullTimeout"/> for a spot to become available. If <paramref name="bufferFullTimeout"/>
            expires and the buffer is still full, a <see cref="T:System.TimeoutException"/> is thrown.
            </remarks>
            <lastupdated>10/2/2009 5:59:31 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.WriteValue(`0)">
            <summary>
            Writes a value to the client side buffer.
            </summary>
            <param name="value">
            The value to write to the buffer.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<typeparamref name="TValue"/> is <see cref="T:System.Object"/>, <see cref="T:System.String"/>,
            or an array of either type and <paramref name="value"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.TimeoutException">
            The buffer is full and remains full for the duration of the timeout.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/> has not been called successfully.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            This method calls <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.WriteData(NationalInstruments.NetworkVariable.NetworkVariableData{`0})"/>, constructing
            a <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> from <paramref name="value"/>.
            This method writes to the client side buffer and returns immediately. However, the method blocks if the buffer
            is full and waits for 10 seconds until the buffer contains room for the new value. If after 10 seconds the buffer
            is still full, a <see cref="T:System.TimeoutException"/> is thrown.
            </remarks>
            <lastupdated>10/2/2009 5:59:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.WriteValue(`0,System.TimeSpan)">
            <summary>
            Writes a value to the client side buffer with the specified timeout.
            </summary>
            <param name="value">
            The value to write to the buffer.
            </param>
            <param name="bufferFullTimeout">
            The <see cref="T:System.TimeSpan"/> value specifying how long the write waits if the client buffer is full.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<typeparamref name="TValue"/> is <see cref="T:System.Object"/>, <see cref="T:System.String"/>,
            or an array of either type and <paramref name="value"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.TimeoutException">
            The buffer is full and remains full for the duration of the timeout.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/> has not been called successfully.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="bufferFullTimeout"/> is less than or equal to zero.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            The total milliseconds of <paramref name="bufferFullTimeout"/> is greater than the maximum integer value.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            This method calls <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.WriteData(NationalInstruments.NetworkVariable.NetworkVariableData{`0})"/>, constructing
            a <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> from <paramref name="value"/>.
            This method writes to the client side buffer and returns immediately. However, this method blocks if the buffer
            is full and waits for the duration of <paramref name="bufferFullTimeout"/> for a spot to become available. If <paramref name="bufferFullTimeout"/>
            expires and the buffer is still full, a <see cref="T:System.TimeoutException"/> is thrown.
            </remarks>
            <lastupdated>10/2/2009 5:59:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.ItemCapacity">
            <summary>
            Gets or sets the size of the client side buffer.
            </summary>
            <value>
            The size of the client side buffer. The default value is 50 items.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value is less than or equal to 1.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            If multiple connections are made to the same <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableManager.Location"/>
            within the same process and both connections utilize a client side buffer, the larger of the two sizes is returned.
            </remarks>
            <lastupdated>10/2/2009 5:59:30 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.ItemCount">
            <summary>
            Gets the number of items in the client side buffer.
            </summary>
            <value>
            The number of items in the client side buffer.
            </value>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            The <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableManager.PropertyChanged" crefType="PartiallyQualified"/> 
            event is not raised when the value of this property changes.
            </remarks>
            <lastupdated>10/2/2009 5:59:31 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.OnDataTransferred(System.EventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.DataTransferred"/> event.
            </summary>
            <param name="args">
            An  <see cref="T:System.EventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<note type="caution">
            		<para>
            If you override 
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.OnDataTransferred(System.EventArgs)"/>
             in a derived class, an exception is thrown within your <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.OnDataTransferred(System.EventArgs)"/>
            implementation any time you read from or write to a network variable.  The underlying
            network variable library uses a special thread for raising events.  This thread is blocked during execution of
            the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.OnDataTransferred(System.EventArgs)"/>
            method. While the special thread is blocked, some operations in the network variable class library cannot be performed. Consequently, 
            you must not
            perform any the following operations from the 
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.OnDataTransferred(System.EventArgs)"/> method:
            </para>
            		<list type="bullet">
            			<item>
            				<description>
            Connect or disconnect any reader or writer. This includes
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1"/>,
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1"/>,
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableReader`1"/>,
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1"/>,
            and <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableWriter`1"/>.
            </description>
            			</item>
            			<item>
            				<description>
            Read or write data.
            </description>
            			</item>
            			<item>
            				<description>
            Create a <see cref="T:NationalInstruments.NetworkVariable.Browser"/>.
            </description>
            			</item>
            			<item>
            				<description>
            Use a <see cref="T:NationalInstruments.NetworkVariable.Browser"/> to browse by calling
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetItem(System.String)"/>,
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitems(NationalInstruments.NetworkVariable.BrowserItem)"/>,
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitemsAsync(NationalInstruments.NetworkVariable.BrowserItem,System.Object)"/>,
            or <see cref="M:NationalInstruments.NetworkVariable.Browser.TryGetItem(System.String,NationalInstruments.NetworkVariable.BrowserItem@)"/>.
            </description>
            			</item>
            			<item>
            				<description>
            Configure a network variable using
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/>,
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/>,
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariable"/>,
            or <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/>.
            </description>
            			</item>
            		</list>
            		<para>
            If you need to perform any of these operations in response to the 
            <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.DataTransferred"/> 
            event, use an event handler instead of overriding 
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.OnDataTransferred(System.EventArgs)"/>.
            Event handlers are called in a way that does not block the special thread and are exempt from these limitations.
            </para>
            	</note>
            </remarks>
            <lastupdated>10/2/2009 5:41:33 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.DataTransferred">
            <summary>
            Occurs when data from the client side buffer is written to the server.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>10/22/2006 8:27:19 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.NetworkVariableData`1">
            <summary>
            Encapsulates the raw data value.
            </summary>
            <threadsafety safety="safe"/>
            <typeparam name="TValue">
            The type of the data. The following types are supported by <typeparamref name="TValue"/>:
            <see cref="T:System.Object"/>;
            <see cref="T:System.Byte"/>, <see cref="T:System.Byte"/>[], <see cref="T:System.Byte"/>[,];
            <see cref="T:System.UInt16"/>, <see cref="T:System.UInt16"/>[], <see cref="T:System.UInt16"/>[,];
            <see cref="T:System.UInt32"/>, <see cref="T:System.UInt32"/>[], <see cref="T:System.UInt32"/>[,];
            <see cref="T:System.UInt64"/>, <see cref="T:System.UInt64"/>[], <see cref="T:System.UInt64"/>[,];
            <see cref="T:System.SByte"/>, <see cref="T:System.SByte"/>[], <see cref="T:System.SByte"/>[,];
            <see cref="T:System.Int16"/>, <see cref="T:System.Int16"/>[], <see cref="T:System.Int16"/>[,];
            <see cref="T:System.Int32"/>, <see cref="T:System.Int32"/>[], <see cref="T:System.Int32"/>[,];
            <see cref="T:System.Int64"/>, <see cref="T:System.Int64"/>[], <see cref="T:System.Int64"/>[,];
            <see cref="T:System.Boolean"/>, <see cref="T:System.Boolean"/>[], <see cref="T:System.Boolean"/>[,];
            <see cref="T:System.Single"/>, <see cref="T:System.Single"/>[], <see cref="T:System.Single"/>[,];
            <see cref="T:System.Double"/>, <see cref="T:System.Double"/>[], <see cref="T:System.Double"/>[,];
            <see cref="T:System.String"/>, <see cref="T:System.String"/>[], <see cref="T:System.String"/>[,]; and 
            <see cref="T:NationalInstruments.AnalogWaveform`1"/>, <see cref="T:NationalInstruments.AnalogWaveform`1"/>[].
            			</typeparam>
            <remarks>
            	<para>
            The underlying driver can send data for any of the following reasons:
            <list type="bullet">
            			<item>
            				<description>
            new data value has become available
            </description>
            			</item>
            			<item>
            				<description>
            data timestamp has been updated
            </description>
            			</item>
            			<item>
            				<description>
            data quality value has been updated
            </description>
            			</item>
            			<item>
            				<description>
            server has encountered an error
            </description>
            			</item>
            		</list>
            Any combination of the four values previously listed may be included in the
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/>. For example, you can get a
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> that only contains a
            <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.Quality"/> value signaling the quality has changed,
            but not the data.
            </para>
            	<para>
            Check the <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.HasValue"/> property to determine if <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> has a value. If
            <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.HasValue"/> is <see langword="true"/>, use
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableData`1.GetValue"/> to get the raw value. If
            <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.HasTimeStamp"/> is <see langword="true"/>, use
            <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.TimeStamp"/> to get the timestamp value of
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/>.
            </para>
            	<para>
            Check <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.HasQuality"/> to
            determine if there is quality. Use the <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.Quality"/> property to get information
            about the quality of the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/>.
            <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.IsQualityGood"/> determines if the
            <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.Quality"/> value is good. 
            If <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.HasServerError"/> is
            <see langword="true"/>, check <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.ServerError"/> to determine if a server or device
            error occurred.
            	</para>
            </remarks>
            <lastupdated>10/27/2006 2:00:34 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableData`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> class
            with the specified value.
            </summary>
            <param name="value">
            The raw data value.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The type of the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> is invalid.
            </exception>
            <remarks>
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If <typeparamref name="TValue"/> is <see cref="T:System.Object"/>, <see cref="T:System.String"/>,
            or an array of either type and <paramref name="value"/> contains unmappable characters, using 
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> may throw an exception or produce
            unpredictable results.  For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	
            </remarks>
            <lastupdated>10/2/2009 3:55:00 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableData`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <exclude/>
            <lastupdated>1/23/2009 1:59:34 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.HasValue">
            <summary>
            Gets a value indicating whether the value is available.
            </summary>
            <value>
            	<see langword="true"/> if the value is available by calling <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableData`1.GetValue"/>.
            </value>
            <lastupdated>10/16/2006 9:20:09 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableData`1.GetValue">
            <summary>
            Returns the raw value of the network variable.
            </summary>
            <returns>
            The raw value of the network variable.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.HasValue"/> is <see langword="false"/>.
            </exception>
            <remarks>
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If <typeparamref name="TValue"/> is <see cref="T:System.Object"/>, <see cref="T:System.String"/>,
            or an array of either type and the value contains unmappable characters, the return value of this method 
            replaces the unmappable characters with substitution characters.  For more information, see 
            Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	
            </remarks>
            <lastupdated>10/2/2009 3:54:31 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.HasTimeStamp">
            <summary>
            Gets a value indicating whether the <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.TimeStamp"/> is available.
            </summary>
            <value>
            	<see langword="true"/> if <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.TimeStamp"/> is available.
            </value>
            <lastupdated>10/9/2006 10:56:39 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.TimeStamp">
            <summary>
            Gets the timestamp of the network variable data.
            </summary>
            <value>
            The timestamp of the data.
            </value>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.HasTimeStamp"/> is <see langword="false"/>.
            </exception>
            <remarks>
            The <see cref="T:System.DateTime"/> returned represents time in Coordinated Universal Time (UTC). To convert
            to local time, call <see cref="M:System.DateTime.ToLocalTime"/>.
            </remarks>
            <lastupdated>10/9/2006 11:01:11 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.HasQuality">
            <summary>
            Gets a value indicating whether <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.Quality"/> is available.
            </summary>
            <value>
            	<see langword="true"/> if <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.Quality"/> is available.
            </value>
            <lastupdated>10/9/2006 10:55:50 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.Quality">
            <summary>
            Gets the quality value of the data.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableDataQualities"/> value representing the quality.
            </value>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.HasQuality"/> is <see langword="false"/>.
            </exception>
            <lastupdated>10/9/2006 10:59:16 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.IsQualityGood">
            <summary>
            Gets a value indicating whether the <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.Quality"/> value
            is good.
            </summary>
            <value>
            	<see langword="true"/> if the current <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.Quality"/>
            value is good, otherwise <see langword="false"/>.
            </value>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.HasQuality"/> is <see langword="false"/>.
            </exception>
            <remarks>
            The main purpose of this property is to differentiate between <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.Quality"/>
            warnings and <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.Quality"/> errors.
            If <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.IsQualityGood"/> returns <see langword="true"/>,
            consider the <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.Quality"/> value a warning, instead of an error.
            </remarks>
            <lastupdated>10/16/2006 9:20:28 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.HasServerError">
            <summary>
            Gets a value indicating whether <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.ServerError"/> is available.
            </summary>
            <value>
            	<see langword="true"/> if <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.ServerError"/> is available.
            </value>
            <lastupdated>10/9/2006 10:56:13 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.ServerError">
            <summary>
            Gets any server or device error associated with the network variable data.
            </summary>
            <value>
            A server or device error associated with the data.
            </value>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.HasServerError"/> is <see langword="false"/>.
            </exception>
            <remarks>
            Consult your server or device documentation for descriptions of the error codes returned by this method.
            </remarks>
            <lastupdated>10/16/2006 9:21:13 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.NetworkVariableDataQualities">
            <summary>
            Specifies quality values.
            </summary>
            <lastupdated>10/9/2006 4:45:29 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.Good">
            <summary>
            The quality is good.
            </summary>
            <lastupdated>10/9/2006 12:42:18 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.Stale">
            <summary>
            The value might not be the most current value from the data source.
            </summary>
            <lastupdated>10/9/2006 12:43:12 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.SensorFailure">
            <summary>
            The sensor failed.
            </summary>
            <lastupdated>10/22/2006 8:34:19 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.DeviceFailure">
            <summary>
            A general device error.
            </summary>
            <lastupdated>10/22/2006 8:31:47 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.ServerFailure">
            <summary>
            Server failure.
            </summary>
            <lastupdated>10/9/2006 12:43:02 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.NetworkFailure">
            <summary>
            A general communications failure.
            </summary>
            <lastupdated>10/22/2006 8:33:14 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.NonExistent">
            <summary>
            Unable to locate variable in the Shared Variable Engine.
            </summary>
            <lastupdated>10/9/2006 12:42:44 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.NoKnownValue">
            <summary>
            The network variable has no value.
            </summary>
            <lastupdated>10/9/2006 12:42:41 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.Inactive">
            <summary>
            The network variable is inactive.
            </summary>
            <lastupdated>10/9/2006 12:42:25 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.Forced">
            <summary>
            The PLC registers can be forced to a user specified value.
            </summary>
            <lastupdated>10/22/2006 8:32:26 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.LowLimited">
            <summary>
            The value has been coerced to a range.
            </summary>
            <lastupdated>10/9/2006 12:42:32 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.HighLimited">
            <summary>
            The value has been coerced to a range.
            </summary>
            <lastupdated>10/9/2006 12:42:21 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.Constant">
            <summary>
            The constant value.
            </summary>
            <lastupdated>10/22/2006 8:31:38 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.SensorInaccurate">
            <summary>
            Sensor inaccurate.
            </summary>
            <lastupdated>10/9/2006 12:42:59 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.EULimitsExceeded">
            <summary>
            The value has exceeded the defined engineering units defined for the point.
            </summary>
            <lastupdated>10/9/2006 12:42:11 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.Subnormal">
            <summary>
            This is a generic error.
            </summary>
            <lastupdated>10/22/2006 8:35:09 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.MathException">
            <summary>
            A math error has occurred.
            </summary>
            <lastupdated>10/22/2006 8:33:03 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.CommLinkFailure">
            <summary>
            The communications link failed.
            </summary>
            <lastupdated>10/22/2006 8:31:11 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.Connecting">
            <summary>
            Connecting to the server.
            </summary>
            <lastupdated>10/22/2006 8:31:23 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.DnsFailure">
            <summary>
            The DNS lookup failed for the server.
            </summary>
            <lastupdated>10/22/2006 8:32:00 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.HostUnreachable">
            <summary>
            The server is not reachable.
            </summary>
            <lastupdated>10/9/2006 12:42:23 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.ServiceLookupFailure">
            <summary>
            The service lookup failed for the server.
            </summary>
            <lastupdated>10/22/2006 8:34:52 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.Disconnected">
            <summary>
            The connection to the server was disconnected.
            </summary>
            <lastupdated>10/9/2006 12:42:07 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.ProcessFailure">
            <summary>
            The process was not found or is not responding.
            </summary>
            <lastupdated>10/9/2006 12:41:27 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.ResolveUrlFailure">
            <summary>
            Failed to resolve URL for the network variable.
            </summary>
            <lastupdated>10/9/2006 12:42:54 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.AccessDenied">
            <summary>
            Read access is denied to the network variable.
            </summary>
            <lastupdated>10/9/2006 12:41:45 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.InvalidUrl">
            <summary>
            An invalid URL for this network variable.
            </summary>
            <lastupdated>10/22/2006 8:32:44 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.AppDefined1">
            <summary>
            The meaning is specific to the server.
            </summary>
            <lastupdated>10/9/2006 12:41:48 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.AppDefined2">
            <summary>
            The meaning is specific to the server.
            </summary>
            <lastupdated>10/9/2006 12:41:51 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.AppDefined3">
            <summary>
            The meaning is specific to the server.
            </summary>
            <lastupdated>10/9/2006 12:41:54 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.InAlarm">
            <summary>
            An alarm has been triggered on this network variable.
            </summary>
            <lastupdated>10/9/2006 12:42:28 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.SubscribeFailed">
            <summary>
            The subscribe failed.
            </summary>
            <lastupdated>10/22/2006 8:35:29 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.ExtendedInfo">
            <summary>
            Extended information is available.
            </summary>
            <lastupdated>10/22/2006 8:32:16 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.ReadBufferFull">
            <summary>
            The client side read buffer is full. The next value will overflow buffer.
            </summary>
            <lastupdated>10/23/2006 7:11:40 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.ReadBufferOverflow">
            <summary>
            The client side read buffer overflowed. The oldest value in the buffer was lost.
            </summary>
            <lastupdated>10/22/2006 8:33:56 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.ServerWriteBufferFull">
            <summary>
            The server side write buffer is full. The next write will overflow buffer.
            </summary>
            <lastupdated>10/22/2006 8:34:32 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.NetworkVariableDataQualities.ServerWriteBufferOverflow">
            <summary>
            The server side write buffer overflowed. The oldest value in the buffer was lost.
            </summary>
            <lastupdated>10/22/2006 8:34:42 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.NetworkVariableLicenser">
            <exclude/>
            <lastupdated>10/9/2006 1:14:27 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableLicenser.#ctor">
            <exclude/>
            <lastupdated>10/9/2006 1:14:31 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.ReadDataCompletedEventArgs`1">
            <summary>
            Provides data for the <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableReader`1.ReadDataCompleted"/> event.
            </summary>
            <threadsafety safety="safe"/>
            <typeparam name="TValue">
            The type of the variable that was read. The following types are supported by <typeparamref name="TValue"/>:
            <see cref="T:System.Object"/>;
            <see cref="T:System.Byte"/>, <see cref="T:System.Byte"/>[], <see cref="T:System.Byte"/>[,];
            <see cref="T:System.UInt16"/>, <see cref="T:System.UInt16"/>[], <see cref="T:System.UInt16"/>[,];
            <see cref="T:System.UInt32"/>, <see cref="T:System.UInt32"/>[], <see cref="T:System.UInt32"/>[,];
            <see cref="T:System.UInt64"/>, <see cref="T:System.UInt64"/>[], <see cref="T:System.UInt64"/>[,];
            <see cref="T:System.SByte"/>, <see cref="T:System.SByte"/>[], <see cref="T:System.SByte"/>[,];
            <see cref="T:System.Int16"/>, <see cref="T:System.Int16"/>[], <see cref="T:System.Int16"/>[,];
            <see cref="T:System.Int32"/>, <see cref="T:System.Int32"/>[], <see cref="T:System.Int32"/>[,];
            <see cref="T:System.Int64"/>, <see cref="T:System.Int64"/>[], <see cref="T:System.Int64"/>[,];
            <see cref="T:System.Boolean"/>, <see cref="T:System.Boolean"/>[], <see cref="T:System.Boolean"/>[,];
            <see cref="T:System.Single"/>, <see cref="T:System.Single"/>[], <see cref="T:System.Single"/>[,];
            <see cref="T:System.Double"/>, <see cref="T:System.Double"/>[], <see cref="T:System.Double"/>[,];
            <see cref="T:System.String"/>, <see cref="T:System.String"/>[], <see cref="T:System.String"/>[,]; and
            <see cref="T:NationalInstruments.AnalogWaveform`1"/>, <see cref="T:NationalInstruments.AnalogWaveform`1"/>[].
            			</typeparam>
            <remarks>
            The <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableReader`1.ReadDataCompleted"/> event occurs after an
            asynchronous read has completed. Use
            <see cref="P:NationalInstruments.NetworkVariable.ReadDataCompletedEventArgs`1.Data"/> to access the data that was
            read. 
            </remarks>
            <lastupdated>10/27/2006 2:01:23 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ReadDataCompletedEventArgs`1.#ctor(NationalInstruments.NetworkVariable.NetworkVariableData{`0},System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.NetworkVariable.ReadDataCompletedEventArgs`1"/>
            class with the specified data, error, whether the asynchronous operation was canceled, and the optional user-supplied state object.
            </summary>
            <param name="data">
            The <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> that contains the read data.
            </param>
            <param name="error">
            An error, if an error occurred, during the asynchronous operation.
            </param>
            <param name="canceled">
            A value indicating whether the asynchronous operation was canceled.
            </param>
            <param name="userState">
            The optional user-supplied state object.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="error"/> is <see langword="null"/> and <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <lastupdated>10/22/2006 8:46:15 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.ReadDataCompletedEventArgs`1.Data">
            <summary>
            Gets a <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> that contains information about
            the read data.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> that contains information about
            the read data.
            </value>
            <exception cref="T:System.Reflection.TargetInvocationException">
            The <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property has been set by the asynchronous
            operation.
            </exception>
            <lastupdated>10/10/2006 3:35:05 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.ReadFailureCause">
            <summary>
            Specifies the cause of the read failure.
            </summary>
            <lastupdated>10/16/2006 10:51:59 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.ReadFailureCause.Unconnected">
            <summary>
            Read failed because the connection has not been made.
            </summary>
            <lastupdated>10/16/2006 10:52:54 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.ReadFailureCause.NoData">
            <summary>
            Read failed because there is no data.
            </summary>
            <lastupdated>10/16/2006 10:52:16 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.ConnectionFailedEventArgs">
            <summary>
            Provides information when a data source connection fails.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            When the <c>ninetv.dll</c> file is not present on a system, the network variable class library
            methods can throw a <see cref="T:System.DllNotFoundException"/>.  The data source raises an
            event when this happens.  This class is used by the event to determine why a connection
            failed.
            </remarks>
            <seealso cref="E:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.ConnectionFailed"/>
            <seealso cref="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.ConnectionFailed"/>
            <lastupdated>3/25/2008 3:19:24 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ConnectionFailedEventArgs.#ctor(NationalInstruments.NetworkVariable.NetworkVariableBindingBase,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:NationalInstruments.NetworkVariable.ConnectionFailedEventArgs"/>
            class.
            </summary>
            <param name="binding">
            The <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBindingBase"/> for which the
            connection failed.
            </param>
            <param name="error">
            The <see cref="T:System.Exception"/> that describes why the connection failed, or 
            <see langword="null"/> if the connection failed without throwing an exception.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="binding"/> is <see langword="null"/>.
            </para>
            	<para>-OR-</para>
            	<para>
            		<paramref name="error"/> is <see langword="null"/>.
            </para>
            </exception>
            <lastupdated>3/25/2008 3:19:52 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.ConnectionFailedEventArgs.Binding">
            <summary>
            Gets the binding for which the connection failed.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBindingBase"/> for which the
            connection failed.
            </value>
            <lastupdated>3/25/2008 3:19:33 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.ConnectionFailedEventArgs.Error">
            <summary>
            Gets the error that describes why the connection failed.
            </summary>
            <value>
            An <see cref="T:System.Exception"/> that describes why the connection failed.
            </value>
            <lastupdated>3/25/2008 3:19:39 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.ReadFailedEventArgs`1">
            <summary>
            Provides data when a data source read fails.
            </summary>
            <typeparam name="TBinding">
            The associated binding class.
            </typeparam>
            <threadsafety safety="safe"/>
            <remarks>
            One of the main uses for this event argument class is to specify the return value for the data source when
            the requested read cannot be completed successfully. To specify a custom return value, set the <see cref="P:NationalInstruments.NetworkVariable.ReadFailedEventArgs`1.Value"/> property.
            If this value is not set, then the data source attempts to use the
            <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.DefaultReadValue"/> of the binding.
            If neither of these values are set, then the requested read throws an exception.
            </remarks>
            <seealso cref="E:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.ReadFailed"/>
            <seealso cref="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.ReadFailed"/>
            <lastupdated>3/26/2007 1:54:56 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.ReadFailedEventArgs`1.#ctor(`0,NationalInstruments.NetworkVariable.ReadFailureCause)">
            <summary>
            Initializes a new instance of <see cref="T:NationalInstruments.NetworkVariable.ReadFailedEventArgs`1"/> with the specified
            binding and failure cause.
            </summary>
            <param name="binding">
            The binding that describes the network variable which failed to read. 
            </param>
            <param name="failureCause">
            The <see cref="T:NationalInstruments.NetworkVariable.ReadFailureCause"/> of the read failure.
            </param>
            <lastupdated>10/9/2006 4:49:23 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.ReadFailedEventArgs`1.Binding">
            <summary>
            Gets the binding that describes the network variable which failed to read.
            </summary>
            <value>
            The binding that describes the network variable which failed to read.
            </value>
            <lastupdated>10/9/2006 4:50:20 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.ReadFailedEventArgs`1.FailureCause">
            <summary>
            Gets the cause of the read failure.
            </summary>
            <value>
            The <see cref="T:NationalInstruments.NetworkVariable.ReadFailureCause"/> of the read failure.
            </value>
            <lastupdated>10/9/2006 4:50:13 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.ReadFailedEventArgs`1.Value">
            <summary>
            Gets or sets the value that is returned when attempting to 
            read the value of the unconnected network variable.
            </summary>
            <value>
            The default value is <see langword="null"/>.
            </value>
            <remarks>
            If this value is not set inside the event handler, the
            <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.DefaultReadValue"/> of the
            <see cref="P:NationalInstruments.NetworkVariable.ReadFailedEventArgs`1.Binding"/> is used as the
            value to be read.
            </remarks>
            <lastupdated>10/16/2006 10:51:17 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.WindowsForms.BeforeTypeToolTipEventArgs">
            <summary>
            Provides a way to customize the text displayed in the tooltip.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            You set <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.BeforeTypeToolTipEventArgs.ToolTipText"/> to the text
            displayed in the tooltip. The tooltip is displayed next to the leaf item in the tree node that represents the network variable type.
            You use
            <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.BeforeTypeToolTipEventArgs.Type"/> to get
            the network variable type for the tooltip.
            </remarks>
            <lastupdated>3/22/2007 9:44:26 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.BeforeTypeToolTipEventArgs.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.BeforeTypeToolTipEventArgs"/>
            with the specified type and tooltip text.
            </summary>
            <param name="type">
            The network variable type for the tooltip.
            </param>
            <param name="toolTipText">
            The tooltip text.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="toolTipText"/> is <see langword="null"/>.
            </para>
            	<para>
                    -or-
                     </para>
            	<para>
            		<paramref name="type"/> is <see langword="null"/>. 
            </para>
            </exception>
            <remarks>
            This constructor sets the
            <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.BeforeTypeToolTipEventArgs.ItemPath"/>
            property to <see cref="F:System.String.Empty"/>.  Use the overload of 
            <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.BeforeTypeToolTipEventArgs"/>
            that takes a path parameter if you need the
            <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.BeforeTypeToolTipEventArgs.ItemPath"/>
            property to have a value.
            </remarks>
            <lastupdated>7/25/2008 5:09:49 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.BeforeTypeToolTipEventArgs.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.BeforeTypeToolTipEventArgs"/>
            with the specified type and tooltip text.
            </summary>
            <param name="type">
            The network variable type for the tooltip.
            </param>
            <param name="toolTipText">
            The tooltip text.
            </param>
            <param name="itemPath">
            The path to the network variable item.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="toolTipText"/> is <see langword="null"/>.
            </para>
            	<para>
                    -or-
                     </para>
            	<para>
            		<paramref name="type"/> is <see langword="null"/>. 
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="itemPath"/> is <see langword="null"/>.
            </para>
            </exception>
            <lastupdated>7/25/2008 5:10:26 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WindowsForms.BeforeTypeToolTipEventArgs.ItemPath">
            <summary>
            Gets the path to the network variable displayed in the tooltip.
            </summary>
            <value>
            The path to the network variable.
            </value>
            <lastupdated>7/25/2008 5:05:26 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WindowsForms.BeforeTypeToolTipEventArgs.Type">
            <summary>
            Gets the type, such as a float or double, of the network variable displayed in the tooltip.
            </summary>
            <value>
            The type of the network variable displayed in the tooltip.
            </value>
            <lastupdated>3/15/2007 8:50:51 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WindowsForms.BeforeTypeToolTipEventArgs.ToolTipText">
            <summary>
            Gets or sets the tooltip text.
            </summary>
            <value>
            The tooltip text.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <lastupdated>3/14/2007 3:52:49 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding">
            <summary>
            Represents the information required to manage the connection to a single network variable. 
            The binding also provides information about the current status of the network variable connection.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            	<para>
            You must call <see cref="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.Dispose"/> 
            when you finish using a <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/> object.
            </para>
            	<para>
            For the <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/>
            object to read or write a value when it connects for the first time, set the
            <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.ConnectionBehavior"/>
            property to a value that represents the desired behavior.
            </para>
            </remarks>
            <lastupdated>10/2/2009 6:01:20 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/>.
            </summary>
            <lastupdated>10/11/2006 4:21:01 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.ConnectionBehavior">
            <summary>
            Gets or sets a value that specifies the <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/>
            behavior when it connects to the specified network variable for the first time.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.NetworkVariable.BindingConnectionBehavior"/> value that specifies the
            desired behavior.
            </value>
            <remarks>
            	<para>
            The default value for this property is
            <see cref="F:NationalInstruments.NetworkVariable.BindingConnectionBehavior.DoNothing"/>.
            </para>
            	<para>
            The current value of this property is used when
            <see cref="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.Connect"/> is called
            for the first time for a particular network variable.  Changing the value of this property after the
            <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/> has connected
            has no effect.  If you change the value of the
            <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.Location"/> property, this
            represents a new connection and the current value of this property is used when
            the binding is connected.
            </para>
            	<para>
            If the value of this property is <see cref="F:NationalInstruments.NetworkVariable.BindingConnectionBehavior.Write"/>,
            you must set <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.InitialValue"/>
            to the value that should be written when the connection is made.  The binding will not write a value unless
            <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.BindingMode"/> is
            <see cref="F:NationalInstruments.NetworkVariable.NetworkVariableBindingMode.ReadWrite"/>.
            </para>
            </remarks>
            <seealso cref="T:NationalInstruments.NetworkVariable.BindingConnectionBehavior"/>
            <seealso cref="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.Connect"/>
            <seealso cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.InitialValue"/>
            <lastupdated>9/30/2009 5:14:04 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.InitialValue">
            <summary>
            Gets or sets a value that is written to the network variable when the binding connects.
            </summary>
            <value>
            The value that is written to the network variable when the binding connects.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <remarks>
            	<para>
            If <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.ConnectionBehavior"/>
            is not set to a value that indicates a value should be written or <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.BindingMode"/>
            is not <see cref="F:NationalInstruments.NetworkVariable.NetworkVariableBindingMode.ReadWrite"/>, this property has no effect.  The value of
            this property should not be <see langword="null"/>.
            </para>
            	<para>
            If the value is invalid for the type of the network variable, a default value will be written.  For example, if the
            network variable's type is <see cref="T:System.Double"/> and you set 
            <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.InitialValue"/> to the string
            "NI", the double value 0.0 will be written to the network variable.
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.ConnectionBehavior"/>
            <seealso cref="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.Connect"/>
            <lastupdated>10/2/2009 6:01:20 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/> object.
            </summary>
            <remarks>
            	<para>
            This method releases all
            resources held by managed objects that this <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/>
            references. 
            </para>
            </remarks>
            <lastupdated>3/14/2011 3:43:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.Connect">
            <summary>
            Connects the <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/> 
            object to a network variable.
            </summary>
            <exception cref="T:System.ArgumentException">
            	<see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.Location"/> contains
            characters that cannot be converted using the system default code page.  
            Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </exception>
            <exception cref="T:System.DllNotFoundException">
            The <c>ninetv.dll</c> file is not present on the system.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.Location"/> property is not specified.
            </para>
            	<para>-or-</para>
            	<para>
            The <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.ConnectionBehavior"/>
            property indicates a write should be performed and
            <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.InitialValue"/>
            is <see langword="null"/>.
            </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object is disposed.
            </exception>
            <remarks>
            	<para>
            The <see cref="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.Connect"/> method
            establishes the <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/> connection 
            with the current value of the <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.Location"/> property.
            </para>
            	<para>
            If this is the first time <see cref="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.Connect"/>
            has been called since changing the <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.Location"/>
            property, the binding uses the current value of the
            <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.ConnectionBehavior"/>
            property to determine if an action should be taken.  If a write should be performed, the current value
            of the <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.InitialValue"/>
            property is written to the network variable.  If
            <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.InitialValue"/> is
            <see langword="null"/>, an exception is thrown. On subsequent calls to 
            <see cref="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.Connect"/> when
            <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.Location"/> has not changed,
            no additional action is taken.
            </para>
            </remarks>
            <lastupdated>10/2/2009 6:01:21 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.Disconnect">
            <summary>
            Disconnects the <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/> 
            object from the network variable to which it is currently connected.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<see cref="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.Disconnect"/> has no effect
            if the <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/> object is not connected.
            </remarks>
            <lastupdated>10/17/2006 11:03:20 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection">
            <summary>
            Represents a strongly-typed collection of <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/>
            objects.
            </summary>
            <threadsafety safety="unsafe"/>
            <lastupdated>10/23/2006 6:29:26 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.ToString">
            <summary>
            Overrides <see cref="M:System.Object.ToString"/>.
            </summary>
            <returns>
            Returns a string representation of the object.
            </returns>
            <lastupdated>10/11/2006 4:38:30 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/> at 
            the specified index. In Visual C#, this property is the indexer.
            </summary>
            <param name="index">
            The zero-based index of the entry to locate in the collection.
            </param>
            <value>
            The <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/> object at the
            specified index.
            </value>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is outside the valid range of indexes for the collection.
            </exception>
            <lastupdated>10/11/2006 4:37:56 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.System#Collections#IList#Item(System.Int32)">
            <exclude/>
            <lastupdated>1/23/2009 2:06:19 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/> with the
            specified name. In Visual C#, this property is the indexer.
            </summary>
            <param name="name">
            The name of the <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/> to find
            in the collection.
            </param>
            <value>
            The <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/> object with the
            specified binding name.
            </value>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The binding with the specified name was not found in the collection.
            </exception>
            <lastupdated>10/11/2006 4:37:58 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.Add(NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding)">
            <summary>
            Adds an item to the end of the collection.
            </summary>
            <param name="value">
            The item to add to the collection.
            </param>
            <returns>
            The array index of the added item.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="value"/> is <see langword="null"/>.
            </exception>
            <lastupdated>10/11/2006 4:38:01 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.System#Collections#IList#Add(System.Object)">
            <exclude/>
            <lastupdated>1/23/2009 2:06:20 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.AddRange(NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding[])">
            <summary>
            Adds an array of <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/> objects 
            to the end of the collection.
            </summary>
            <param name="value">
            The array of <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/> objects to
            add to the collection.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<para>
            		<paramref name="value"/> is <see langword="null"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            An element in <paramref name="value"/> is <see langword="null"/>.
            </para>
            </exception>
            <lastupdated>10/11/2006 4:38:03 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
            <lastupdated>10/11/2006 4:38:06 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
            <value>
            The number of elements contained in the collection.
            </value>
            <lastupdated>10/11/2006 4:37:52 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.Contains(NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding)">
            <summary>
            Determines whether the specified element is in the collection.
            </summary>
            <param name="value">
            The item to locate in the collection.
            </param>
            <returns>
            	<see langword="true"/> if the collection contains <paramref name="value"/>.
            </returns>
            <lastupdated>10/17/2006 11:08:11 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.System#Collections#IList#Contains(System.Object)">
            <exclude/>
            <lastupdated>1/23/2009 2:06:21 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.CopyTo(NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding[],System.Int32)">
            <summary>
            Copies the collection to an array or a portion of an array.
            </summary>
            <param name="array">
            The destination array for the collection.
            </param>
            <param name="index">
            The index in the target array at which you want to begin copying the collection.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<paramref name="array"/> is multi-dimensional.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            		<paramref name="index"/> is greater than or equal to the array length.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The number of elements in the collection is greater than the available space
            between <paramref name="index"/> and the end of <paramref name="array"/>.
            </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            </exception>
            <lastupdated>10/17/2006 11:08:56 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <exclude/>
            <lastupdated>1/23/2009 2:06:20 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.IndexOf(NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding)">
            <summary>
            Returns the zero-based index of the first occurrence of an item in the collection.
            </summary>
            <param name="value">
            The item to search for.
            </param>
            <returns>
            The index of the item. If the item is not found, returns -1.
            </returns>
            <lastupdated>10/17/2006 11:09:17 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.System#Collections#IList#IndexOf(System.Object)">
            <exclude/>
            <lastupdated>1/23/2009 2:06:22 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.Insert(System.Int32,NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding)">
            <summary>
            Inserts an item into the collection at the specified index.
            </summary>
            <param name="index">
            The index to insert the item at.
            </param>
            <param name="value">
            The item to insert into the collection.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is outside the valid range of indexes for the collection.
            </exception>
            <lastupdated>10/11/2006 4:38:21 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
            <exclude/>
            <lastupdated>1/23/2009 2:06:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.System#Collections#ICollection#IsSynchronized">
            <exclude/>
            <lastupdated>1/23/2009 2:06:10 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.System#Collections#IList#IsFixedSize">
            <exclude/>
            <lastupdated>1/23/2009 2:06:16 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.System#Collections#IList#IsReadOnly">
            <exclude/>
            <lastupdated>1/23/2009 2:06:18 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.System#Collections#ICollection#SyncRoot">
            <exclude/>
            <lastupdated>1/23/2009 2:06:14 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.GetEnumerator">
            <summary>
            Returns an enumerator that you can use to iterate through the collection.
            </summary>
            <returns>
            The enumerator for the collection.
            </returns>
            <remarks>
            For a detailed explanation of this method, refer to <see cref="M:System.Collections.IEnumerable.GetEnumerator"/> in the 
            Microsoft .NET Framework documentation.
            </remarks>
            <lastupdated>10/11/2006 4:38:15 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.Remove(NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding)">
            <summary>
            Removes the first occurrence of the specified item.
            </summary>
            <param name="value">
            The item to remove from the collection.
            </param>
            <remarks>
            The list elements after the removed element shift up to occupy the vacated spot. 
            Because the list elements are indexed, the indexes of the shifted elements also are updated.
            </remarks>
            <lastupdated>10/11/2006 4:38:24 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.System#Collections#IList#Remove(System.Object)">
            <exclude/>
            <lastupdated>1/23/2009 2:06:23 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBindingCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">
            The zero-based index of the item to remove.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is outside the valid range of indexes for the collection.
            </exception>
            <remarks>
            The list elements after the removed element shift up to occupy the vacated spot. 
            Because the list elements are indexed, the indexes of the shifted elements also are updated.
            </remarks>
            <lastupdated>10/11/2006 4:38:27 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource">
            <summary>
            Represents a set of connections to network variables that can be bound to 
            Windows Forms controls.
            </summary>
            <threadsafety safety="unsafe"/>
            <remarks>
            Refer to <see keyword="UsingNetworkVariableDataSourceNET" keywordType="mstudio">Using the Measurement Studio Network Variable Data Source in Windows Forms</see> 
            for more information.
            <para>
            If the <c>ninetv.dll</c> file is not present on the system, the
            <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource"/> class cannot
            function.  Use the 
            <see cref="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.ConnectionFailed"/>
            event to detect this scenario.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If the process name, variable name, or network variable value contains characters that cannot be
            converted using the system default code page, an exception may be thrown or you may experience unexpected behavior.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 6:01:21 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource"/>.
            </summary>
            <lastupdated>10/11/2006 4:39:46 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource"/> 
            class with the specified container.
            </summary>
            <param name="container">
            	<see cref="T:System.ComponentModel.IContainer"/> that represents the object container.
            </param>
            <lastupdated>10/11/2006 4:39:43 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the 
            <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource"/> object.
            </summary>
            <param name="disposing">
            If <see langword="true"/>, this method releases managed and unmanaged resources.
            If <see langword="false"/>, this method releases only unmanaged resources.
            </param>
            <remarks>
            	<para>
            The public <see cref="M:System.IDisposable.Dispose"/> method and the finalizer call this method.The public <see cref="M:System.IDisposable.Dispose"/>
            invokes the protected Dispose(Boolean) method with <paramref name="disposing"/>
            set to <see langword="true"/>. The finalizer invokes the protected Dispose(Boolean) method with <paramref name="disposing"/> set to <see langword="false"/>.
            </para>
            	<para>
            When you set the <paramref name="disposing"/> parameter to <see langword="true"/>, this method releases all
            resources held by managed objects that this <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource"/>
            references. This method invokes the <see cref="M:System.IDisposable.Dispose"/> method of each referenced object.
            </para>
            </remarks>
            <lastupdated>10/23/2006 6:48:12 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.AutoConnect">
            <summary>
            Gets or sets if all bindings in the <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.Bindings"/> 
            collection connect to associated network variables when the form loads.
            </summary>
            <value>
            	<see langword="true"/> if <see cref="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.Connect"/> 
            is called when the form loads. The default value is <see langword="true"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource"/> has been disposed.
            </exception>
            <remarks>
            	<para>
            If the value of this property is <see langword="false"/>, you must manually call 
            <see cref="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.Connect"/> on each binding.
            </para>
            	<para>
            This property is applicable only to <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource"/> 
            objects that you create on a Windows Form with the Windows Forms Designer.
            </para>
            	<para>
            If the value of this property is <see langword="true"/>, then the
            <see cref="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.ConnectionFailed"/>
            event is raised when a binding's connection fails and no exceptions are thrown directly.
            The handler for this event must be set up through the Designer to ensure it is attached before the 
            connection attempts are made.
            </para>
            </remarks>
            <lastupdated>3/25/2008 5:31:59 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.ConnectionTimeout">
            <summary>
            Gets or sets the amount of time to wait for the network variable connection to be established before timing out.
            </summary>
            <value>
            The amount of time to wait for the network variable connection. The default value is 10 seconds.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource"/> has been disposed.
            </exception>
            <lastupdated>10/23/2006 6:54:21 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.WriteTimeout">
            <summary>
            Gets or sets the amount of time to wait for a write to a network variable to complete before timing out.
            </summary>
            <value>
            The amount of time to wait for the network variable write to complete. The default value is 10 seconds.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource"/> has been disposed.
            </exception>
            <lastupdated>10/22/2006 10:27:47 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.Bindings">
            <summary>
            Gets the collection of bindings in the network variable data source..
            </summary>
            <value>
            The collection of bindings in this network variable data source. 
            You can use a <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding"/> object to bind 
            Windows Forms control properties to network variables.
            </value>
            <lastupdated>10/17/2006 11:14:45 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.ToString">
            <summary>
            Represents a string representation of an object.
            </summary>
            <returns>
            Returns a string representation of the object.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object been disposed.
            </exception>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <lastupdated>10/22/2006 10:29:38 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.Connect">
            <summary>
            Calls <see cref="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.Connect"/> 
            on all bindings in the 
            <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.Bindings"/> collection.
            </summary>
            <exception cref="T:System.DllNotFoundException">
            The <c>ninetv.dll</c> file is not present on the system.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource"/>
            has been disposed.
            </exception>
            <remarks>
            When you call <see cref="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.Connect"/>
            and a connection fails, the exception is thrown in addition to raising the
            <see cref="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.ConnectionFailed"/>
            event.
            </remarks>
            <lastupdated>10/2/2009 5:59:11 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.Disconnect">
            <summary>
            Calls <see cref="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding.Disconnect"/> 
            on all bindings in the 
            <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.Bindings"/> collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/17/2006 11:17:07 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.ConnectionFailed">
            <summary>
            Occurs when the <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource"/>
            attempts to connect to a network variable and fails.
            </summary>
            <remarks>
            	<para>
            When the <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource"/>
            attempts to connect to a  network variable, the connection can fail.  This event is raised
            whenever the connection fails.  Use the
            <see cref="P:NationalInstruments.NetworkVariable.ConnectionFailedEventArgs.Error"/> property of the
            <see cref="T:NationalInstruments.NetworkVariable.ConnectionFailedEventArgs"/> to determine why the
            connection failed.  This event is raised once per connection that fails.
            </para>
            	<para>
            Handle this event when you want to know why connections are failing; use the 
            <see cref="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.ReadFailed"/>
            or <see cref="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.WriteFailed"/>
            events to determine when reads or writes are failing.
            </para>
            	<note type="note">
            If the 
            <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.AutoConnect"/>
            property is set to <see langword="true"/>, then you must ensure that the event handler for the 
            <see cref="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.ConnectionFailed"/>
            event is set up before the
            <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource"/> is initialized.
            This can be done by using the Property Grid of the Windows Forms Designer
            to set up the event handler.
            	</note>
            </remarks>
            <lastupdated>3/25/2008 5:33:24 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.ReadFailed">
            <summary>
            Occurs when the data binding framework requests data from a network variable and the read fails.
            </summary>
            <remarks>
            The <see cref="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.ReadFailed"/>
            event is raised when the data source is disconnected or the value returned from the read contains no data.
            When the <see cref="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.ReadFailed"/>
            event is unhandled and the <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.DefaultReadValue"/>
            is not set for the binding, an <see cref="T:System.InvalidOperationException"/> is thrown, if the read fails. When the 
            <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.DefaultReadValue"/> is set, that value is 
            returned from the read, if it fails. When the 
            <see cref="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.ReadFailed"/> event is handled and
            its <see cref="P:NationalInstruments.NetworkVariable.ReadFailedEventArgs`1.Value"/> is set, that value is 
            returned from the read if it fails. Refer to <see cref="T:NationalInstruments.NetworkVariable.ReadFailedEventArgs`1"/>
            for more information
            about the arguments that are passed to the <see cref="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.ReadFailed"/> event handler. 
            </remarks>
            <seealso cref="T:NationalInstruments.NetworkVariable.ReadFailedEventArgs`1"/>
            <lastupdated>3/26/2007 11:36:25 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.WriteFailed">
            <summary>
            Occurs when the data binding framework attempts to update the data of a network variable 
            to which a connection cannot be established.
            </summary>
            <remarks>
            Refer to <see cref="T:NationalInstruments.NetworkVariable.WriteFailedEventArgs`1"/>
            for more information
            about the arguments that are passed to the <see cref="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.WriteFailed"/>
            event handler. 
            </remarks>
            <seealso cref="T:NationalInstruments.NetworkVariable.WriteFailedEventArgs`1"/>
            <lastupdated>3/26/2007 11:39:24 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.BindingStatusUpdated">
            <summary>
            Occurs when a network variable connection associated with a 
            binding changes its <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBindingBase.ConnectionStatus"/>.
            </summary>
            <remarks>
            Refer to <see cref="T:NationalInstruments.NetworkVariable.BindingStatusUpdatedEventArgs`1"/> for more information
            about the arguments that are passed to the <see cref="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.BindingStatusUpdated"/> event handler. 
            </remarks>
            <seealso cref="T:NationalInstruments.NetworkVariable.BindingStatusUpdatedEventArgs`1"/>
            <lastupdated>3/26/2007 11:25:14 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.OnConnectionFailed(NationalInstruments.NetworkVariable.ConnectionFailedEventArgs)">
            <summary>
            Raises the 
            <see cref="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.ConnectionFailed"/>
            event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.NetworkVariable.ConnectionFailedEventArgs"/> that contains
            the event data.
            </param>
            <lastupdated>3/25/2008 5:32:39 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.OnReadFailed(NationalInstruments.NetworkVariable.ReadFailedEventArgs{NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding})">
            <summary>
            Raises the <see cref="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.ReadFailed"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.NetworkVariable.ReadFailedEventArgs`1"/> object that 
            contains the event data.
            </param>
            <lastupdated>10/11/2006 4:32:14 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.OnWriteFailed(NationalInstruments.NetworkVariable.WriteFailedEventArgs{NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding})">
            <summary>
            Raises the <see cref="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.WriteFailed"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.NetworkVariable.WriteFailedEventArgs`1"/> object that 
            contains the event data.
            </param>
            <lastupdated>10/11/2006 4:35:52 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.OnBindingStatusUpdated(NationalInstruments.NetworkVariable.BindingStatusUpdatedEventArgs{NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBinding})">
            <summary>
            Raises the 
            <see cref="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.BindingStatusUpdated"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.NetworkVariable.BindingStatusUpdatedEventArgs`1"/> object that 
            contains the event data.
            </param>
            <lastupdated>10/11/2006 4:32:05 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.System#ComponentModel#IListSource#ContainsListCollection">
            <exclude/>
            <lastupdated>1/23/2009 2:05:31 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.System#ComponentModel#IListSource#GetList">
            <exclude/>
            <lastupdated>1/23/2009 2:05:28 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.System#ComponentModel#ISupportInitialize#BeginInit">
            <exclude/>
            <lastupdated>1/23/2009 2:05:24 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.System#ComponentModel#ISupportInitialize#EndInit">
            <exclude/>
            <lastupdated>1/23/2009 2:05:21 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog">
            <summary>
            Prompts the user to select a network variable location on the network.
            </summary>
            <remarks>
            	<para>
            This class provides a way to prompt the user to browse to a network variable location on the subnet. The user can add any machine
            that is not on the subnet by right-clicking <format type="bold">Network Neighborhood</format> and selecting <format type="bold">Add Machine</format>. Use this class when you want to allow a user to select a valid network variable location.
            </para>
            	<para>
            Call <see cref="M:System.Windows.Forms.CommonDialog.ShowDialog"/> to display the dialog box. Use the
            <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.SelectedLocation"/> property to find the selected
            location. <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.ShowTypeToolTip"/> determines
            whether a tooltip containing the data type of the network variable item is displayed. 
            Use the <see cref="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.BeforeTypeToolTip"/>
            event to customize the tooltip string of each item.
            </para>
            </remarks>
            <threadsafety safety="unsafe"/>
            <lastupdated>9/16/2008 11:19:44 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog"/>
            with the specified container.
            </summary>
            <param name="container">
            An <see cref="T:System.ComponentModel.IContainer"/> that represents the container for the
            object.
            </param>
            <seealso cref="T:System.ComponentModel.IContainer"/>
            <lastupdated>10/11/2006 4:40:49 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog"/> class.
            </summary>
            <lastupdated>10/11/2006 4:40:56 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.Reset">
            <summary>
            Resets properties to their default values. 
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            This method resets the <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.SelectedLocation"/>.
            </remarks>
            <lastupdated>10/23/2006 6:54:15 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.SelectedLocation">
            <summary>
            Gets or sets the network variable location selected by the user.
            </summary>
            <value>
            The location of the network variable first selected in the dialog box or the last network variable location selected by
            the user. The default value is <see cref="F:System.String.Empty"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <remarks>
            	<para>
            If the <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.SelectedLocation"/> property is set
            before showing the dialog box, that location will be the selected location when the dialog box is displayed using <see cref="M:System.Windows.Forms.CommonDialog.ShowDialog"/>.
            </para>
            	<para>
            The <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.SelectedLocation"/>
            property expects a string in a format similar to network paths and is not case sensitive.  If the string is not a valid
            path to an existing network variable item, the default value will be used. Examples of valid paths are:
            <list type="bullet">
            			<item>
            				<description>
            					<format type="monospace">\\localhost\my_process\my_variable</format>
            				</description>
            			</item>
            			<item>
            				<description>
            					<format type="monospace">\\192.168.1.100\my_process\my_variable</format>
            				</description>
            			</item>
            			<item>
            				<description>
            					<format type="monospace">\\test_machine.my_network.com\my_process\my_variable</format>
            				</description>
            			</item>
            			<item>
            				<description>
            					<format type="monospace">\\localhost\system\my_variable</format>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            If the <see cref="M:System.Windows.Forms.CommonDialog.ShowDialog"/> method returns <see cref="F:System.Windows.Forms.DialogResult.OK"/>,
            the user clicked the OK button and the <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.SelectedLocation"/>
            property returns a string containing the location selected by the user. If <see cref="M:System.Windows.Forms.CommonDialog.ShowDialog"/>
            returns <see cref="F:System.Windows.Forms.DialogResult.Cancel"/>, the user canceled the dialog box and 
            <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.SelectedLocation"/> has the
            same value it had prior to displaying the dialog box. The OK button in the dialog box is disabled until the user selects a valid
            network variable location.
            </para>
            </remarks>
            <lastupdated>7/25/2008 5:08:26 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.SelectedLocations">
            <summary>
            Gets the selected network variable locations when the user selects more than one location in the network variable browser dialog box.
            </summary>
            <value>
            The multiple network variable locations selected by the user.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            If <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.MultipleSelect"/> is
            <see langword="false"/>, <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.SelectedLocations"/>
            returns an array with only one item that is equivalent to the value of
            <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.SelectedLocation"/>. If
            <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.MultipleSelect"/> is
            <see langword="true"/> and the user selects more than one location in the dialog box,
            <see cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.SelectedLocations"/> returns
            an array containing the selected network variable locations.
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.MultipleSelect"/>
            <lastupdated>7/25/2008 5:08:32 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.MultipleSelect">
            <summary>
            Gets or sets whether more than one network variable location can be selected in the network variable browser dialog box.
            </summary>
            <value>
            	<see langword="true"/> if more than one network variable location can be selected. The default value is <see langword="false"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <seealso cref="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.SelectedLocations"/>
            <lastupdated>7/12/2007 12:46:10 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.Text">
            <summary>
            Gets or sets the text displayed in the title bar of the dialog.
            </summary>
            <value>
            The text displayed in the title bar of the dialog.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value is <see langword="null"/>.
            </exception>
            <lastupdated>10/23/2006 6:54:13 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.ShowTypeToolTip">
            <summary>
            Gets or sets whether a tooltip is displayed. 
            </summary>
            <value>
            	<see langword="true"/> if a tooltip is displayed.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            The tooltip displays the data type of the network variable. You can customize the text displayed
            in the tooltip with the <see cref="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.BeforeTypeToolTip"/> event.
            </remarks>
            <lastupdated>3/15/2007 8:58:21 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog"/>
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            	<para>
            The public <see cref="M:System.IDisposable.Dispose"/> method and the finalizer call this method.The public <see cref="M:System.IDisposable.Dispose"/>
            invokes the protected Dispose(Boolean) method with <paramref name="disposing"/>
            set to <see langword="true"/>. The finalizer invokes the protected Dispose(Boolean) method with <paramref name="disposing"/> set to <see langword="false"/>.
            </para>
            	<para>
            When you set the <paramref name="disposing"/> parameter to <see langword="true"/>, this method releases all
            resources held by managed objects that this <see cref="T:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog"/>
            references. This method invokes the <see cref="M:System.IDisposable.Dispose"/> method of each referenced object.
            </para>
            </remarks>
            <seealso cref="M:System.IDisposable.Dispose"/>
            <seealso cref="T:System.IDisposable"/>
            <lastupdated>10/23/2006 6:48:45 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.RunDialog(System.IntPtr)">
            <summary>
            Specifies a common dialog box. 
            </summary>
            <param name="hwndOwner">
            The window handle of the owner window for the common dialog box. 
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <returns>
            	<see langword="true"/> if the dialog box was successfully run; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            Overrides <see cref="M:System.Windows.Forms.CommonDialog.RunDialog(System.IntPtr)"/>.
            </remarks>
            <lastupdated>10/23/2006 7:12:17 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.PropertyChanged">
            <summary>
            Occurs when the value of a property changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>10/23/2006 6:54:18 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableBrowserDialog.BeforeTypeToolTip">
            <summary>
            Occurs before a tooltip is displayed for a network variable.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>3/15/2007 8:58:36 AM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.WriteFailedEventArgs`1">
            <summary>
            Provides data when a data source write fails.
            </summary>
            <threadsafety safety="safe"/>
            <typeparam name="TBinding">
            The associated binding class.
            </typeparam>
            <seealso cref="E:NationalInstruments.NetworkVariable.WebForms.NetworkVariableDataSource.WriteFailed"/>
            <seealso cref="E:NationalInstruments.NetworkVariable.WindowsForms.NetworkVariableDataSource.WriteFailed"/>
            <lastupdated>3/26/2007 2:04:56 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WriteFailedEventArgs`1.#ctor(`0,NationalInstruments.NetworkVariable.WriteFailureCause)">
            <summary>
            Initializes a new instance of <see cref="T:NationalInstruments.NetworkVariable.WriteFailedEventArgs`1"/> with
            the specified binding and failure cause.
            </summary>
            <param name="binding">
            The binding that describes the network variable which failed to write.
            </param>
            <param name="failureCause">
            A <see cref="T:NationalInstruments.NetworkVariable.WriteFailureCause"/> indicating the cause of the write failure.
            </param>
            <lastupdated>10/16/2006 10:55:31 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WriteFailedEventArgs`1.Binding">
            <summary>
            Gets the binding that describes the network variable which failed to write.
            </summary>
            <value>
            The binding that describes the network variable which failed to write.
            </value>
            <lastupdated>10/9/2006 4:47:31 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.WriteFailedEventArgs`1.FailureCause">
            <summary>
            Gets the cause of the write failure.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.NetworkVariable.WriteFailureCause"/> indicating the cause of the write failure.
            </value>
            <lastupdated>10/16/2006 10:56:04 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            <summary>
            Represents an error code received from the underlying driver.
            </summary>
            <remarks>
            Occasionally, errors occur when this API makes calls into the underlying driver. When an error occurs, the
            error is exposed through this exception class.
            </remarks>
            <threadsafety safety="safe"/>
            <lastupdated>9/16/2008 11:18:57 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableException"/> class.
            </summary>
            <lastupdated>10/9/2006 12:45:42 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableException"/> class using the
            given error message.
            </summary>
            <param name="message">
            An error message describing this exception.
            </param>
            <lastupdated>10/16/2006 9:27:25 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableException"/> class using the
            given error message and inner exception.
            </summary>
            <param name="message">
            An error message describing this exception.
            </param>
            <param name="inner">
            The exception that caused this exception to be thrown.
            </param>
            <lastupdated>10/16/2006 9:26:52 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableException"/>
            class with the given error message and error code.
            </summary>
            <param name="message">
            An error message describing this exception.
            </param>
            <param name="errorCode">
            The error code associated with this exception.
            </param>
            <lastupdated>10/16/2006 9:26:43 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableException.#ctor(System.String,System.Exception,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableException"/> class with the 
            given error message, inner exception, and error code.
            </summary>
            <param name="message">
            An error message describing this exception.
            </param>
            <param name="inner">
            The exception that caused this exception to be thrown.
            </param>
            <param name="errorCode">
            The error code associated with this exception.
            </param>
            <lastupdated>10/16/2006 9:28:18 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableException"/> object using serialized data.
            </summary>
            <param name="info">
            Object that holds the serialized object data.
            </param>
            <param name="context">
            Contextual information about the source or destination.
            </param>
            <lastupdated>10/9/2006 12:48:01 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object with information about the exception.
            </summary>
            <param name="info">
            The object that holds the serialized object data.
            </param>
            <param name="context">
            Contextual information about the source or destination.
            </param>
            <lastupdated>10/16/2006 9:29:15 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableException.ErrorCode">
            <summary>
            Gets the error code associated with the error.
            </summary>
            <value>
            The value of the error code.
            </value>
            <lastupdated>10/9/2006 1:14:10 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.NetworkVariableManager">
            <summary>
            Provides an <see langword="abstract"/> base class for all network variable reader and writer functionality. 
            </summary>
            <threadsafety safety="safe"/>
            <remarks>
            Use <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectionStatus"/> to determine
            whether the network variable is connected. Use <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableManager.Location"/>
            to return the network variable path to which the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableManager"/> is connected
            to. Use <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/> to connect to the
            <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableManager.Location"/> synchronously and
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectAsync"/> to connect asynchronously. Handle the
            <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableManager.PropertyChanged"/> event to determine if properties, such as 
            <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectionStatus"/>, have changed.</remarks>
            <lastupdated>10/22/2006 8:39:25 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Finalize">
            <exclude/>
            <lastupdated>10/8/2009 9:18:34 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>False</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect">
            <summary>
            Connects to the <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableManager.Location"/> of the
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableManager"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<see cref="P:NationalInstruments.NetworkVariable.NetworkVariableManager.Location"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.TimeoutException">
            The operation has timed out.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            This method blocks and waits a maximum of 10 seconds to connect to the server. If the connection does not occur within
            10 seconds, a <see cref="T:System.TimeoutException"/> is thrown.
            </para>
            </remarks>
            <lastupdated>10/2/2009 5:59:33 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect(System.TimeSpan)">
            <summary>
            Connects to the <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableManager.Location"/> of the
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableManager"/> with the specified timeout.
            </summary>
            <param name="timeout">
            The <see cref="T:System.TimeSpan"/> value specifying how long the connection waits.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<see cref="P:NationalInstruments.NetworkVariable.NetworkVariableManager.Location"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.TimeoutException">
            The operation has timed out.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="timeout"/> is less than or equal to zero.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            The total milliseconds of the <paramref name="timeout"/> is greater than the maximum integer value.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            This method blocks and waits for the duration of <paramref name="timeout"/> until the connection is made with the server.
            If the connection cannot be made to the server after the duration of <paramref name="timeout"/> expires, a <see cref="T:System.TimeoutException"/> is thrown.
            To specify a <paramref name="timeout"/> of forever, use <see cref="F:System.TimeSpan.MaxValue"/>.
            </remarks>
            <lastupdated>10/2/2009 5:59:33 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableManager.SynchronizeCallbacks">
            <summary>
            Gets or sets how events and callback delegates are invoked.
            </summary>
            <value>
            	<see langword="true"/> if events and callbacks are invoked through the 
            <see cref="M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)"/> or
            <see cref="M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)"/> methods; otherwise, events
            and callbacks are invoked directly.  The default value is <see langword="true"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            In some cases, callbacks and event handlers are executed in a different thread than the rest of the program. 
            Therefore, you must take special care when accessing objects that have thread affinity, such as user interface controls, 
            from these callbacks and event handlers. For more information, refer to 
            <see keyword="EventsCallbacksThreadSafety" keywordType="mstudio">Events, Callbacks, and Thread Safety in Measurement Studio .NET Class Libraries</see>.
            </remarks>
            <lastupdated>10/16/2006 9:38:38 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableManager.IsDisposed">
            <summary>
            Gets a value indicating whether the component has been disposed.
            </summary>
            <value>
            	<see langword="true"/> if the component has been disposed.
            </value>
            <lastupdated>10/9/2006 12:51:32 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Dispose">
            <summary>
            Releases the resources used by <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableManager"/>.
            </summary>
            <remarks>
            Call <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Dispose"/> when you are finished using the
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableManager"/>. The
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Dispose"/> method leaves the
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableManager"/> in an unusable state. In an unusable state, you cannot call methods or properties on the object.
            </remarks>
            <lastupdated>10/23/2006 6:49:57 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Disconnect">
            <summary>
            Disconnects the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableManager"/> from the
            <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableManager.Location"/>.
            </summary>
            <remarks>
            	<see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Disconnect"/> calls <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Dispose"/>.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/22/2006 8:23:42 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableManager"/>
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only
            unmanaged resources.
            </param>
            <remarks>
            This method is called by the public <see cref="M:System.IDisposable.Dispose"/>
            method. <see cref="M:System.IDisposable.Dispose"/> 
            invokes the protected Dispose(Boolean) method with the <paramref name="disposing"/> 
            parameter set to <see langword="true"/>. To invoke from a finalizer, pass <see langword="false"/> to the
            protected Dispose(Boolean) method.
            <para>Call <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Dispose"/> when you are finished using the
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableManager"/>. The
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Dispose"/> method leaves the
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableManager"/> in an unusable state. In an unusable state, you cannot call methods or properties on the object.
            </para>
            </remarks>
            <lastupdated>10/22/2006 8:43:55 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableManager.FlushAllConnections">
            <summary>
            Flushes all pending writes to network variables.
            </summary>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error happened.  Check the exception's message property for more information.
            </exception>
            <remarks>
            	<para>
            The <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.FlushAllConnections"/>
            method affects all connections that have been made.  Throughput may be disrupted by calling this
            method.
            </para>
            </remarks>
            <seealso cref="P:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.FlushOnWrite"/>
            <seealso cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.FlushAllConnections"/>
            <lastupdated>3/25/2008 3:25:15 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableManager.FlushAllConnections(System.TimeSpan)">
            <summary>
            Flushes all pending writes to network variables with the specified timeout.
            </summary>
            <param name="timeout">
            The amount of time to wait for the flush operation to complete. If the flush operation
            does not complete within this time period, a <see cref="T:System.TimeoutException"/> is
            thrown.  To block until the flush completes, specify <see cref="F:System.TimeSpan.MaxValue"/>.
            If you do not want to wait for the flush to complete, specify <see cref="F:System.TimeSpan.Zero"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            The specified timeout was less than <see cref="F:System.TimeSpan.Zero"/>.
            </para>
            	<para>
            -or-
            </para>
            	<para>
            The specified timeout is too large.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error happened.  Check the <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.TimeoutException">
            The specified timeout elapsed before the flush operation could complete.
            </exception>
            <remarks>
            	<para>
            By default, all buffers are flushed automatically every 10ms.  You can call this method if it
            is important that a value is written immediately.  For example, you may have written a large
            amount of data to a <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1"/>,
            and you want to ensure the buffer is written immediately.  Calling
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.FlushAllConnections"/>
            resets the 10ms timer.
            </para>
            	<para>
            The <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.FlushAllConnections"/>
            method affects all connections that have been made.  Throughput may be disrupted by calling this
            method. Refer to <see keyword="FlushBehaviorNetworkVariable" keywordType="mstudio">
            Buffer Flushing Behavior of the Network Variable Class Libraries</see> for more information.</para>
            </remarks>
            <seealso cref="P:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.FlushOnWrite"/>
            <seealso cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.FlushAllConnections"/>
            <lastupdated>3/25/2008 3:28:18 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableManager.ThrowExceptionIfDisposed">
            <summary>
            Throws an <see cref="T:System.ObjectDisposedException"/> if the component has been disposed.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/9/2006 1:02:38 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectAsync">
            <summary>
            Asynchronously connects to the <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableManager.Location"/> of the
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableManager"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<see cref="P:NationalInstruments.NetworkVariable.NetworkVariableManager.Location"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.TimeoutException">
            The operation has timed out.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="T:NationalInstruments.NetworkVariable.NetworkVariableManager"/> has a 
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectAsync"/> call in progress.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            Call this method when your application
            should not block. Each call to this method executes the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/>
            method in a separate thread that is automatically allocated from the thread pool. When the asynchronous operation completes,
            it raises the <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectCompleted"/> event. Handle the
            <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectCompleted"/> event to get
            information about the completed operation from the <see cref="T:NationalInstruments.NetworkVariable.ConnectCompletedEventArgs"/>
            class. Check the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property to determine if an exception occurred during
            the execution of the asynchronous task. If no error occurs, the connection is successful.
            </para>
            	<para>
            		This method times out if
            the connection is not established within 10 seconds. If a timeout occurs, the
            <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectCompleted"/> event is raised with the
            <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property set to <see cref="T:System.TimeoutException"/>.
            	</para>
            </remarks>
            <seealso cref="E:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectCompleted"/>
            <lastupdated>10/2/2009 5:59:34 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectAsync(System.TimeSpan)">
            <summary>
            Asynchronously connects to the <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableManager.Location"/> of the
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableManager"/> with the specified timeout.
            </summary>
            <param name="timeout">
            The <see cref="T:System.TimeSpan"/> value specifying how long to wait before the operation times out.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<see cref="P:NationalInstruments.NetworkVariable.NetworkVariableManager.Location"/> contains characters that cannot be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.TimeoutException">
            The operation has timed out.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="T:NationalInstruments.NetworkVariable.NetworkVariableManager"/> has a 
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectAsync"/> call in progress.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="timeout"/> is less than or equal to zero.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            The total milliseconds of the <paramref name="timeout"/> is greater than the maximum integer value.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            Call this method when your application
            should not block. Each call to this method executes the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/>
            method in a separate thread that is automatically allocated from the thread pool. When the asynchronous operation completes,
            it raises the <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectCompleted"/> event. Handle the
            <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectCompleted"/> event to get
            information about the completed operation from the <see cref="T:NationalInstruments.NetworkVariable.ConnectCompletedEventArgs"/>
            class. Check the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property to determine if an exception occurred during
            the execution of the asynchronous task. If no error occurs, the connection is successful.
            </para>
            	<para>
            This method times out if
            the connection is not established before <paramref name="timeout"/> has expired. If a timeout occurs, the
            <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectCompleted"/> event is raised with the
            <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property set to <see cref="T:System.TimeoutException"/>.
            To specify a <paramref name="timeout"/> of forever, use <see cref="F:System.TimeSpan.MaxValue"/>.
            	</para>
            </remarks>
            <seealso cref="E:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectCompleted"/>
            <lastupdated>10/2/2009 5:59:34 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableManager.ToString">
            <summary>
            Gets a string representation of the object.
            </summary>
            <returns>
            Returns a string representation of the object.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            Overrides <see cref="M:System.Object.ToString"/>.
            </remarks>
            <lastupdated>10/16/2006 9:41:46 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectionStatus">
            <summary>
            Gets a value indicating the connection status of the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableManager"/>.
            </summary>
            <value>
            The connection status of the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableManager"/>.
            </value>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            To receive notifications when <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectionStatus"/> changes,
            handle the <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableManager.PropertyChanged"/> event.
            	
            </remarks>
            <seealso cref="E:NationalInstruments.NetworkVariable.NetworkVariableManager.PropertyChanged"/>
            <lastupdated>10/2/2009 5:59:33 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableManager.Location">
            <summary>
            Gets the file path  <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableManager"/> is connected to.
            </summary>
            <value>
            The location the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableManager"/> is connected to.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            To change the location, create a new reader or writer network variable. <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Dispose"/> of the current network variable if the connection is no longer required.
            </remarks>
            <lastupdated>10/22/2006 8:22:35 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableManager.OnConnectCompleted(NationalInstruments.NetworkVariable.ConnectCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectCompleted"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.NetworkVariable.ConnectCompletedEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<note type="caution">
            		<para>
            If you override <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.OnConnectCompleted(NationalInstruments.NetworkVariable.ConnectCompletedEventArgs)"/>
            in a derived class, an exception is thrown within your <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.OnConnectCompleted(NationalInstruments.NetworkVariable.ConnectCompletedEventArgs)"/>
            implementation any time you read from or write to a network variable.  The underlying 
            network variable library uses a special thread for raising events.  This thread is blocked during execution of 
            the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.OnConnectCompleted(NationalInstruments.NetworkVariable.ConnectCompletedEventArgs)"/> method.
            While the special thread is blocked, some operations in the network variable class library cannot be performed. Consequently, you must not perform any the following operations from 
            the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.OnConnectCompleted(NationalInstruments.NetworkVariable.ConnectCompletedEventArgs)"/> method:
            </para>
            		<list type="bullet">
            			<item>
            				<description>
            Connect or disconnect any reader or writer. This includes
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1"/>,
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1"/>,
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableReader`1"/>,
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1"/>,
            and <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableWriter`1"/>.
            and 
            </description>
            			</item>
            			<item>
            				<description>
            Read or write data.
            </description>
            			</item>
            			<item>
            				<description>
            Create a <see cref="T:NationalInstruments.NetworkVariable.Browser"/>.
            </description>
            			</item>
            			<item>
            				<description>
            Use a <see cref="T:NationalInstruments.NetworkVariable.Browser"/> to browse by calling
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetItem(System.String)"/>,
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitems(NationalInstruments.NetworkVariable.BrowserItem)"/>,
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitemsAsync(NationalInstruments.NetworkVariable.BrowserItem,System.Object)"/>,
            or <see cref="M:NationalInstruments.NetworkVariable.Browser.TryGetItem(System.String,NationalInstruments.NetworkVariable.BrowserItem@)"/>.
            </description>
            			</item>
            			<item>
            				<description>
            Configure a network variable using
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/>,
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/>,
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariable"/>,
            or <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/>.
            </description>
            			</item>
            		</list>
            		<para>
            If you need to perform any of these operations in response to the
            <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectCompleted"/> event, use an event
            handler instead of overriding <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.OnConnectCompleted(NationalInstruments.NetworkVariable.ConnectCompletedEventArgs)"/>.
            Event handlers are called in a way that does not block the special thread and are exempt from these limitations. 
            </para>
            	</note>
            </remarks>
            <lastupdated>10/2/2009 5:46:34 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectCompleted">
            <summary>
            Occurs when an asynchronous connect completes or raises an exception.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <remarks>
            The <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectCompleted"/> event occurs when
            a connection is made using one of the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectAsync"/> methods.
            If an exception is thrown or error occurs during the connection process, the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property 
            can be used to obtain the exception information.
            </remarks>
            <lastupdated>10/16/2006 10:31:36 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableManager.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableManager.PropertyChanged"/> event.
            </summary>
            <param name="e">
            A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<note type="caution">
            		<para>
            If you override <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"/> in a
            derived class, an exception is thrown within your <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"/>  
            implementation any time you read from or write to a network variable.  The underlying network
            variable library uses a special thread for raising events.  This thread is blocked during execution of the
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"/> method. While the special thread is blocked, some operations in the network variable class library cannot be performed. Consequently, you must not perform any the following operations from the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"/> method:
            </para>
            		<list type="bullet">
            			<item>
            				<description>
            Connect or disconnect any reader or writer. This includes
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1"/>,
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1"/>,
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableReader`1"/>,
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1"/>,
            and <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableWriter`1"/>.
            and 
            </description>
            			</item>
            			<item>
            				<description>
            Read or write data.
            </description>
            			</item>
            			<item>
            				<description>
            Create a <see cref="T:NationalInstruments.NetworkVariable.Browser"/>.
            </description>
            			</item>
            			<item>
            				<description>
            Use a <see cref="T:NationalInstruments.NetworkVariable.Browser"/> to browse by calling
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetItem(System.String)"/>,
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitems(NationalInstruments.NetworkVariable.BrowserItem)"/>,
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitemsAsync(NationalInstruments.NetworkVariable.BrowserItem,System.Object)"/>,
            or <see cref="M:NationalInstruments.NetworkVariable.Browser.TryGetItem(System.String,NationalInstruments.NetworkVariable.BrowserItem@)"/>.
            </description>
            			</item>
            			<item>
            				<description>
            Configure a network variable using
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/>,
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/>,
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariable"/>,
            or <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/>.
            </description>
            			</item>
            		</list>
            		<para>
            If you need to perform any of these operations in response to the
            <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableManager.PropertyChanged"/> event, use an event
            handler instead of overriding <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"/>.
            Event handlers are called in a way that does not block the special thread and are exempt from these limitations. 
            </para>
            	</note>
            </remarks>
            <lastupdated>10/2/2009 6:36:02 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.NetworkVariable.NetworkVariableManager.PropertyChanged">
            <summary>
            Occurs when a property changes.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <remarks>
            The following properties raise this event:
            <list type="bullet">
            		<item>
            			<description>
            				<see cref="P:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectionStatus"/>
            			</description>
            		</item>
            		<item>
            			<description>
            				<see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1.ItemCapacity" crefType="PartiallyQualified"/>
            			</description>
            		</item>
            		<item>
            			<description>
            				<see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1.ItemCapacity" crefType="PartiallyQualified"/>
            			</description>
            		</item>
            	</list>
            	<note type="note">
            Note that when this property is raised for the <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1.ItemCount"/>
            property of <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1"/>, if you call
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1.ReadData"/> inside of your event handler the
            <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1.ItemCount"/> property will be changed by the read.
            This can cause you to unintentionally create an infinite recursive loop.  To prevent this, make sure to check the
            <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1.ItemCount"/>
            before calling <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1.ReadData"/>.  The following code snippet
            demonstrates this.  It assumes there is a <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1"/> variable
            named _subscriber, and only reads an item if <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1.ItemCount"/>
            is greater than 0.
            </note>
            	<code lang="C#">
            private void HandleSubscriberPropertyChanged(object sender, PropertyChangedEventArgs e)
            {
                if (e.PropertyName == "ItemCount")
                {
                    if (_subscriber.ItemCount &gt; 0)
                    {
                        NetworkVariableData&lt;double&gt; data = _subscriber.ReadData();
                        // process the data...
                    }
                }
            }
            </code>
            	<code lang="VB.NET">
            Private Sub HandleSubscriberPropertyChanged(ByVal sender As Object, ByVal e As PropertyChangedEventArgs)
                If e.PropertyName = "ItemCount" Then
                    If _subscriber.ItemCount &gt; 0 Then
                        Dim data As NetworkVariableData(Of Double) = _subscriber.ReadData())
                        ' Process the data...
                    End If
                End If
            End Sub
            </code>
            	<para>
            This will still be recursively called, but will stop reading when all items have been read.  If you want to guarantee that only one item is read, you will have to
            keep track of the last <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1.ItemCount"/> value in a variable and decide
            when to read based on how <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1.ItemCount"/> changed.
            </para>
            </remarks>
            <lastupdated>10/2/2009 5:59:35 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.NetworkVariableReader`1">
            <summary>
            Provides a way to read network variable data on demand.
            </summary>
            <threadsafety safety="safe"/>
            <typeparam name="TValue">
            The type of the variable to read. The following types are supported by <typeparamref name="TValue"/>:
            <see cref="T:System.Object"/>;
            <see cref="T:System.Byte"/>, <see cref="T:System.Byte"/>[], <see cref="T:System.Byte"/>[,];
            <see cref="T:System.UInt16"/>, <see cref="T:System.UInt16"/>[], <see cref="T:System.UInt16"/>[,];
            <see cref="T:System.UInt32"/>, <see cref="T:System.UInt32"/>[], <see cref="T:System.UInt32"/>[,];
            <see cref="T:System.UInt64"/>, <see cref="T:System.UInt64"/>[], <see cref="T:System.UInt64"/>[,];
            <see cref="T:System.SByte"/>, <see cref="T:System.SByte"/>[], <see cref="T:System.SByte"/>[,];
            <see cref="T:System.Int16"/>, <see cref="T:System.Int16"/>[], <see cref="T:System.Int16"/>[,];
            <see cref="T:System.Int32"/>, <see cref="T:System.Int32"/>[], <see cref="T:System.Int32"/>[,];
            <see cref="T:System.Int64"/>, <see cref="T:System.Int64"/>[], <see cref="T:System.Int64"/>[,];
            <see cref="T:System.Boolean"/>, <see cref="T:System.Boolean"/>[], <see cref="T:System.Boolean"/>[,];
            <see cref="T:System.Single"/>, <see cref="T:System.Single"/>[], <see cref="T:System.Single"/>[,];
            <see cref="T:System.Double"/>, <see cref="T:System.Double"/>[], <see cref="T:System.Double"/>[,];
            <see cref="T:System.String"/>, <see cref="T:System.String"/>[], <see cref="T:System.String"/>[,]; and
            <see cref="T:NationalInstruments.AnalogWaveform`1"/>, <see cref="T:NationalInstruments.AnalogWaveform`1"/>[].
            			</typeparam>
            <remarks>
            	<para>
            		<see cref="T:NationalInstruments.NetworkVariable.NetworkVariableReader`1"/> goes across the network to retrieve
            the next value from the server every time a read call is issued. Because the network is accessed every time a read is called,
            network traffic increases. To minimize network traffic, consider using
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1"/>.
            </para>
            	<para>
            Use <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableReader`1.ReadData"/> to read the next value from the server
            synchronously and <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableReader`1.ReadDataAsync(System.Object)"/> to read data
            asynchronously.
            </para>
            	<note type="note">
            Network variable performance decreases when machines hosting the reader, writer, and variables are mixed between Logos and LogosXT. Logos is the underlying technology of the
            NI-Publish Subscribe Protocol (<format type="monospace">psp:</format>), a National Instruments proprietary protocol for inter-process communication.
            Network variables in Measurement Studio 8.1.2, LabWindows/CVI 8.5, and LabVIEW 8.5 and later use a more efficient TCP-based implementation of Logos called LogosXT to transfer network variable data. National Instruments recommends that you use LogosXT, which <see cref="N:NationalInstruments.NetworkVariable"/> uses by default.
            Performance is especially degraded when the writer and network variable host use LogosXT and the reader that attempts to read the network variable uses Logos. This issue occurs for all reader classes. 
            <para>
            For optimum performance, National Instruments recommends that all machines accessing network variables, including the machine that hosts the variable, should use LogosXT. If using LogosXT on all machines is not possible, you should disable LogosXT. You disable LogosXT by  adding a <format type="monospace">DWORD</format> value named <format type="monospace">DisablePSPXT</format>
            to the registry key <format type="monospace">HKEY_LOCAL_MACHINE\SOFTWARE\National Instruments\LogosXT </format> and setting its value to 1. 
            If you must use a mix of Logos versions, you can reduce the performance loss by using Distributed System Manager. Use Distributed System Manager to configure a sufficiently large server-side buffer for the network variable.
            </para>
            	</note>
            </remarks>
            <lastupdated>6/30/2009 3:07:29 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableReader`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableReader`1"/> class
            with the specified path name.
            </summary>
            <param name="location">
            The path name of the network variable. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="location"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The type of <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableReader`1"/> is invalid.
            </exception>
            <remarks>
            	<para>
            The format of the <paramref name="location"/> is similar
            to the format of items on network shares and is not case-sensitive. The following are examples:
            <list type="bullet">
            			<item>
            				<description>
            					<format type="monospace">
            \\localhost\my_process\my_variable 
             </format>
            				</description>
            			</item>
            			<item>
            				<description>
            					<format type="monospace">
            \\192.168.1.100\my_process\my_variable 
             </format>
            				</description>
            			</item>
            			<item>
            				<description>
            					<format type="monospace">
            \\test_machine.my_network.com\my_process\my_variable 
             </format>
            				</description>
            			</item>
            			<item>
            				<description>
            					<item>
            						<description>
            							<format type="monospace">
            \\localhost\system\my_variable 
             </format>
            						</description>
            					</item>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            If you specify a new variable in the system process, such as <format type="monospace">
            \\localhost\system\my_variable</format>, then the variable
            is implicitly created and can hold values of any type.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If <paramref name="location"/> contains unmappable characters,
            an exception is thrown when you call <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/>.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 3:55:30 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableReader`1.ReadData">
            <summary>
            Reads the next value from the network variable on the server.
            </summary>
            <returns>
            A <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> that contains the read data.
            </returns>
            <exception cref="T:System.TimeoutException">
            The operation has timed out.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The type of the data being read does not match the type of 
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableReader`1"/>.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            		<see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/> has not been called successfully.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The type of the data being read cannot be converted to an equivalent .NET type.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            The array dimension of the read data is not supported.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            	This method blocks and waits
            a maximum of 10 seconds for the next data value on the server to return. If there is no new data after 10 seconds,
            a <see cref="T:System.TimeoutException"/> is thrown.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If <typeparamref name="TValue"/> is <see cref="T:System.Object"/>, <see cref="T:System.String"/>,
            or an array of either type and the
            value contains unmappable characters, the value returned by the
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableData`1.GetValue"/> method is
            unpredictable.  For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 5:59:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableReader`1.ReadData(System.TimeSpan)">
            <summary>
            Reads the next value from the network variable on the server with the specified timeout.
            </summary>
            <param name="timeout">
            The <see cref="T:System.TimeSpan"/> value specifying how long the read waits.
            </param>
            <returns>
            A <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> that contains information about
            the read data.
            </returns>
            <exception cref="T:System.TimeoutException">
            The operation has timed out.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="timeout"/> is less than or equal to zero.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            The total milliseconds of the <paramref name="timeout"/> is greater than the maximum integer value.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The type of the data being read does not match the type of 
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableReader`1"/>.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            		<see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/> has not been called successfully.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The type of the data being read cannot be converted to an equivalent .NET type.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            The array dimension of the read data is not supported.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            	This method blocks and waits
            for the duration of <paramref name="timeout"/> until the next data value on the server is read. If there is no new data
            after the duration of <paramref name="timeout"/> expires, a <see cref="T:System.TimeoutException"/> is thrown. To specify a <paramref name="timeout"/>
            of forever, use <see cref="F:System.TimeSpan.MaxValue"/>.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If <typeparamref name="TValue"/> is <see cref="T:System.Object"/>, <see cref="T:System.String"/>,
            or an array of either type and the
            value contains unmappable characters, the value returned by the
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableData`1.GetValue"/> method is
            unpredictable.  For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 5:59:36 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableReader`1.ReadDataAsync(System.Object)">
            <summary>
            Asynchronously reads the next value from the server.
            </summary>
            <param name="userState">
            An object that is passed to the method invoked when the asynchronous operation completes.
            </param>
            <exception cref="T:System.TimeoutException">
            The operation has timed out.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The type of the data being read does not match the type of <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableReader`1"/>.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            		<see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/> has not been called successfully.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The type of the data being read cannot be converted to an equivalent .NET type.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            The array dimension of the data being read is not supported.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            Call this method when your application
            should not block. Each call to this method executes the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableReader`1.ReadData"/>
            method in a separate thread that is automatically allocated from the thread pool. When the asynchronous operation completes,
            it raises the <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableReader`1.ReadDataCompleted"/> event. Handle the
            <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableReader`1.ReadDataCompleted"/> event to get
            information about the completed operation from the <see cref="T:NationalInstruments.NetworkVariable.ReadDataCompletedEventArgs`1"/>
            class. Check the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property to determine if an exception occurred during
            the execution of the asynchronous task. If no error occurred, the
            <see cref="P:NationalInstruments.NetworkVariable.ReadDataCompletedEventArgs`1.Data"/> property will contain the read data.
            </para>
            	<para>
            		This method times out if
            a new value is not read from the server before 10 seconds. If a timeout occurs, the
            <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableReader`1.ReadDataCompleted"/> event is raised with the
            <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property set to <see cref="T:System.TimeoutException"/>.
            	</para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If <typeparamref name="TValue"/> is <see cref="T:System.Object"/>, <see cref="T:System.String"/>,
            or an array of either type and the
            value contains unmappable characters, the value returned by the
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableData`1.GetValue"/> method is
            unpredictable.  For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <seealso cref="E:NationalInstruments.NetworkVariable.NetworkVariableReader`1.ReadDataCompleted"/>
            <lastupdated>10/2/2009 5:59:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableReader`1.ReadDataAsync(System.TimeSpan,System.Object)">
            <summary>
            Asynchronously reads the next value from the server with the specified timeout.
            </summary>
            <param name="timeout">
            The <see cref="T:System.TimeSpan"/> value specifying how long to wait before the operation times out.
            </param>
            <param name="userState">
            An object that is passed to the method invoked when the asynchronous operation completes.
            </param>
            <exception cref="T:System.TimeoutException">
            The operation has timed out.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="timeout"/> is less than or equal to zero.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            The total milliseconds of the <paramref name="timeout"/> is greater than the maximum integer value.
            </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<para>
            The type of the data being read does not match the type of the
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableReader`1"/>.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            		<see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/> has not been called successfully.
            </para>
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<para>
            The type of the data being read cannot be converted to an equivalent .NET type.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            The array dimension of the data being read is not supported.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            Call this method when your application
            should not block. Each call to this method executes the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableReader`1.ReadData"/>
            method in a separate thread that is automatically allocated from the thread pool. When the asynchronous operation completes,
            it raises the <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableReader`1.ReadDataCompleted"/> event. Handle the
            <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableReader`1.ReadDataCompleted"/> event to get
            information about the completed operation from the <see cref="T:NationalInstruments.NetworkVariable.ReadDataCompletedEventArgs`1"/>
            class. Check the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property to determine if an exception occurred during
            the execution of the asynchronous task. If no error occurred, the
            <see cref="P:NationalInstruments.NetworkVariable.ReadDataCompletedEventArgs`1.Data"/> property will contain the read data.
            </para>
            	<para>
            		This method times out if
            a new value is not read from the server before the <paramref name="timeout"/> value has expired. If a timeout occurs, the
            <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableReader`1.ReadDataCompleted"/> event is raised with the
            <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property set to <see cref="T:System.TimeoutException"/>.
            To specify a <paramref name="timeout"/> of forever, use <see cref="F:System.TimeSpan.MaxValue"/>.
            	</para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If <typeparamref name="TValue"/> is <see cref="T:System.Object"/>, <see cref="T:System.String"/>,
            or an array of either type and the
            value contains unmappable characters, the value returned by the
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableData`1.GetValue"/> method is
            unpredictable.  For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <seealso cref="E:NationalInstruments.NetworkVariable.NetworkVariableReader`1.ReadDataCompleted"/>
            <lastupdated>10/2/2009 5:59:37 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableReader`1.OnReadDataCompleted(NationalInstruments.NetworkVariable.ReadDataCompletedEventArgs{`0})">
            <summary>
            Raises the <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableReader`1.ReadDataCompleted"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.NetworkVariable.ReadDataCompletedEventArgs`1"/> that contains the event data.
            </param>
            <lastupdated>10/9/2006 1:09:04 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.NetworkVariable.NetworkVariableReader`1.ReadDataCompleted">
            <summary>
            Occurs when an asynchronous read has completed or raised an exception.
            </summary>
            <remarks>
            	<para>
            The <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableReader`1.ReadDataCompleted"/> event occurs when
            data is read using one of the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableReader`1.ReadDataAsync(System.Object)"/>
            methods. If an exception or error occurs during the read process, the exception or error is caught and the
            <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property is set to contain the exception information.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If <typeparamref name="TValue"/> is <see cref="T:System.Object"/>, <see cref="T:System.String"/>,
            or an array of either type and the
            value contains unmappable characters, the value returned by the
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableData`1.GetValue"/> method is
            unpredictable.  For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>10/2/2009 3:57:42 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1">
            <summary>
            Provides a way to subscribe to network variable data and receive update notifications.
            </summary>
            <threadsafety safety="safe"/>
            <typeparam name="TValue">
            The type of the variable to subscribe to. The following types are supported by <typeparamref name="TValue"/>:
            <see cref="T:System.Object"/>;
            <see cref="T:System.Byte"/>, <see cref="T:System.Byte"/>[], <see cref="T:System.Byte"/>[,];
            <see cref="T:System.UInt16"/>, <see cref="T:System.UInt16"/>[], <see cref="T:System.UInt16"/>[,];
            <see cref="T:System.UInt32"/>, <see cref="T:System.UInt32"/>[], <see cref="T:System.UInt32"/>[,];
            <see cref="T:System.UInt64"/>, <see cref="T:System.UInt64"/>[], <see cref="T:System.UInt64"/>[,];
            <see cref="T:System.SByte"/>, <see cref="T:System.SByte"/>[], <see cref="T:System.SByte"/>[,];
            <see cref="T:System.Int16"/>, <see cref="T:System.Int16"/>[], <see cref="T:System.Int16"/>[,];
            <see cref="T:System.Int32"/>, <see cref="T:System.Int32"/>[], <see cref="T:System.Int32"/>[,];
            <see cref="T:System.Int64"/>, <see cref="T:System.Int64"/>[], <see cref="T:System.Int64"/>[,];
            <see cref="T:System.Boolean"/>, <see cref="T:System.Boolean"/>[], <see cref="T:System.Boolean"/>[,];
            <see cref="T:System.Single"/>, <see cref="T:System.Single"/>[], <see cref="T:System.Single"/>[,];
            <see cref="T:System.Double"/>, <see cref="T:System.Double"/>[], <see cref="T:System.Double"/>[,];
            <see cref="T:System.String"/>, <see cref="T:System.String"/>[], <see cref="T:System.String"/>[,]; and
            <see cref="T:NationalInstruments.AnalogWaveform`1"/>, <see cref="T:NationalInstruments.AnalogWaveform`1"/>[].
            			</typeparam>
            <remarks>
            	<para>
            You can use the <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1.DataUpdated"/> event to receive notifications
            when new data is available to <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1"/>.  To receive a notification with the current value of the network variable as soon as 
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1"/> connects, set the 
            <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1.ConnectionBehavior"/> property before calling
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/>.
            </para>
            	<note type="note">
            Network variable performance decreases when machines hosting the reader, writer, and variables are mixed between Logos and LogosXT. Logos is the underlying technology of the
            NI-Publish Subscribe Protocol (<format type="monospace">psp:</format>), a National Instruments proprietary protocol for inter-process communication. 
            Network variables in Measurement Studio 8.1.2, LabWindows/CVI 8.5, and LabVIEW 8.5 and later use a more efficient TCP-based implementation of Logos called LogosXT to transfer network variable data. National Instruments recommends that you use LogosXT, which <see cref="N:NationalInstruments.NetworkVariable"/> uses by default.
            Performance is especially degraded when the writer and network variable host use LogosXT and the reader that attempts to read the network variable uses Logos. This issue occurs for all reader classes. 
            <para>
            For optimum performance, National Instruments recommends that all machines accessing network variables, including the machine that hosts the variable, should use LogosXT. If using LogosXT on all machines is not possible, you should disable LogosXT. You disable LogosXT by  adding a <format type="monospace">DWORD</format> value named <format type="monospace">DisablePSPXT</format>
            to the registry key <format type="monospace">HKEY_LOCAL_MACHINE\SOFTWARE\National Instruments\LogosXT </format> and setting its value to 1. 
            If you must use a mix of Logos versions, you can reduce the performance loss by using Distributed System Manager. Use Distributed System Manager to configure a sufficiently large server-side buffer for the network variable.
            </para>
            	</note>
            </remarks>
            <lastupdated>6/30/2009 3:08:26 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1"/>
            class with the specified path name.
            </summary>
            <param name="location">
            The path name of the network variable.
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="location"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The type of the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableReader`1"/> is invalid.
            </exception>
            <remarks>
            	<para>
            The format of the <paramref name="location"/> is similar
            to the format of items on network shares and is not case-sensitive. The following are examples:
            <list type="bullet">
            			<item>
            				<description>
            					<format type="monospace"> 
            \\localhost\my_process\my_variable
            </format>
            				</description>
            			</item>
            			<item>
            				<description>
            					<format type="monospace">
            \\192.168.1.100\my_process\my_variable 
            </format>
            				</description>
            			</item>
            			<item>
            				<description>
            					<format type="monospace">
            \\test_machine.my_network.com\my_process\my_variable 
            </format>
            				</description>
            			</item>
            			<item>
            				<description>
            					<item>
            						<description>
            							<format type="monospace">
            \\localhost\system\my_variable 
            </format>
            						</description>
            					</item>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            If you specify a new variable in the system process, such as <format type="monospace">
            \\localhost\system\my_variable</format>, then the variable
            is implicitly created and can hold values of any type.
            </para>
            	<para>
            This constructor sets the default connection behavior 
            <see cref="F:NationalInstruments.NetworkVariable.SubscriberConnectionBehavior.DoNothing"/>.  For 
            a different connection behavior, set the 
            <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1.ConnectionBehavior" crefType="Unqualified"/> property.</para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character. If <paramref name="location"/> contains unmappable characters,
            an exception is thrown when you call <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/>.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 3:59:34 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1.ConnectionBehavior">
            <summary>
            Gets or sets a value that describes what the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1" crefType="Unqualified"/> does when it connects to a network variable for the first time.
            </summary>
            <value>
            A <see cref="T:NationalInstruments.NetworkVariable.SubscriberConnectionBehavior"/> value that
            represents what the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1" crefType="Unqualified"/> does when it connects to a network variable for the first time.
            </value>
            <remarks>
            If you have already called <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/>
            or <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.ConnectAsync"/>, setting this
            property has no effect.  The default value is
            <see cref="F:NationalInstruments.NetworkVariable.SubscriberConnectionBehavior.DoNothing"/>.
            </remarks>
            <lastupdated>10/2/2009 5:59:38 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1.OnDataUpdated(NationalInstruments.NetworkVariable.DataUpdatedEventArgs{`0})">
            <summary>
            Raises the <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1.DataUpdated"/> event.
            </summary>
            <param name="args">
            A <see cref="T:NationalInstruments.NetworkVariable.DataUpdatedEventArgs`1"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<note type="caution">
            		<para>
            If you override <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1.OnDataUpdated(NationalInstruments.NetworkVariable.DataUpdatedEventArgs{`0})"/> in a derived class, an exception is thrown within your <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1.OnDataUpdated(NationalInstruments.NetworkVariable.DataUpdatedEventArgs{`0})"/>  implementation any time you read from or write to a network variable.  
            The underlying network variable library uses a special thread for raising events.  This thread is blocked during execution of the 
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1.OnDataUpdated(NationalInstruments.NetworkVariable.DataUpdatedEventArgs{`0})"/> method.
            While the special thread is blocked, some operations in the network variable class library cannot be performed. Consequently, you must not perform any the following operations from the
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1.OnDataUpdated(NationalInstruments.NetworkVariable.DataUpdatedEventArgs{`0})"/> method:
            </para>
            		<list type="bullet">
            			<item>
            				<description>
            Connect or disconnect any reader or writer. This includes
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBufferedSubscriber`1"/>,
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1"/>,
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableReader`1"/>,
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1"/>,
            and <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableWriter`1"/>.
            and 
            </description>
            			</item>
            			<item>
            				<description>
            Read or write data.
            </description>
            			</item>
            			<item>
            				<description>
            Create a <see cref="T:NationalInstruments.NetworkVariable.Browser"/>.
            </description>
            			</item>
            			<item>
            				<description>
            Use a <see cref="T:NationalInstruments.NetworkVariable.Browser"/> to browse by calling
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetItem(System.String)"/>,
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitems(NationalInstruments.NetworkVariable.BrowserItem)"/>,
            <see cref="M:NationalInstruments.NetworkVariable.Browser.GetSubitemsAsync(NationalInstruments.NetworkVariable.BrowserItem,System.Object)"/>,
            or <see cref="M:NationalInstruments.NetworkVariable.Browser.TryGetItem(System.String,NationalInstruments.NetworkVariable.BrowserItem@)"/>.
            </description>
            			</item>
            			<item>
            				<description>
            Configure a network variable using
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcess"/>,
            <see cref="T:NationalInstruments.NetworkVariable.ServerProcessInfo"/>,
            <see cref="T:NationalInstruments.NetworkVariable.ServerVariable"/>,
            or <see cref="T:NationalInstruments.NetworkVariable.ServerVariableInfo"/>.
            </description>
            			</item>
            		</list>
            		<para>
            If you need to perform any of these operations in response to the <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1.DataUpdated"/> event, use an event handler instead of overriding <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1.OnDataUpdated(NationalInstruments.NetworkVariable.DataUpdatedEventArgs{`0})"/>.  Event handlers are called in a way that does not block the special thread and are exempt from these limitations.
            </para>
            	</note>
            </remarks>
            <lastupdated>10/2/2009 6:38:58 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1.DataUpdated">
            <summary>
            Occurs when new data is available to <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <remarks>
            If <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1.ConnectionBehavior" crefType="Unqualified"/> is set
            to <see cref="F:NationalInstruments.NetworkVariable.SubscriberConnectionBehavior.UpdateOnConnect"/>,
            there are some circumstances where the
            <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableSubscriber`1.DataUpdated"/>
            event might occur twice when a connection is made.  If the data has a timestamp, you can use the
            <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableData`1.TimeStamp"/> property
            to determine if you are receiving duplicate updates.
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted to ANSI using the
            system default code page.  If <typeparamref name="TValue"/> is <see cref="T:System.Object"/>, <see cref="T:System.String"/>,
            or an array of either type and the
            value contains unmappable characters, the value returned by the
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableData`1.GetValue"/> method is
            unpredictable.  For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>9/30/2009 4:54:08 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.NetworkVariableWriter`1">
            <summary>
            Provides a way to write network variable data on demand.
            </summary>
            <threadsafety safety="safe"/>
            <typeparam name="TValue">
            The type of the variable to write. The following types are supported by <typeparamref name="TValue"/>:
            <see cref="T:System.Object"/>;
            <see cref="T:System.Byte"/>, <see cref="T:System.Byte"/>[], <see cref="T:System.Byte"/>[,];
            <see cref="T:System.UInt16"/>, <see cref="T:System.UInt16"/>[], <see cref="T:System.UInt16"/>[,];
            <see cref="T:System.UInt32"/>, <see cref="T:System.UInt32"/>[], <see cref="T:System.UInt32"/>[,];
            <see cref="T:System.UInt64"/>, <see cref="T:System.UInt64"/>[], <see cref="T:System.UInt64"/>[,];
            <see cref="T:System.SByte"/>, <see cref="T:System.SByte"/>[], <see cref="T:System.SByte"/>[,];
            <see cref="T:System.Int16"/>, <see cref="T:System.Int16"/>[], <see cref="T:System.Int16"/>[,];
            <see cref="T:System.Int32"/>, <see cref="T:System.Int32"/>[], <see cref="T:System.Int32"/>[,];
            <see cref="T:System.Int64"/>, <see cref="T:System.Int64"/>[], <see cref="T:System.Int64"/>[,];
            <see cref="T:System.Boolean"/>, <see cref="T:System.Boolean"/>[], <see cref="T:System.Boolean"/>[,];
            <see cref="T:System.Single"/>, <see cref="T:System.Single"/>[], <see cref="T:System.Single"/>[,];
            <see cref="T:System.Double"/>, <see cref="T:System.Double"/>[], <see cref="T:System.Double"/>[,];
            <see cref="T:System.String"/>, <see cref="T:System.String"/>[], <see cref="T:System.String"/>[,]; and
            <see cref="T:NationalInstruments.AnalogWaveform`1"/>; <see cref="T:NationalInstruments.AnalogWaveform`1"/>[].
            </typeparam>
            <remarks>
            	<para>
            		<see cref="T:NationalInstruments.NetworkVariable.NetworkVariableWriter`1"/> goes across the network to write
            the value to the server every time you issue a write call. Because the network is accessed every time a write is called,
            the network traffic increases. To minimize network traffic, consider using
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1"/>.
            </para>
            	<para>
            Use <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteData(NationalInstruments.NetworkVariable.NetworkVariableData{`0})"/> or
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteValue(`0)"/> to write to the server
            synchronously. For asynchronous writes, use <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteDataAsync(NationalInstruments.NetworkVariable.NetworkVariableData{`0},System.Object)"/> or 
            <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteValueAsync(`0,System.Object)"/>.
            </para>
            </remarks>
            <lastupdated>9/16/2008 11:25:07 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableWriter`1"/> class
            with the specified path name.
            </summary>
            <param name="location">
            The path name of the network variable. 
            </param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="location"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The type of the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableReader`1"/> is invalid.
            </exception>
            <remarks>
            	<para>
            The format of the <paramref name="location"/> is similar
            to the format of items on network shares and is not case-sensitive. The following are examples:
            <list type="bullet">
            			<item>
            				<description>
            					<format type="monospace"> 
            \\localhost\my_process\my_variable 
            </format>
            				</description>
            			</item>
            			<item>
            				<description>
            					<format type="monospace"> 
            \\192.168.1.100\my_process\my_variable 
            </format>
            				</description>
            			</item>
            			<item>
            				<description>
            					<format type="monospace"> 
            \\test_machine.my_network.com\my_process\my_variable 
            </format>
            				</description>
            			</item>
            			<item>
            				<description>
            					<item>
            						<description>
            							<format type="monospace"> 
            \\localhost\system\my_variable 
            </format>
            						</description>
            					</item>
            				</description>
            			</item>
            		</list>
            	</para>
            	<para>
            If you specify a new variable in the system process, such as <format type="monospace"> 
            \\localhost\system\my_variable</format>, then the variable
            is implicitly created and can hold values of any type.
            </para>
            	<note type="note">
            Due to a limitation in the <see cref="N:NationalInstruments.NetworkVariable"/> class library, string values must be converted from a .NET Unicode string to an ANSI string. 
            This conversion is done by using the system default code page to map each Unicode character to an ANSI character.  If <paramref name="location"/> contains unmappable characters,
            an exception is thrown when you call <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/>.
            For more information, refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>.
            	</note>
            </remarks>
            <lastupdated>10/2/2009 4:00:53 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="P:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.FlushOnWrite">
            <summary>
            Gets or sets a value that determines whether this 
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableWriter`1"/> flushes its value after each write.
            </summary>
            <value>
            	<see langword="true"/> if the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableWriter`1"/>
            flushes after each write operation; otherwise <see langword="false"/>.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            An unexpected error happened.  Check the exception's message property for more information.
            </exception>
            <remarks>
            	<para>
            The default value is <see langword="true"/>.
            </para>
            	<para>
            The performance of the <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableWriter`1"/>
            class significantly increases when the class flushes all buffers as soon as a write is made.  This can increase
            network activity and lower throughput for your application.  If you value throughput over performance, you
            can set the <see cref="P:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.FlushOnWrite"/>
            property to <see langword="false"/> and reduce network traffic.  National Instruments recommends that you use 
            <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableBufferedWriter`1"/> when throughput is
            more important than latency.
            	</para>
            </remarks>
            <seealso cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.FlushAllConnections"/>
            <lastupdated>3/25/2008 3:30:41 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteData(NationalInstruments.NetworkVariable.NetworkVariableData{`0})">
            <summary>
            Writes data to the server.
            </summary>
            <param name="data">
            A <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> containing the value to write to the server.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<typeparamref name="TValue"/> is <see cref="T:System.Object"/>, <see cref="T:System.String"/>,
            or an array of either type and <paramref name="data"/> contains characters that cannot be converted to
            ANSI using the system default code page. Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.TimeoutException">
            The operation has timed out.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/> has not been called successfully.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            This method blocks and waits a maximum of 10 seconds to write <paramref name="data"/> to the server. If the <paramref name="data"/> cannot be written
            to the server after 10 seconds, a <see cref="T:System.TimeoutException"/>
            is thrown.
            </remarks>
            <lastupdated>10/2/2009 5:59:39 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteData(NationalInstruments.NetworkVariable.NetworkVariableData{`0},System.TimeSpan)">
            <summary>
            Writes data to the server with the specified timeout.
            </summary>
            <param name="data">
            A <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> containing the value to write to the server.
            </param>
            <param name="timeout">
            The <see cref="T:System.TimeSpan"/> value specifying how long before the operation times out..
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<typeparamref name="TValue"/> is <see cref="T:System.Object"/>, <see cref="T:System.String"/>,
            or an array of either type and <paramref name="data"/> contains characters that cannot be converted to
            ANSI using the system default code page. Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.TimeoutException">
            The operation has timed out.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/> has not been called successfully.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="timeout"/> is less than or equal to zero.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            The total milliseconds of the <paramref name="timeout"/> is greater than the maximum integer value.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            This method blocks and waits for the duration of <paramref name="timeout"/> until <paramref name="data"/> is written to the server.
            If <paramref name="data"/> cannot be written to the server after the duration of <paramref name="timeout"/> expires, a <see cref="T:System.TimeoutException"/> is thrown.
            To specify a <paramref name="timeout"/> of forever, use <see cref="F:System.TimeSpan.MaxValue"/>.
            </remarks>
            <lastupdated>10/2/2009 5:59:39 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteValue(`0)">
            <summary>
            Writes a value to the server.
            </summary>
            <param name="value">
            The value to be written to the server.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<typeparamref name="TValue"/> is <see cref="T:System.Object"/>, <see cref="T:System.String"/>,
            or an array of either type and <paramref name="value"/> contains characters that cannot 
            be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.TimeoutException">
            The operation has timed out.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/> has not been called successfully.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            This method calls <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteData(NationalInstruments.NetworkVariable.NetworkVariableData{`0})"/>, constructing
            a <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> from <paramref name="value"/>.
            This method blocks and waits a maximum of 10 seconds to write <paramref name="value"/> to the server. If <paramref name="value"/> cannot be written
            to the server after 10 seconds, a <see cref="T:System.TimeoutException"/> is thrown.
            </remarks>
            <seealso cref="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteData(NationalInstruments.NetworkVariable.NetworkVariableData{`0})"/>
            <lastupdated>10/2/2009 5:57:57 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteValue(`0,System.TimeSpan)">
            <summary>
            Writes a value to the server with the specified timeout.
            </summary>
            <param name="value">
            The value to be written to the server.
            </param>
            <param name="timeout">
            The <see cref="T:System.TimeSpan"/> value specifying how long to wait before the operation times out. .
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<typeparamref name="TValue"/> is <see cref="T:System.Object"/>, <see cref="T:System.String"/>,
            or an array of either type and <paramref name="value"/> contains characters that cannot 
            be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.TimeoutException">
            The operation has timed out.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/> has not been called successfully.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="timeout"/> is less than or equal to zero.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            The total milliseconds of the <paramref name="timeout"/> is greater than the max integer value.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            This method calls <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteData(NationalInstruments.NetworkVariable.NetworkVariableData{`0})"/>, constructing
            a <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> from <paramref name="value"/>.
            This method blocks and waits for the duration of <paramref name="timeout"/> until <paramref name="value"/> is written to the server.
            If <paramref name="value"/> cannot be written to the server after the duration of <paramref name="timeout"/> expires, a <see cref="T:System.TimeoutException"/> is thrown.
            To specify a <paramref name="timeout"/> of forever, use <see cref="F:System.TimeSpan.MaxValue"/>.
            </remarks>
            <seealso cref="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteData(NationalInstruments.NetworkVariable.NetworkVariableData{`0})"/>
            <lastupdated>10/2/2009 5:58:09 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteDataAsync(NationalInstruments.NetworkVariable.NetworkVariableData{`0},System.Object)">
            <summary>
            Asynchronously writes data to the server.
            </summary>
            <param name="data">
            A <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> containing the value to write to the server.
            </param>
            <param name="userState">
            An object that is passed to the method invoked when the asynchronous operation completes.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<typeparamref name="TValue"/> is <see cref="T:System.Object"/>, <see cref="T:System.String"/>,
            or an array of either type and <paramref name="data"/> contains characters that cannot be converted to
            ANSI using the system default code page. Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.TimeoutException">
            The operation has timed out.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/> has not been called successfully.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            Call this method when your application
            should not block. Each call to this method executes the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteData(NationalInstruments.NetworkVariable.NetworkVariableData{`0})"/>
            method in a separate thread that is automatically allocated from the thread pool. When the asynchronous operation completes,
            it raises the <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteCompleted"/> event. Handle the
            <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteCompleted"/> event to receive
            information about the completed operation from the <see cref="T:NationalInstruments.NetworkVariable.WriteCompletedEventArgs"/>
            class. Check the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property to determine if an exception occurred during
            the execution of the asynchronous task. If no error occurred, the write was successful.</para>
            	<para>
            		This method times out if
            <paramref name="data"/> is not written to the server within 10 seconds. If a timeout occurs, the
            <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteCompleted"/> event is raised with the
            <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property set to <see cref="T:System.TimeoutException"/>.
            	</para>
            </remarks>
            <seealso cref="E:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteCompleted"/>
            <lastupdated>10/2/2009 5:59:40 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteDataAsync(NationalInstruments.NetworkVariable.NetworkVariableData{`0},System.TimeSpan,System.Object)">
            <summary>
            Asynchronously writes data to the server with the specified timeout.
            </summary>
            <param name="data">
            A <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> containing the value to be written.
            </param>
            <param name="timeout">
            The <see cref="T:System.TimeSpan"/> value specifying how long to wait before the operation times out.
            </param>
            <param name="userState">
            An object that is passed to the method invoked when the asynchronous operation completes.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<typeparamref name="TValue"/> is <see cref="T:System.Object"/>, <see cref="T:System.String"/>,
            or an array of either type and <paramref name="data"/> contains characters that cannot be converted to
            ANSI using the system default code page. Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.TimeoutException">
            The operation has timed out.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/> has not been called successfully.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="timeout"/> is less than or equal to zero.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            The total milliseconds of the <paramref name="timeout"/> is greater than the maximum integer value.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            Call this method when your application
            should not block. Each call to this method executes the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteData(NationalInstruments.NetworkVariable.NetworkVariableData{`0})"/>
            method in a separate thread that is automatically allocated from the thread pool. When the asynchronous operation completes,
            it raises the <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteCompleted"/> event. Handle the
            <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteCompleted"/> event to receive
            information about the completed operation from the <see cref="T:NationalInstruments.NetworkVariable.WriteCompletedEventArgs"/>
            class. Check the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property to determine if an exception occurred during
            the execution of the asynchronous task. If no error occurred, the write was successful.</para>
            	<para>
            		This method times out if
            <paramref name="data"/> is not written to the server before the <paramref name="timeout"/> value has expired. If a timeout occurs, the
            <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteCompleted"/> event is raised with the
            <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property set to <see cref="T:System.TimeoutException"/>.
            To specify a <paramref name="timeout"/> of forever, use <see cref="F:System.TimeSpan.MaxValue"/>.
            	</para>
            </remarks>
            <seealso cref="E:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteCompleted"/>
            <lastupdated>10/2/2009 5:59:51 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteValueAsync(`0,System.Object)">
            <summary>
            Asynchronously writes a value to the server.
            </summary>
            <param name="value">
            The value to be written to the server.
            </param>
            <param name="userState">
            An object that is passed to the method invoked when the asynchronous operation completes.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<typeparamref name="TValue"/> is <see cref="T:System.Object"/>, <see cref="T:System.String"/>,
            or an array of either type and <paramref name="value"/> contains characters that cannot 
            be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.TimeoutException">
            The operation has timed out.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/> has not been called successfully.
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            This method calls <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteDataAsync(NationalInstruments.NetworkVariable.NetworkVariableData{`0},System.Object)"/>, constructing
            a <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> from <paramref name="value"/>.
            Call this method when your application
            should not block. Each call to this method executes the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteData(NationalInstruments.NetworkVariable.NetworkVariableData{`0})"/>
            method in a separate thread that is automatically allocated from the thread pool. When the asynchronous operation completes,
            it raises the <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteCompleted"/> event. Handle the
            <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteCompleted"/> event to receive
            information about the completed operation from the <see cref="T:NationalInstruments.NetworkVariable.WriteCompletedEventArgs"/>
            class. Check the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property to determine if an exception occurred during
            the execution of the asynchronous task. If no error occurred, the write was successful.</para>
            	<para>
            		This method times out if
            <paramref name="value"/> is not written to the server within 10 seconds. If a timeout occurs, the
            <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteCompleted"/> event is raised with the
            <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property set to <see cref="T:System.TimeoutException"/>.
            	</para>
            </remarks>
            <seealso cref="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteDataAsync(NationalInstruments.NetworkVariable.NetworkVariableData{`0},System.Object)"/>
            <seealso cref="E:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteCompleted"/>
            <lastupdated>10/2/2009 5:59:52 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteValueAsync(`0,System.TimeSpan,System.Object)">
            <summary>
            Asynchronously writes a value to the server with the specified timeout.
            </summary>
            <param name="value">
            The value to be written to the server.
            </param>
            <param name="timeout">
            The <see cref="T:System.TimeSpan"/> value specifying how long to wait before the operation times out.
            </param>
            <param name="userState">
            An object that is passed to the method invoked when the asynchronous operation completes.
            </param>
            <exception cref="T:System.ArgumentException">
            	<para>
            		<typeparamref name="TValue"/> is <see cref="T:System.Object"/>, <see cref="T:System.String"/>,
            or an array of either type and <paramref name="value"/> contains characters that cannot 
            be converted using the system default
            ANSI code page.  Refer to <see keyword="Unicode" keywordType="mstudio">Unicode Support in the Network Variable Class Library</see>  for more information.
            </para>
            </exception>
            <exception cref="T:System.TimeoutException">
            The operation has timed out.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="value"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	<see cref="M:NationalInstruments.NetworkVariable.NetworkVariableManager.Connect"/> has not been called successfully.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<para>
            		<paramref name="timeout"/> is less than or equal to zero.
            </para>
            	<para>
            - or -
            </para>
            	<para>
            The total milliseconds of the <paramref name="timeout"/> is greater than the maximum integer value.
            </para>
            </exception>
            <exception cref="T:NationalInstruments.NetworkVariable.NetworkVariableException">
            The underlying driver returned an error. Check the  
            <see cref="P:System.Exception.Message"/> property of the exception for more information.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <remarks>
            	<para>
            This method calls <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteDataAsync(NationalInstruments.NetworkVariable.NetworkVariableData{`0},System.Object)"/> constructing
            a <see cref="T:NationalInstruments.NetworkVariable.NetworkVariableData`1"/> from <paramref name="value"/>.
            Call this method when your application
            should not block. Each call to this method executes the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteData(NationalInstruments.NetworkVariable.NetworkVariableData{`0})"/>
            method in a separate thread that is automatically allocated from the thread pool. When the asynchronous operation completes,
            it raises the <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteCompleted"/> event. Handle the
            <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteCompleted"/> event to get
            information about the completed operation from the <see cref="T:NationalInstruments.NetworkVariable.WriteCompletedEventArgs"/>
            class. Check the <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property to determine if an exception occurred during
            the execution of the asynchronous task. If no error occurred, the write was successful.</para>
            	<para>
            		This method times out if
            <paramref name="value"/> is not written to the server before the <paramref name="timeout"/> value has expired. If a timeout occurs, the
            <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteCompleted"/> event is raised with the
            <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property set to <see cref="T:System.TimeoutException"/>.
            To specify a <paramref name="timeout"/> of forever, use <see cref="F:System.TimeSpan.MaxValue"/>.
            	</para>
            </remarks>
            <seealso cref="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteDataAsync(NationalInstruments.NetworkVariable.NetworkVariableData{`0},System.Object)"/>
            <seealso cref="E:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteCompleted"/>
            <lastupdated>10/2/2009 5:59:53 PM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.OnWriteCompleted(NationalInstruments.NetworkVariable.WriteCompletedEventArgs)">
            <summary>
            Raises the <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteCompleted"/> event.
            </summary>
            <param name="e">
            A <see cref="T:NationalInstruments.NetworkVariable.WriteCompletedEventArgs"/> that contains the event data.
            </param>
            <exception cref="T:System.ObjectDisposedException">
            The object has been disposed.
            </exception>
            <lastupdated>10/9/2006 1:33:05 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="E:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteCompleted">
            <summary>
            Occurs when an asynchronous write has completed or raised an exception.
            </summary>
            <remarks>
            The <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteCompleted"/> event occurs when
            data is written using either the <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteDataAsync(NationalInstruments.NetworkVariable.NetworkVariableData{`0},System.Object)"/>
            or <see cref="M:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteValueAsync(`0,System.Object)"/>
            methods. If an exception or error occurs during the write process, the exception or error is caught and the
            <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error"/> property is set to contain the thrown exception.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">
            An event handler is added after the object has been disposed.
            </exception>
            <lastupdated>9/16/2008 11:25:49 AM</lastupdated>
            <updatedby>Measurement Studio</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.WriteCompletedEventArgs">
            <summary>
            Provides data for the <see cref="E:NationalInstruments.NetworkVariable.NetworkVariableWriter`1.WriteCompleted"/> event.
            </summary>
            <threadsafety safety="safe"/>
            <lastupdated>10/22/2006 8:41:48 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="M:NationalInstruments.NetworkVariable.WriteCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NationalInstruments.NetworkVariable.WriteCompletedEventArgs"/>
            class with the specified error, whether the asynchronous operation is canceled, and the optional user-supplied state object.
            </summary>
            <param name="error">
            An error, if an error occurs, during the asynchronous operation.
            </param>
            <param name="canceled">
            A value indicating whether the asynchronous operation is canceled.
            </param>
            <param name="userState">
            The optional user-supplied state object.
            </param>
            <lastupdated>10/22/2006 8:47:38 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="T:NationalInstruments.NetworkVariable.WriteFailureCause">
            <summary>
            Specifies the cause of the write failure.
            </summary>
            <lastupdated>10/16/2006 10:57:06 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
        <member name="F:NationalInstruments.NetworkVariable.WriteFailureCause.Unconnected">
            <summary>
            Write failed because the connection has not been made.
            </summary>
            <lastupdated>10/16/2006 10:57:57 PM</lastupdated>
            <updatedby>Whitney Bates</updatedby>
            <approved>True</approved>
        </member>
    </members>
</doc>
